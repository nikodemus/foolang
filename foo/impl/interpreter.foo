import .environment.Environment
import .utils.FileModuleDictionary
import .ast.AstClass
import .ast.AstSlot

---
TODO:
- Would be cleaner if AstClass linked directly to the generated class: the
  delegator could then fetch the delegate from the receiver directly, allowing
  all classes to share the same delegator instance.

- Need a way to tell interpreter classes apart from builtins.
  Additional 'level' property for classes? (builtins 0, interpreter classes 1,
  interpreter running in interpreter 2, etc).

- AstInterpreter needs to map classOf to return the wrapper class instead
  of the real class.

- Instance methods are going to be funky.
---

class Interpreter { system }
    direct method run: program in: system with: args
        let modules = FileModuleDictionary
                          new: { "lang"     -> system files / "foo/lang",
                                 "impl"     -> system files / "foo/impl",
                                 "lib"      -> system files / "foo/lib",
                                 "examples" -> system files / "foo/examples" }.
        let source = (system files / program) readString.
        let builtinEnv = Environment modules: modules
                             -- These are things defined in the prelude.
                             ; removeBuiltins: [
                                 "Error",
                                 "List",
                                 "Object",
                                 "TypeError" ].
        let env = builtinEnv
                      ; importPrelude: ["lang", "prelude"]
                      ; load: source.
        let main = env global: "Main".
        main eval run: args in: system!
end
