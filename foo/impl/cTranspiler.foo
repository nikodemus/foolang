import .transpiler.name.Name
import .transpiler.integer
import .transpiler.block
import .transpiler.boolean
import .transpiler.float
import .transpiler.string
import .ast.AstClass

class BuiltinMethod { selector definition }
    direct method forEach: builtins
        let list = List new.
        builtins
            do: { |selector definition|
                  list push: (self
                                  selector: selector
                                  definition: definition) }.
        list!
    method isBuiltin
        True!
    method arity
        definition signature size!
    method frameSize
        self arity!
    method signature
        definition signature!
    method body
        definition body!
end

class BuiltinClass { name directMethods instanceMethods }
    direct method new: name
                  directMethods: directMethods
                  instanceMethods: instanceMethods
        self name: name
             directMethods: (BuiltinMethod forEach: directMethods)
             instanceMethods: (BuiltinMethod forEach: instanceMethods)!
    method isBuiltin
        True!
end

define BuiltinClasses [
     BuiltinClass
         new: "Block"
         directMethods: []
         instanceMethods: block.BlockMethods,
     BuiltinClass
         new: "Boolean"
         directMethods: boolean.DirectMethods
         instanceMethods: boolean.InstanceMethods,
     BuiltinClass
         new: "Float"
         directMethods: []
         instanceMethods: float.FloatMethods,
     BuiltinClass
         new: "Integer"
         directMethods: []
         instanceMethods: integer.IntegerMethods,
     BuiltinClass
         new: "String"
         directMethods: []
         instanceMethods: string.InstanceMethods
]!

class SelectorMap { names }
    direct method new
        self names: Dictionary new!

    method map: selector
        names
            at: selector name
            ifNonePut: { Name mangleSelector: selector }!

    method do: block
        names do: block!
end

class CTranspiler { output selectorMap blockFunctions constants }

    direct method transpile: globals in: env
        let visitor = self
                          output: StringOutput new
                          selectorMap: SelectorMap new
                          blockFunctions: List new
                          constants: List new.
        -- FIXME: visit Main, and it's dependencies only
        globals do: { |each| visitor forwardDeclarationFor: each }.
        globals do: { |each| each definition visitBy: visitor }.
        visitor generateMain.
        { main: visitor output content,
          blocks: visitor generateBlocks,
          constants: visitor generateConstants,
          classes: visitor generateClasses,
          selectors: visitor generateSelectors }!

    method forwardDeclarationFor: aGlobal
        output println: "struct Foo {Name mangleGlobal: aGlobal};"!

    method generateMain
        output println: "int main".
        output println: "    (int argc, char** argv)".
        output println: "\{".
        output println: "    struct FooContext* ctx = foo_context_new_main(0ul);".
        let main = Name mangleGlobal: {name: "Main"}.
        output println: "    foo_send(ctx, &{Name mangleSelector: #run}, {main}, 0);".
        output println: "    return 0;".
        output println: "}"!

    method generateSelectors
        let output = StringOutput new.
        let prev = "NULL".
        selectorMap do: { |name cname|
                         output print: "struct FooSelector ".
                         output print: cname.
                         output print: " = \{ .name = &FOO_CSTRING(".
                         output display: name.
                         output print: "), .next = ".
                         output print: prev.
                         output print: " };\n".
                         prev = "&{cname}" }.
        output println: "struct FooSelector* FOO_InternedSelectors = {prev};".
        output content!

    method generateClasses
        StringOutput
            with: { |out|
                    let builtinVisitor = CTranspiler
                                             output: out
                                             selectorMap: selectorMap
                                             blockFunctions: blockFunctions
                                             constants: constants.
                    BuiltinClasses
                        do: { |each|
                              builtinVisitor visitClassDefinition: each } }!

    method generateBlocks
        StringOutput with: { |out| self generateBlocksOn: out }!

    method generateBlocksOn: out
        blockFunctions do: { |block|
                             out println: block declaration }.
        out newline.
        blockFunctions do: { |block|
                             out println: block definition }!

    method generateConstants
        StringOutput with: { |out| self generateConstantsOn: out }!

    method generateConstantsOn: out
        constants do: { |each| out println: each }!

    method selectorCName: selector
        self selectorMap map: selector!

    method stringCName: string
        let index = constants size + 1.
        let cname = "foostring_id{index}".
        constants
            add: (StringOutput
                      with: { |out|
                              out println: "struct FooBytes {cname}_bytes =".
                              out println: "\{".
                              out println: "    .size = {string size},".
                              out print: "    .data = \{ ".
                              string do: { |each|
                                           out print: "'{each}'," }.
                              out print: " 0".
                              out println: " }".
                              out println: "};".
                              out newline.
                              out println: "struct Foo {cname} =".
                              out println: "\{".
                              out println: "    .vtable = &{Name mangleInstanceVtable: String},".
                              out println: "    .datum = \{ .bytes = &{cname}_bytes }".
                              out println: "};".
                              out newline }).
        cname!

    method blockCName: block
        let output = StringOutput new.
        -- Placeholder so that recursive entry by visitor doesn't grab the
        -- same id.
        blockFunctions add: False.
        let index = blockFunctions size.
        let cname = "fooblock_id{index}".
        let signature = StringOutput with: { |out|
                                             out print: "struct Foo ".
                                             out print: cname.
                                             out print: "(struct FooContext* ctx)" }.
        output print: signature.
        output println: " \{".
        output print: "    return ".
        let blockVisitor = CTranspiler
                               output: output
                               selectorMap: selectorMap
                               blockFunctions: blockFunctions
                               constants: constants.
        block body visitBy: blockVisitor.
        output println: ";\n}".
        blockFunctions
            put: {declaration: "{signature};", definition: output content}
            at: index.
        cname!

    method visitClassDefinition: aClass
        let classNote = aClass isBuiltin
                       ifTrue: { "{aClass name} (builtin)" }
                       ifFalse: { aClass name }.
        output println: "/**
 * {classNote}
 *
 */".
        -- Forward declarations for methods to use.
        let instanceVtableName = Name mangleInstanceVtable: aClass.
        output println: "struct FooVtable {instanceVtableName};".
        let classVtableName = Name mangleClassVtable: aClass.
        output println: "struct FooVtable {classVtableName};".
        let globalName = Name mangleGlobal: aClass.
        output println: "struct Foo {globalName};".
        output newline.
        let directMethods = aClass directMethods copy. -- Augmented later with ctor
        directMethods
            do: { |each|
                  self
                      _generateMethod: each
                      _in: aClass
                      _as: (Name mangleDirectMethod: each selector in: aClass) }.
        aClass instanceMethods
            do: { |each|
                  self
                      _generateMethod: each
                      _in: aClass
                      _as: (Name mangleInstanceMethod: each selector in: aClass) }.
        aClass isBuiltin
            ifFalse: {
                -- Layout
                let layoutName = "FooLayout_{aClass name}".
                output println: "struct FooLayout {layoutName} =".
                output println: "\{".
                output println: "    .size = {aClass slots size},".
                output println: "    .slots = \{".
                aClass slots
                    do: { |each|
                          output println: "        \{ .name = &FOO_CSTRING({each name displayString}) }," }.
                output println: "    }".
                output println: "};".
                output newline.
                -- Constructor
                let ctor = aClass constructor.
                directMethods push: { selector: ctor, arity: aClass slots size, frameSize: 0 }.
                let ctorName = Name mangleDirectMethod: ctor in: aClass.
                output println: "struct FooVtable {instanceVtableName};". -- forward decl
                output newline.
                output print: "struct Foo ".
                output println: ctorName.
                output println: "    (struct FooContext* ctx, size_t nargs, va_list args)".
                output println: "\{".
                output println: "    (void)ctx;".
                output println: "    (void)nargs;".
                output println: "    (void)args;".
                output println: "    struct Foo* new = FOO_ALLOC_ARRAY({aClass slots size}, struct Foo);".
                output println: "    for (int i = 0; i < {aClass slots size}; ++i)".
                output println: "        new[i] = va_arg(args, struct Foo);".
                output println: "    return (struct Foo)\{ .vtable = &{instanceVtableName}, .datum = \{ .object = new } };".
                output println: "}".
                output newline
            }.
        -- Class Vtable
        output println: "struct FooVtable {classVtableName} = ".
        output println: "\{".
        output println: "    .name = &FOO_CSTRING({aClass name displayString}\" class\"),".
        output println: "    .size = {directMethods size},".
        output println: "    .methods = \{".
        directMethods
            do: { |each|
                  output println: "        (struct FooMethod)\{ .selector = &{self selectorCName: each selector},".
                  output println: "                            .argCount = {each arity},".
                  output println: "                            .frameSize = {each frameSize},".
                  output println: "                            .function = &{Name mangleDirectMethod: each selector in: aClass} }," }.
        output println: "    }".
        output println: "};".
        output newline.
        -- Instance Vtable
        output println: "struct FooVtable {instanceVtableName} = ".
        output println: "\{".
        output println: "    .name = &FOO_CSTRING({aClass name displayString}),".
        output println: "    .classptr = &{globalName},".
        output println: "    .size = {aClass instanceMethods size},".
        output println: "    .methods = \{".
        aClass instanceMethods
            do: { |each|
                  output println: "        (struct FooMethod)\{ .selector = &{self selectorCName: each selector},".
                  output println: "                            .argCount = {each arity},".
                  output println: "                            .frameSize = {each frameSize},".
                  output println: "                            .function = &{Name mangleInstanceMethod: each selector in: aClass} }," }.
        output println: "    }".
        output println: "};".
        output newline.
        -- Class struct
        let className = "FooClass_{aClass name}".
        output println: "struct FooClass {className} = ".
        output println: "\{".
        output println: "    .instanceVtable = &{instanceVtableName}".
        output println: "};".
        output newline.
        -- Class object
        output println: "struct Foo {globalName} =".
        output println: "\{".
        output println: "    .vtable = &{classVtableName},".
        output println: "    .datum = \{ .class = &{className} }".
        output println: "};".
        output newline!

    method _generateMethod: aMethod _in: aClass _as: mangledName
        output print: "struct Foo ".
        output println: mangledName.
        output println: "    (struct FooContext* ctx, size_t nargs, va_list args)".
        output println: "\{".
        output println: "    (void)ctx;".
        output println: "    (void)nargs;".
        output println: "    (void)args;".
        aMethod signature
            doWithIndex: { |type index|
                           type is Any
                               ifTrue: { output println: "    ctx->frame[{index-1}ul] = va_arg(args, struct Foo);" }
                               ifFalse: { output println: "    ctx->frame[{index-1}ul] = foo_vtable_typecheck(&{Name mangleInstanceVtable: type}, va_arg(args, struct Foo));" } }.
        aMethod isBuiltin
            ifTrue: {  output print: "    ".
                       output println: (aMethod body replace: "\n" with: "\n    ").
                       output println: "}" }
            ifFalse: { output print: "    return ".
                       aMethod body visitBy: self.
                       output println: ";".
                       output println: "}" }.
        output newline!

    method visitGlobal: aGlobal
        output print: (Name mangleGlobal: aGlobal)!

    method visitIs: anIs
        output print: "(\{ struct Foo left = ".
        anIs left visitBy: self.
        output print: "; ".
        output print: "struct Foo right = ".
        anIs right visitBy: self.
        output print: "; ".
        output print: "foo_Boolean_new(left.vtable == right.vtable && left.datum.int64 == right.datum.int64); ".
        output print: "})"!

    method visitSeq: seq
        output print: "(\{ ".
        seq first visitBy: self.
        output print: "; ".
        seq then visitBy: self.
        output print: "; })"!

    method visitSlotSet: set
        output print: "(ctx->receiver.datum.object[".
        output print: (set slot index - 1).
        output print: "] = ".
        set value visitBy: self.
        output print: ")"!

    method visitSlotRef: ref
        output print: "ctx->receiver.datum.object[".
        output print: (ref slot index - 1).
        output print: "]"!

    method visitReturn: ret
        output print: "foo_return(ctx, ".
        ret value visitBy: self.
        output print: ")"!

    method visitComment: aComment
        -- FIXME: Include comments in generated source.
        aComment value visitBy: self!

    method visitConstant: aConstant
        let value = aConstant value.
        (Integer includes: value)
            ifTrue: { return output print: "foo_Integer_new({value})" }.
        (Float includes: value)
            ifTrue: { return output print: "foo_Float_new({value})" }.
        (String includes: value)
            ifTrue: { return output print: (self stringCName: value) }.
        Error raise: "Don't know how to transpile constant `{value}` into C."!

    method visitSend: aSend
        output print: "foo_send(ctx, &".
        output print: (self selectorCName: aSend selector).
        output print: ", ".
        aSend receiver visitBy: self.
        output print: ", ".
        output print: aSend arguments size.
        output print: "ul".
        aSend arguments
            do: { |arg|
                  output print: ", ".
                  arg visitBy: self }.
        output print: ")"!

    method visitSelfInstance: aSelf
        output print: "ctx->receiver"!

    method visitSelfClass: aSelf
        output print: "*ctx->receiver.vtable->classptr"!

    method visitBindLexical: aBind
        output print: "(\{ ctx->frame[{aBind variable index - 1}ul] = ".
        aBind value visitBy: self.
        output print: ";".
        aBind body visitBy: self.
        output print: "; })"!

    method visitLexicalRef: aRef
        output print: "foo_lexical_ref(ctx, {aRef variable index - 1}ul, {aRef frameOffset}ul)"!

    method visitBlock: aBlock
        output print: "foo_block_new(ctx, ".
        output print: (self blockCName: aBlock).
        output print: ", ".
        output print: aBlock argumentCount.
        output print: ", ".
        output print: aBlock frameSize.
        output print: ")"!
end
