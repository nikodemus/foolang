define DefaultCNames
    let names = Dictionary new.
    names put: "FOO_SELECTOR_add" at: "+".
    names put: "FOO_SELECTOR_mul" at: "*".
    names!

class SelectorMap { cnames }
    direct method new
        self cnames: Dictionary new!

    method map: selector
        let name = selector name.
        cnames
            at: name
            ifNone: { let default = self _default: name.
                      cnames put: default at: name.
                      default }!

    method do: block
        cnames doKeys: { |name|
                         block
                             value: name
                             value: (cnames at: name) }!

    method _default: name
        DefaultCNames
            at: name
            ifNone: { "FOO_SELECTOR__{name}" }!
end

class CTranspiler { output selectorMap }

    direct method transpile: ast in: env
        let visitor = self
                          output: StringOutput new
                          selectorMap: SelectorMap new.
        visitor initContext: env allocation size.
        ast do: { |node| node visitBy: visitor }.
        visitor output println: ";".
        {selectors_h: visitor selectors_h,
         main: visitor output content}!

    method initContext: frameSize
        output
            println: "struct FooContext* context = foo_context_new(foo_Integer_new(0), {frameSize}ul, 0, NULL);"!

    method selectors_h
        let output = StringOutput new.
        let prev = "NULL".
        selectorMap do: { |name cname|
                         output print: "struct FooSelector ".
                         output print: cname.
                         output print: " = \{ .name = &FOO_CSTRING(".
                         output display: name.
                         output print: "), .next = ".
                         output print: prev.
                         output print: " };\n".
                         prev = "&{cname}" }.
        output println: "struct FooSelector* FOO_InternedSelectors = {prev};".
        output content!

    method vtable: name datum: value
        output print: "(struct Foo)\{ .vtable = {name}, .datum = \{ .int64 = {value}l } }"!

    method selectorCName: selector
        self selectorMap map: selector!

    method visitConstant: value
        (Integer includes: value)
            ifTrue: { return self vtable: "&FOO_IntegerVtable" datum: value }.
        Error raise: "Don't know how to transpile constant `{value}` into C."!

    method visitSend: selector to: receiver with: arguments source: source
        output print: "foo_send(&".
        output print: (self selectorCName: selector).
        output print: ", ".
        receiver visitBy: self.
        output print: ", ".
        output print: arguments size.
        output print: "ul".
        arguments do: { |arg|
                        output print: ", ".
                        arg visitBy: self }.
        output print: ")"!

    method visitBindLexical: name value: value index: index body: body
        output print: "\{ context->frame[{index-1}ul] = ".
        value visitBy: self.
        output println: ";".
        body visitBy: self.
        output println: "; }"!

    method visitLexicalRef: name index: index frame: frame
        output print: "foo_lexical_ref(context, {index-1}ul, {frame-1}ul)"!
end
