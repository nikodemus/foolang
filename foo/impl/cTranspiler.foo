import .transpiler.name.Name
import .transpiler.integer.IntegerMethods

define BlockMethods
    { #value -> {signature: [],
                 body: "return foo_apply(ctx, nargs, args);"} }!

define BuiltinClasses
    [{name: "Integer", methods: IntegerMethods},
     {name: "Block", methods: BlockMethods}]!

class SelectorMap { names }
    direct method new
        self names: Dictionary new!

    method map: selector
        names
            at: selector name
            ifNonePut: { Name mangleSelector: selector }!

    method do: block
        names do: block!
end

class CTranspiler { output selectorMap blockFunctions }

    direct method transpile: ast in: env
        let visitor = self
                          output: StringOutput new
                          selectorMap: SelectorMap new
                          blockFunctions: List new.
        visitor initContext: env frame size.
        ast do: { |node| node visitBy: visitor }.
        visitor output println: ";".
        { main: visitor output content,
          blocks: visitor generateBlocks,
          classes: visitor generateClasses,
          selectors: visitor generateSelectors }!

    method initContext: frameSize
        output
            println: "struct FooContext* context = foo_context_new_main({frameSize}ul);"!

    method generateSelectors
        let output = StringOutput new.
        let prev = "NULL".
        selectorMap do: { |name cname|
                         output print: "struct FooSelector ".
                         output print: cname.
                         output print: " = \{ .name = &FOO_CSTRING(".
                         output display: name.
                         output print: "), .next = ".
                         output print: prev.
                         output print: " };\n".
                         prev = "&{cname}" }.
        output println: "struct FooSelector* FOO_InternedSelectors = {prev};".
        output content!

    method generateClasses
        StringOutput
            with: { |out|
                    BuiltinClasses
                        do: { |each| self _generateClass: each to: out } }!

    method _generateClass: aClass to: stream
        let methods = aClass methods.
        -- 1. Method functions
        methods
            do: { |selector methodInfo|
                  stream println: "struct Foo {Name mangleMethod: selector in: aClass}".
                  stream println: "    (struct FooContext* ctx, size_t nargs, va_list args)".
                  stream println: "\{".
                  stream println: "    (void)ctx;".
                  stream println: "    (void)nargs;".
                  stream println: "    (void)args;".
                  let signature = methodInfo signature.
                  (selector arity - 1 == signature size) assert.
                  signature
                      doWithIndex: { |argType index|
                                     stream println: "    struct Foo arg{index} = foo_vtable_typecheck(&{Name mangleVtable: (signature at: index)}, va_arg(args, struct Foo));".
                                     stream println: "    (void)arg{index};" }.
                  stream print: "    ".
                  stream println: (methodInfo body replace: "\n" with: "\n    ").
                  stream println: "}".
                  stream newline }.
        -- 2. MethodArray
        let methodArrayName = "FOO_{aClass name}Methods".
        stream println: "struct FooMethodArray {methodArrayName} = ".
        stream println: "\{".
        stream println: "    .size = {methods size},".
        stream println: "    .data = \{".
        methods
            doKeys: { |each|
                      let arity = each arity - 1. -- Selector arity is one greater!
                      stream println: "        (struct FooMethod)\{ .selector = &{self selectorCName: each},".
                      stream println: "                            .argCount = {arity},".
                      stream println: "                            .frameSize = {arity},".
                      stream println: "                            .function = &{Name mangleMethod: each in: aClass} }," }.
        stream println: "    }".
        stream println: "};".
        stream newline.
        -- 3. Vtable
        stream println: "struct FooVtable {Name mangleVtable: aClass} = ".
        stream println: "\{".
        stream println: "    .name = &FOO_CSTRING({aClass name displayString}),".
        stream println: "    .methods = &{methodArrayName}".
        stream println: "};".
        stream newline!

    method generateBlocks
        StringOutput
            with: { |out|
                    blockFunctions do: { |block| out println: block } }!

    method selectorCName: selector
        self selectorMap map: selector!

    method blockCName: block
        let output = StringOutput new.
        -- Placeholder so that recursive entry by visitor doesn't grab the
        -- same id.
        blockFunctions add: False.
        let index = blockFunctions size.
        let cname = "fooblock_id{index}".
        output print: "struct Foo ".
        output print: cname.
        output println: " (struct FooContext* context) \{".
        output print: "return ".
        let blockVisitor = CTranspiler
                               output: output
                               selectorMap: selectorMap
                               blockFunctions: blockFunctions.
        block body visitBy: blockVisitor.
        output println: ";\n}".
        blockFunctions put: output content at: index.
        cname!

    method visitConstant: aConstant
        let value = aConstant value.
        (Integer includes: value)
            ifTrue: { return output print: "foo_Integer_new({value})" }.
        Error raise: "Don't know how to transpile constant `{value}` into C."!

    method visitSend: aSend
        output print: "foo_send(context, &".
        output print: (self selectorCName: aSend selector).
        output print: ", ".
        aSend receiver visitBy: self.
        output print: ", ".
        output print: aSend arguments size.
        output print: "ul".
        aSend arguments
            do: { |arg|
                  output print: ", ".
                  arg visitBy: self }.
        output print: ")"!

    method visitBindLexical: aBind
        output print: "(\{ context->frame[{aBind variable index - 1}ul] = ".
        aBind value visitBy: self.
        output print: ";".
        aBind body visitBy: self.
        output print: "; })"!

    method visitLexicalRef: aRef
        output print: "foo_lexical_ref(context, {aRef variable index - 1}ul, {aRef frameOffset}ul)"!

    method visitBlock: aBlock
        output print: "foo_block_new(context, ".
        output print: (self blockCName: aBlock).
        output print: ", ".
        output print: aBlock argumentCount.
        output print: ", ".
        output print: aBlock frameSize.
        output print: ")"!
end
