import .utils.Debug
import .astVisitor.AstVisitor
import .astPrinter.AstPrinter

class Process {}
    is Object
end

class BacktraceFrame { receiver selector::Selector arguments }
    is Object
end

define $AstCascadeReceiver
    "<<<not in cascade>>>"!

class InterpreterContext {
        sender
        receiver
        theMethod
        frameContext
        frame::Array
        returnBlock
    }
    is Object

    direct method new: size
        self new: size
             returnBlock: { |value|
                            Error raise: "Invalid return: {value}" }!

    direct method new: size returnBlock: returnBlock
        self sender: False
             receiver: False
             theMethod: False
             frameContext: False
             frame: (Array new: size value: "<unbound>")
             returnBlock: returnBlock!

    method invalidate
        returnBlock = { |value|
                        Error raise: "Cannot return from dead context: {value}" }!

    method at: index inFrame: frameNumber
        frameNumber > 0
            ifTrue: { frameContext at: index inFrame: frameNumber - 1 }
            ifFalse: { frame at: index }!

    method put: value at: index inFrame: frameNumber
        frameNumber > 0
            ifTrue: { frameContext put: value at: index inFrame: frameNumber - 1 }
            ifFalse: { frame put: value at: index }!

    method backtrace
        let bt = List new.
        let ctx = self.
        { ctx is False }
            whileFalse: { let m = ctx theMethod.
                          m is False
                              ifFalse: { bt add:
                                             (BacktraceFrame
                                                  receiver: ctx receiver
                                                  selector: m selector
                                                  arguments: (ctx frame from: 1 to: m argumentCount)) }.
                         ctx = ctx sender }.
        bt!

end

class AstBlockClosure { context block }
    is Block

    method displayOn: stream
        AstPrinter print: block to: stream!

    method loop
        { self value } loop!

    method finally: cleanup
        -- KLUDGE: cleanup not passed directly to builtin
        -- #finally: since it expects a Closure, which
        -- AstBlockClosure is currently not.
        { self value } finally: { cleanup value }!

    method arity
        block argumentCount!

    method signature
        block argumentVariables collect: #type as: Array!

    method apply: arguments
        let frame = Array new: block frameSize.
        let nArgs = arguments size.
        self arity is nArgs
            ifFalse: { Error
                           raise: "Self-hosted block wants {block argumentCount}, got {nArgs} arguments. {block argumentVariables collect: #name}" }.
        block argumentVariables
            do: { |var|
                  let index = var index.
                  frame put: (var type typecheck: (arguments at: index))
                        at: index }.
        let context = InterpreterContext
                          sender: $context
                          receiver: context receiver
                          theMethod: block
                          frameContext: context
                          frame: frame
                          returnBlock: context returnBlock.
        { let ret = AstInterpreter eval: block body with: context.
          let type = block returnType.
          type is Any
              ifTrue: { ret }
              ifFalse: { type typecheck: ret } }
        finally: { context invalidate } !
end

-- Used to pass process and context through host frames by visitSend
define $process
    False!
define $context
    False!

class AstInterpreter { context process }
    is AstVisitor

    direct method eval: ast in: env
        self
            eval: ast
            with: (InterpreterContext new: env frame size)
            in: Process new!

    direct method eval: ast with: context
        self
            eval: ast
            with: context
            in: $process!

    direct method eval: ast with: context in: process
        ast visitBy: (self
                          context: context
                          process: process)!

    direct method evalDefine: body frameSize: frameSize
        let context = InterpreterContext
                          new: frameSize
                          returnBlock: { |value| return value }.
        { self eval: body with: context in: Process new }
            finally: { context invalidate } !

    direct method invokeMethod: astMethod on: receiver with: arguments
        astMethod isDefined
            ifFalse: { -- required method not defined in implementation
                       RequiredMethodMissing
                           raise: astMethod selector
                           on: receiver
                           isDirect: astMethod isDirect }.
        let frame = Array new: astMethod frameSize.
        let nArgs = arguments size.
        astMethod argumentCount is nArgs
            ifFalse: { Error raise: "Self-hosted method argument count mismatch!" }.
        astMethod argumentVariables
            do: { |var|
                  let index = var index.
                  frame put: (var type typecheck: (arguments at: index))
                        at: index }.
        let context = InterpreterContext
                          sender: $context
                          receiver: receiver
                          theMethod: astMethod
                          frameContext: $context
                          frame: frame
                          returnBlock: { |value| return value }.
        { let ret = AstInterpreter eval: astMethod body with: context.
          let type = astMethod returnType.
          type is False
              ifTrue: { ret }
              ifFalse: { return type typecheck: ret } }
        finally: { context invalidate } !

    method visitTypecheck: aNode
        let value = aNode value visitBy: self.
        let type = aNode type visitBy: self.
        type typecheck: value!

    method visitConstant: aConstant
        aConstant value!

    method visitArray: anArray
        let new = Array new: (anArray entries size).
        anArray entries
            doWithIndex: { |each index|
                           new put: (each visitBy: self) at: index }.
        new!

    method visitRecord: aRecord
        aRecord name
            sendTo: Record
            with: (aRecord values
                       collect: { |each| each visitBy: self }) asArray!

    method visitDictionary: aDictionary
        let theDictionary = Dictionary withCapacity: (aDictionary entries size).
        aDictionary entries
            do: { |each|
                  -- Note order of evaluation!
                  let key = each key visitBy: self.
                  theDictionary
                      put: (each value visitBy: self)
                      at: key }.
        theDictionary!

    method visitGlobal: aVar
        aVar eval!

    method visitDynamic: aVar
        aVar eval!

    method visitIs: anIs
        (anIs left visitBy: self) is (anIs right visitBy: self)!

    method visitSeq: aSeq
        aSeq first visitBy: self.
        aSeq then visitBy: self!

    method visitReturn: aReturn
        context returnBlock value: (aReturn value visitBy: self)!

    method visitPanic: aPanic
        panic (aPanic value visitBy: self)!

    method visitCascade: aCascade
        let $AstCascadeReceiver = aCascade receiver visitBy: self.
        let result = False.
        aCascade messages
            do: { |each|
                  result = each visitBy: self }.
        result!

    method visitCascadeReceiver: aReceiver
        $AstCascadeReceiver!

    method visitSend: aSend
        let selector = aSend selector.
        let object = aSend receiver visitBy: self.
        let arguments = aSend arguments collect: { |arg| arg visitBy: self }.
        let $context = context.
        let $process = process.
        -- Debug println: "send: {object classOf name} {selector}".
        { selector sendTo: object with: arguments asArray }
            on: DoesNotUnderstand
            do: { |ex|
                  -- Add the source location to the error.
                  (object is ex receiver and: selector == ex selector)
                      ifTrue: { DoesNotUnderstand
                                    raise: selector
                                    with: arguments
                                    on: object
                                    source: aSend source
                                    context: context }} !

    method visitBlock: aBlock
        -- Debug println: "\nblock args: {aBlock argumentCount}, size: {aBlock frameSize}".
        AstBlockClosure
            context: context
            block: aBlock!

    method visitSelfClass: aSelf
        context receiver classOf!

    method visitSelfInstance: aSelf
        context receiver!

    method visitSlotRef: aSlotRef
        aSlotRef slot at: context receiver!

    method visitSlotSet: aSlotSet
        let slot = aSlotSet slot.
        let value = slot type
                        typecheck: (aSlotSet value visitBy: self).
        slot put: value
             at: context receiver!

    method visitBindDynamic: aBind
        aBind variable
            bind: (aBind value visitBy: self)
            in: { aBind body visitBy: self }!

    method visitBindLexical: aBind
        let type = aBind variable type.
        let value = aBind value visitBy: self.
        context
            put: (type typecheck: value)
            at: aBind variable index
            inFrame: 0.
        aBind body visitBy: self!

    method visitLexicalRef: aRef
        -- Debug println: "ref: {aRef variable}".
        context
            at: aRef variable index
            inFrame: aRef frameOffset!

    method visitLexicalSet: aSet
        -- Debug println: "set: {aSet variable}".
        let type = aSet variable type.
        let value = aSet value visitBy: self.
        context
            put: (type typecheck: value)
            at: aSet variable index
            inFrame: aSet frameOffset!
end
