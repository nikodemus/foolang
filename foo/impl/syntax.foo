import .syntaxPrinter.SyntaxPrinter

interface Syntax
    is Object

    required method visitBy: visitor

    required method parts

    method addTo: definition
        let note = "invalid definition part".
        Error raise: "Bad definition of {definition name}:\n{self source note: note}"!

    method withBlockComment: lines fence: fence commentSource: source
        SyntaxPrefixComment
            comment: lines
            value: self
            source: source
            fence: fence!

    method withPrefixComment: comment::String commentSource: source
        SyntaxPrefixComment
            comment: comment
            value: self
            source: source!

    method withSuffixComment: comment::String commentSource: source
        SyntaxSuffixComment
            comments: (List with: comment)
            value: self
            source: source!

    method checkEqualInternal: other
        self parts with: other parts
                   do: { |a b|
                         a is b
                             ifFalse: { a checkEqual: b } }!

    method isEquivalent: other
        self parts with: other parts
                   do: { |a b| a == b ifFalse: { return False } }.
        True!

    method toString
        self displayString!

    method isSuffixComment
        False!

    method isLiteral
        False!

    method isSimple
        self weight <= 2!

    method isTiny
        self weight <= 1!

    method weight
        10!

    method displayOn: stream
        stream print: "#<{self classOf name} ".
        { SyntaxPrinter print: self to: stream }
            on: Error
            do: { |e|
                  { stream print: "<error printing: {e description}>>".
                    return self }
                      on: Error
                      do: { |e|
                            stream print: "<error printing>>".
                            return self } }.
        stream print: ">"!
end

interface Literal
    is Syntax

    required method value
    required method valueDisplayString

    method visitBy: visitor
        visitor visitLiteral: self!

    method isLiteral
        True!

    method weight
        0!

    method parts
        [self value]!
end

class SyntaxLiteral { value }
    is Literal

    method valueDisplayString
        value displayString!
end

class SyntaxFloatLiteral { string value }
    is Literal

    method valueDisplayString
        string!
end


class SyntaxHexLiteral { string value }
    is Literal

    method valueDisplayString
        string!
end

class SyntaxBinaryLiteral { string value }
    is Literal

    method valueDisplayString
        string!
end

class SyntaxStringInterpolation { parts }
    is Syntax

    method weight
        parts sum: #weight!

    method visitBy: visitor
        visitor visitStringInterpolation: self!
end

class SyntaxValueTypeDeclaration { value type }
    is Syntax

    method visitBy: visitor
        visitor visitValueTypeDeclaration: self!

    method weight
        value weight + 1!

    method parts
        [value, type]!
end

interface SyntaxCollection
    is Syntax

    method parts
        self entries!
end

class SyntaxArray { entries }
    is SyntaxCollection

    method visitBy: visitor
        visitor visitArray: self!

    method weight
        self entries sum: #weight!
end

class SyntaxRecord { entries }
    is SyntaxCollection

    method visitBy: visitor
        visitor visitRecord: self!

    method weight
        entries size + ((entries collect: #value)
                            sum: #weight)!
end

class SyntaxDictionary { entries }
    is SyntaxCollection

    method visitBy: visitor
        visitor visitDictionary: self!

    method weight
        entries size + ((entries collect: #value)
                            sum: #weight)!
end

class SyntaxSeq { first then }
    is Syntax

    method visitBy: visitor
        visitor visitSeq: self!

    method weight
        first weight + then weight!

    method parts
        [first, then]!
end

class SyntaxReturn { value }
    is Syntax

    method visitBy: visitor
        visitor visitReturn: self!

    method weight
        value weight + 1!

    method parts
        [value]!
end

class SyntaxSelector { name }
    is Syntax

    method visitBy: visitor
        visitor visitSelector: self!

    method isKeyword
        Selector isKeywordName: name!

    method parts
        [name]!
end

class SyntaxPanic { value }
    is Syntax

    method visitBy: visitor
        visitor visitPanic: self!

    method weight
        value weight + 1!

    method parts
        [value]!
end

class SyntaxPrefixComment { comment value source fence }
    is Syntax

    direct method comment: comment value: value source: source
        self
            comment: comment
            value: value
            source: source
            fence: False!

    method weight
        value weight!

    method visitBy: visitor
        visitor visitPrefixComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comment, value]!

    method displayString
        "#<SyntaxPrefixComment value: {value}>"!
end

class SyntaxSuffixComment { comments value source }
    is Syntax

    method withSuffixComment: comment::String commentSource: source
        comments add: comment.
        self!

    method visitBy: visitor
        visitor visitSuffixComment: self!

    method isSuffixComment
        True!

    method isSimple
        value isSimple!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comments, value]!

    method displayString
        "#<SyntaxSuffixComment value: {value}>"!
end

class SyntaxLineComment { comment source }
    is Syntax

    method visitBy: visitor
        visitor visitLineComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comment]!

    method string
        comment!

    method displayString
        "#<SyntaxLineComment {comment}>"!
end

class SyntaxBlockComment { fence lines source }
    is Syntax

    method visitBy: visitor
        visitor visitBlockComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [fence, lines]!

    method displayString
        "#<SyntaxBlockComment {lines}>"!
end

class SyntaxPrefix { receiver selector source }
    is Syntax

    method visitBy: visitor
        visitor visitPrefixMessage: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector]!
end

class SyntaxUnary { receiver selector source }
    is Syntax

    method visitBy: visitor
        visitor visitUnaryMessage: self!

    method isSimple
        receiver isSimple!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector]!

end

class SyntaxBinary { receiver selector argument source }
    is Syntax

    method visitBy: visitor
        visitor visitBinaryMessage: self!

    method weight
        receiver weight + argument weight + 1!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector, argument]!
end

-- FIXME: Currently multi-keyword syntax gets as source the first
-- keyword only. Should support non-contigous source regions for this.
class SyntaxKeyword { receiver selector arguments source }
    is Syntax

    method visitBy: visitor
        visitor visitKeywordMessage: self!

    method weight
        receiver weight + (arguments sum: #weight) + arguments size!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal,
        -- and might not do so after pretty-printing.
        [receiver, selector, arguments]!

    method displayOn: stream
        stream print: "#<{Self} {selector}>"!
end

class SyntaxModuleImport { module relative body }
    is Syntax

    method visitBy: visitor
        visitor visitModuleImport: self!

    method parts
        [module, relative, body]!
end

class SyntaxNameImport { name module relative body }
    is Syntax

    method visitBy: visitor
        visitor visitNameImport: self!

    method parts
        [name, module, body]!
end

class SyntaxWildcardImport { module relative body }
    is Syntax

    method visitBy: visitor
        visitor visitWildcardImport: self!

    method parts
        [module, body]!
end

class SyntaxExternalRef { module name source }
    is Syntax

    method visitBy: visitor
        visitor visitExternalRef: self!

    method weight
        0!

    method parts
        -- Source ignored, since that can change with pretty-printing.
        [module, name]!
end

class SyntaxIs { left right }
    is Syntax

    method visitBy: visitor
        visitor visitIs: self!

    method weight
        left weight + right weight + 1!

    method parts
        [left, right]!
end

class SyntaxLet { variable value body }
    is Syntax

    method visitBy: visitor
        variable isDynamic
            ifTrue: { visitor visitDynamicLet: self }
            ifFalse: { visitor visitLet: self }!

    method parts
        [variable, value, body]!
end

class SyntaxSelfInstance {}
    is Syntax

    method visitBy: visitor
        visitor visitSelfInstance: self!

    method weight
        0!

    method parts
        []!
end

class SyntaxSelfClass {}
    is Syntax

    method visitBy: visitor
        visitor visitSelfClass: self!

    method weight
        0!

    method parts
        []!
end

class SyntaxVariable { name::String source }
    is Syntax

    method visitBy: visitor
        visitor visitVariable: self!

    method isDynamic
        False!

    method weight
        0!

    method type
        Any!

    method parts
        -- Source ignored, since that can change with pretty-printing.
        [name]!
end

-- FIXME: missing source, could probably unify with SyntaxVariable
-- and SyntaxDynamicVariable.
class SyntaxTypedVariable { name type }
    is Syntax

    method visitBy: visitor
        visitor visitTypedVariable: self!

    method isDynamic
        False!

    method weight
        1!

    method parts
        [name]!
end

class SyntaxDynamicVariable { name::String source }
    is Syntax

    method visitBy: visitor
        visitor visitDynamicVariable: self!

    method isDynamic
        True!

    method weight
        0!

    method type
        SyntaxLiteral value: Any!

    method parts
        -- Source ignored, since that can change with pretty-printing.
        [name]!
end

class SyntaxAssign { variable value }
    is Syntax

    method visitBy: visitor
        visitor visitAssign: self!

    method weight
        value weight + 1!

    method parts
        [variable, value]!
end

class SyntaxParens { body }
    is Syntax

    method visitBy: visitor
        visitor visitParens: self!

    method weight
        body weight + 1!

    method parts
        [body]!
end

class SyntaxBlock { parameters returnType body }
    is Syntax

    method visitBy: visitor
        visitor visitBlock: self!

    method weight
        body weight + 1!

    method parts
        [parameters, returnType, body]!
end

class SyntaxDefine { variable body }
    is Syntax

    method visitBy: visitor
        visitor visitDefine: self!

    method parts
        [variable, body]!
end

class SyntaxClass { name superclass slots interfaces directMethods instanceMethods }
    is Syntax

    direct method name: name inherits: superclass
        self
            name: name
            superclass: superclass
            slots: False
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    direct method name: name slots: slots
        self
            name: name
            superclass: False
            slots: slots
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    method add: part
        part addTo: self!

    method visitBy: visitor
        visitor visitClass: self!

    method parts
        [name, superclass, slots, interfaces, directMethods, instanceMethods]!
end

class SyntaxInterface { name interfaces directMethods instanceMethods }
    is Syntax

    direct method name: name
        self
            name: name
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    method add: part
        part addTo: self!

    method visitBy: visitor
        visitor visitInterface: self!

    method parts
        [name, interfaces, directMethods, instanceMethods]!
end

class SyntaxExtend { name interfaces directMethods instanceMethods }
    is Syntax

    direct method name: name
        self
            name: name
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    method add: part
        part addTo: self!

    method visitBy: visitor
        visitor visitExtend: self!

    method parts
        [name, interfaces, directMethods, instanceMethods]!
end

interface DefinitionPart
   required method addTo: definition
end

class SyntaxInterfaceRef { name }
    is Syntax
    is DefinitionPart

    method addTo: definition
        definition interfaces add: self!

    method visitBy: visitor
        visitor visitInterfaceRef: self!

    method parts
        [name]!
end

interface SyntaxMethod
    is Syntax
    is DefinitionPart

    direct method signature: signature body: body
        self
            comments: List new
            signature: signature
            body: body!

    method withBlockComment: lines fence: fence commentSource: aSource
        self comment: (SyntaxBlockComment
                           fence: fence
                           lines: lines
                           source: aSource).
        self!

    method withPrefixComment: aString::String commentSource: aSource
        self comment: (SyntaxLineComment
                           comment: aString
                           source: aSource).
        self!

    method selector
        self signature selector!

    method visitBy: visitor
        visitor visitMethod: self!

    method isRequired
        self body is False!

    method isDefined
        self isRequired not!

    method isDirect
        False!

    method parts
        [self signature, self body]!
end

class SyntaxInstanceMethod { comments signature body }
    is SyntaxMethod

    method addTo: thing
        thing instanceMethods add: self!

    method comment: aSpec
        comments add: aSpec!

end

class SyntaxDirectMethod { comments signature body }
    is SyntaxMethod

    method addTo: thing
        thing directMethods add: self!

    method comment: aSpec
        comments add: aSpec!

    method isDirect
        True!
end

class MethodSignature { selector parameters returnType }
    is Object

    method isEquivalent: other
        selector == other selector
            and: parameters == other parameters
            and: returnType == other returnType!

    method toString
        StringOutput with: { |out|
                             out print: "#<MethodSignature".
                             parameters isEmpty
                                 ifTrue: { out print: " ".
                                           out print: selector name }
                                 ifFalse: { selector parts
                                                with: parameters
                                                do: { |s t|
                                                      out print: " ".
                                                      out print: s.
                                                      out print: " ".
                                                      out print: t } }.
                             returnType is Any
                                 ifFalse: { out print: " -> ".
                                            out print: returnType }.
                             out print: ">" }!
end
