import .syntaxPrinter.SyntaxPrinter

interface Syntax
    is Object

    required method kind

    required method visitBy: visitor

    required method parts

    method withBlockComment: lines fence: fence commentSource: source
        SyntaxPrefixComment
            comment: lines
            value: self
            source: source
            fence: fence!

    method withPrefixComment: comment::String commentSource: source
        SyntaxPrefixComment
            comment: comment
            value: self
            source: source!

    method withSuffixComment: comment::String commentSource: source
        SyntaxSuffixComment
            comment: comment
            value: self
            source: source!

    method checkEqualInternal: other
        self parts with: other parts
                   do: { |a b|
                         a checkEqual: b }!

    method isEquivalent: other
        self parts with: other parts
                   do: { |a b| a == b ifFalse: { return False } }.
        True!

    method toString
        StringOutput with: { |out| self displayOn: out }!

    method displayOn: stream
        stream print: "#<{self kind} ".
        { SyntaxPrinter print: self to: stream }
            on: Error
            do: { out print: "<error printing>>".
                  return self }.
        stream print: ">"!
end

interface Literal
    required method value
    required method valueDisplayString
end

class SyntaxLiteral { value }
    is Syntax
    is Literal

    method kind
        "SyntaxLiteral"!

    method visitBy: visitor
        visitor visitLiteral: self!

    method parts
        [value]!

    method valueDisplayString
        value displayString!
end

class SyntaxFloatLiteral { string value }
    is Syntax
    is Literal

    method kind
        "SyntaxFloatLiteral"!

    method visitBy: visitor
        visitor visitLiteral: self!

    method parts
        [value]!

    method valueDisplayString
        string!
end


class SyntaxHexLiteral { value }
    is Syntax
    is Literal

    method kind
        "SyntaxHexLiteral"!

    method visitBy: visitor
        visitor visitLiteral: self!

    method parts
        [value]!

    method valueDisplayString
        Integer printBase: 16
                do: { value toString }!
end

class SyntaxBinaryLiteral { value }
    is Syntax

    method kind
        "SyntaxBinaryLiteral"!

    method visitBy: visitor
        visitor visitLiteral: self!

    method parts
        [value]!

    method valueDisplayString
        Integer printBase: 2
                do: { value toString }!
end

class SyntaxValueTypeDeclaration { value type }
    is Syntax

    method kind
        "SyntaxValueTypeDeclaration"!

    method visitBy: visitor
        visitor visitValueTypeDeclaration: self!

    method parts
        [value, type]!
end

interface SyntaxCollection
    is Syntax

    method parts
        self entries!
end

class SyntaxArray { entries }
    is SyntaxCollection

    method kind
        "SyntaxArray"!

    method visitBy: visitor
        visitor visitArray: self!
end

class SyntaxRecord { entries }
    is SyntaxCollection

    method kind
        "SyntaxRecord"!

    method visitBy: visitor
        visitor visitRecord: self!
end

class SyntaxDictionary { entries }
    is SyntaxCollection

    method kind
        "SyntaxDictionary"!

    method visitBy: visitor
        visitor visitDictionary: self!
end

class SyntaxSeq { first then }
    is Syntax

    method kind
        "SyntaxSeq"!

    method visitBy: visitor
        visitor visitSeq: self!

    method parts
        [first, then]!
end

class SyntaxReturn { value }
    is Syntax

    method kind
        "SyntaxReturn"!

    method visitBy: visitor
        visitor visitReturn: self!

    method parts
        [value]!
end

class SyntaxPrefixComment { comment value source fence }
    is Syntax

    method kind
        "SyntaxPrefixComment"!

    direct method comment: comment value: value source: source
        self
            comment: comment
            value: value
            source: source
            fence: False!

    method visitBy: visitor
        visitor visitPrefixComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comment, value]!

    method displayString
        "#<SyntaxPrefixComment value: {value}>"!
end

class SyntaxSuffixComment { comment value source }
    is Syntax

    method kind
        "SyntaxSuffixComment"!

    method visitBy: visitor
        visitor visitSuffixComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comment, value]!

    method displayString
        "#<SyntaxSuffixComment value: {value}>"!
end

class SyntaxLineComment { comment source }
    is Syntax

    method kind
        "SyntaxLineComment"!

    method visitBy: visitor
        visitor visitLineComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [comment]!

    method string
        comment!

    method displayString
        "#<SyntaxLineComment {comment}>"!
end

class SyntaxBlockComment { fence lines source }
    is Syntax

    method kind
        "SyntaxBlockComment"!

    method visitBy: visitor
        visitor visitBlockComment: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [lines]!

    method displayString
        "#<SyntaxBlockComment {lines}>"!
end

class SyntaxPrefix { receiver selector source }
    is Syntax

    method kind
        "SyntaxPrefix"!

    method visitBy: visitor
        visitor visitPrefixMessage: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector]!
end

class SyntaxUnary { receiver selector source }
    is Syntax

    method kind
        "SyntaxUnary"!

    method visitBy: visitor
        visitor visitUnaryMessage: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector]!

    method toString
        "#<SyntaxUnary {selector} receiver: {receiver}>"!
end

class SyntaxBinary { receiver selector argument source }
    is Syntax

    method kind
        "SyntaxBinary"!

    method visitBy: visitor
        visitor visitBinaryMessage: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal.
        [receiver, selector, argument]!
end

-- FIXME: Currently multi-keyword syntax gets as source the first
-- keyword only. Should support non-contigous source regions for this.
class SyntaxKeyword { receiver selector arguments source }
    is Syntax

    method kind
        "SyntaxKeyword"!

    method visitBy: visitor
        visitor visitKeywordMessage: self!

    method parts
        -- Source left out intentionally, since it doesn't need to compere equal,
        -- and might not do so after pretty-printing.
        [receiver, selector, arguments]!
end

class SyntaxIs { left right }
    is Syntax

    method kind
        "SyntaxIs"!

    method visitBy: visitor
        visitor visitIs: self!

    method parts
        [left, right]!
end

class SyntaxUntypedVariable { name }
    is Syntax

    method kind
        "SyntaxUntypedVariable"!

    method visitBy: visitor
        visitor visitUntypedVariable: self!

    method type
        SyntaxLiteral value: Any!

    method parts
        [name]!
end

class SyntaxTypedVariable { name type }
    is Syntax

    method kind
        "SyntaxTypedVariable"!

    method visitBy: visitor
        visitor visitTypedVariable: self!

    method parts
        [name]!
end

class SyntaxLet { variable value body }
    is Syntax

    method kind
        "SyntaxLet"!

    method visitBy: visitor
        visitor visitLet: self!

    method parts
        [variable, value, body]!
end

class SyntaxSelf {}
    is Syntax

    method kind
        "SyntaxSelf"!

    method visitBy: visitor
        visitor visitSelf: self!

    method parts
        []!
end

class SyntaxVariable { name::String }
    is Syntax

    method kind
        "SyntaxVariable"!

    method visitBy: visitor
        visitor visitVariable: self!

    method parts
        [name]!
end

class SyntaxAssign { variable value }
    is Syntax

    method kind
        "SyntaxAssign"!

    method visitBy: visitor
        visitor visitAssign: self!

    method parts
        [variable, value]!
end

class SyntaxParens { body }
    is Syntax

    method kind
        "SyntaxParens"!

    method visitBy: visitor
        visitor visitParens: self!

    method parts
        [body]!
end

class SyntaxBlock { parameters returnType body }
    is Syntax

    method kind
        "SyntaxBlock"!

    method visitBy: visitor
        visitor visitBlock: self!

    method parts
        [parameters, returnType, body]!
end

class SyntaxDefine { name body }
    is Syntax

    method kind
        "SyntaxDefine"!

    method visitBy: visitor
        visitor visitDefine: self!

    method parts
        [name, body]!
end

class SyntaxClass { name slots interfaces directMethods instanceMethods }
    is Syntax

    method kind
        "SyntaxClass"!

    direct method name: name slots: slots
        self
            name: name
            slots: slots
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    method add: part
        part addTo: self!

    method visitBy: visitor
        visitor visitClass: self!

    method parts
        [name, slots, interfaces, directMethods, instanceMethods]!
end

class SyntaxInterface { name interfaces directMethods instanceMethods }
    is Syntax

    method kind
        "SyntaxInterface"!

    direct method name: name
        self
            name: name
            interfaces: List new
            directMethods: List new
            instanceMethods: List new!

    method add: part
        part addTo: self!

    method visitBy: visitor
        visitor visitInterface: self!

    method parts
        [name, interfaces, directMethods, instanceMethods]!
end

interface DefinitionPart
   required method addTo: definition
end

class SyntaxInterfaceRef { name }
    is Syntax
    is DefinitionPart

    method kind
        "SyntaxInterfaceRef"!

    method addTo: definition
        definition interfaces add: self!

    method visitBy: visitor
        visitor visitInterfaceRef: self!

    method parts
        [name]!
end

interface SyntaxMethod
    is Syntax
    is DefinitionPart

    direct method signature: signature body: body
        self
            comment: False
            signature: signature
            body: body!

    method withBlockComment: lines fence: fence commentSource: aSource
        self comment: (SyntaxBlockComment
                           fence: fence
                           comment: lines
                           source: aSource).
        self!

    method withPrefixComment: aString::String commentSource: aSource
        self comment: (SyntaxLineComment
                           comment: aString
                           source: aSource).
        self!

    method selector
        self signature selector!

    method visitBy: visitor
        visitor visitMethod: self!

    method parts
        [self signature, self body]!
end

class SyntaxInstanceMethod { comment signature body }
    is SyntaxMethod

    method kind
        "SyntaxInstanceMethod"!

    method addTo: thing
        thing instanceMethods add: self!

    method comment: aSpec
        comment = aSpec!
end

class SyntaxDirectMethod { comment signature body }
    is SyntaxMethod

    method kind
        "SyntaxDirectMethod"!

    method comment: aSpec
        comment = aSpec!

    method addTo: thing
        thing directMethods add: self!
end

class MethodSignature { selector parameters returnType }
    is Object

    method kind
        "MethodSignature"!

    method isEquivalent: other
        selector == other selector
            and: parameters == other parameters
            and: returnType == other returnType!
end
