import .test_self_hosting.TestSelfHosting

class TestPreludeAny { system ok onFailure }
    is TestSelfHosting

    method testPreludeAny
        let lang = system files / "foo/lang".
        self without: ["Any"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.any
                    class Test \{}
                       direct method test
                          any.Any includes: 42!
                    end"
             eval: "Test test"
             expect: True!
end

class TestPreludeObject { system ok onFailure }
    is TestSelfHosting

    method testPreludeObject
        let lang = system files / "foo/lang".
        self without: ["Object"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.object
                    class X \{ y }
                        is object.Object
                        method isEquivalent: other
                            y == other y!
                    end
                    class Test \{}
                       direct method test
                           [(X y: 42) == (X y: 42), (X y: 13) == (X y: 666)]!
                    end"
             eval: "Test test"
             expect: [True, False]!
end

class TestPreludeCharacter { system ok onFailure }
    is TestSelfHosting

    method testPreludeCharacter
        let lang = system files / "foo/lang".
        self without: ["Character", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.character
                    class X \{ c::character.Character }
                    end
                    class Test \{}
                       direct method testError
                           \{ X c: 42 }
                              on: TypeError
                              do: \{ |e| return #gotcha }!
                       direct method testOk
                           -- Need to take some care to avoid constructing
                           -- a host character!
                           let aCode = \"a\" character code.
                           (X c: (character.Character code: aCode)) c code == 0x61!
                    end"
             eval: "[Test testError, Test testOk]"
             expect: [#gotcha, True]!
end

class TestPreludeIterable { system ok onFailure }
    is TestSelfHosting

    method testPreludeIterable
        let lang = system files / "foo/lang".
        self without: ["Iterable", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.iterable
                    class MyIterable \{}
                        is iterable.Iterable
                        method iterator
                            [1, -2, 3] iterator!
                    end"
             eval: "MyIterable new collect: #abs as: List"
             expect: [1,2,3] asList!
end

class TestPreludeInterval { system ok onFailure }
    is TestSelfHosting

    method testPreludeInterval
        let lang = system files / "foo/lang".
        self without: ["Interval", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.interval
                    define ThousandBy10
                        interval.Interval from: 1 to: 1000 by: 10!"
             eval: "ThousandBy10 size"
             expect: 100!
end

class TestPreludeCollection { system ok onFailure }
    is TestSelfHosting

    method testPreludeCollection
        let lang = system files / "foo/lang".
        self without: ["Collection", "Iterable", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.collection
                    class MyCollection \{ data }
                        is collection.Collection
                        direct method new
                            self data: List new!
                        method iterator
                            data iterator!
                        method add: elt
                            data add: elt.
                            self!
                        method size
                            data size!
                        method clear
                            data clear.
                            self!
                    end"
             eval: "let coll = MyCollection new.
                    coll addAll: [1,2,3].
                    let res = coll data copy.
                    coll clear.
                    [res, coll isEmpty]"
             expect: [[1,2,3] asList, True]!
end

class TestPreludeBlock { system ok onFailure }
    is TestSelfHosting

    method testPreludeBlock
        let lang = system files / "foo/lang".
        self without: ["Block", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.block
                    class MyBlock \{ data }
                        is block.Block
                        method apply: arguments
                            data with: arguments collect: \{ |a b| a + b } as: List!
                        method finally: cleanup
                            \{ self value }
                                finally: cleanup!
                        method arity
                            data size!
                        method loop
                            panic \"nope\"!
                    end"
             eval: "let b = MyBlock data: [1,10,100].
                    b value: 1 value: 2 value: 3"
             expect: [2,12,103] asList!
end

class TestPreludeException { system ok onFailure }
    is TestSelfHosting

    method testPreludeException
        let lang = system files / "foo/lang".
        self without: ["Error", "TypeError", "DoesNotUnderstand", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.exception
                    class MyError \{}
                        is exception.Error
                        method _description
                           \"Oops\"!
                    end"
             eval: "(\{ MyError new raise } catch: MyError) value description"
             expect: "Oops"!
end

class TestPreludeOrdered { system ok onFailure }
    is TestSelfHosting

    method testPreludeOrdered
        let lang = system files / "foo/lang".
        self without: ["Ordered", "Iterable", "Iterator", "Any", "Object", "StringOutput"]
             modules: { "lang" -> lang } asFileModules
             load: "import lang.ordered

                    class Triple \{ a b c }
                        is ordered.Ordered
                        method size
                           3!
                        method at: index
                           index is 1
                              ifTrue: \{ return a }.
                           index is 2
                              ifTrue: \{ return b }.
                           index is 3
                              ifTrue: \{ return c }.
                           panic \"oops\"!
                    end"
             eval: "(Triple a: 1 b: 2 c: 3) sum"
             expect: 6!
end

class Main {}
    direct method run: cmd in: system
        let tests = {
            "--any" -> TestPreludeAny,
            "--object" -> TestPreludeObject,
            "--character" -> TestPreludeCharacter,
            "--iterable" -> TestPreludeIterable,
            "--interval" -> TestPreludeInterval,
            "--collection" -> TestPreludeCollection,
            "--block" -> TestPreludeBlock,
            "--exception" -> TestPreludeException,
            "--ordered" -> TestPreludeOrdered,
        }.
        let all = tests keys sort.
        cmd == []
            ifTrue: { cmd = all }.
        cmd == ["--fork-all"]
            ifTrue: { all
                          do: { |test|
                                let next = "cargo run -- foo/impl/test_prelude.foo --use=foo/lib -- {test}".
                                system output println: "TEST: {next}".
                                let command = system command: next.
                                system output println: "--test stdout--".
                                system output println: command stdout.
                                system output println: "--test stderr--".
                                system output println: command stderr.
                                command ok
                                    ifFalse: { system exit: 1 } }.
                      system exit }.
        cmd do: { |name|
                  let result = (tests at: name) runIn: system.
                  result ok
                      ifFalse: { system output println: "Test {name} failed!".
                                 system exit: 1 } }!
end
