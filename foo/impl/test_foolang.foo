import .test_self_hosting.TestSelfHosting
import .utils.Debug

class TestFoolang { system ok onFailure }
    is TestSelfHosting

    method testInterface1
        self load: "interface TestInterface1
                        direct method answer
                           42!
                    end"
            eval: "TestInterface1 answer"
            expect: 42!

    method testInterface2
        self load: "interface TestInterface2
                    end"
            eval: "TestInterface2 includes: 42"
            expect: False!

    method testInterface3
        self load: "interface TestInterface3
                        method foo
                            self!
                    end
                    class TestInterface3Impl \{}
                        is TestInterface3
                    end"
            eval: "TestInterface3 includes: (TestInterface3Impl new foo)"
            expect: True!

    method test_Format_dictionary_with_small_values
        self parse: "\{ 1 -> 100, 2 -> 200 \}"
             expect:
                 "\{ 1 -> 100,
  2 -> 200 \}"!

    method test_Format_dictionary_with_big_value
        self parse: "\{ 1 -> \{ this: \"is\",
                                a: \"big\",
                                thing: \"verily\" },
                        2 -> 200 \}"
        expect:
        "\{ 1
   -> \{ this: \"is\",
        a: \"big\",
        thing: \"verily\" },
  2 -> 200 \}"!

    method test_Format_line_comments_before_define
        self parse: "-- foo
                     -- bar
                     define Foo 1!"
            expect:
                "-- foo
-- bar
define Foo 1!
"!

    method test_Format_import_and_define
        self parseDefinitions: "import xyz
                                define XYZ 42!"
            expect: "import xyz

define XYZ 42!
"!

    method test_Format_import_and_define_with_prefix_comment
        self parseDefinitions: "import xyz
                                -- Very Definitive
                                define XYZ 42!"
            expect: "import xyz

-- Very Definitive
define XYZ 42!
"!

    method test_Format_external_references_in_list
        self parse: "[ext.Name1, ext.Name2]"
            expect: "[ext.Name1, ext.Name2]"!

    method test_Parse_bad_external_reference
        self parse: "[ext.1Name1, ext.Name2]"
             expectError: Error
             where: { |e|
                      e description == "Expected name, got: 1
001 [ext.1Name1, ext.Name2]
         ^ Expected name
" }!

    method test_Format_class_with_just_interfaces
        self parse: "class TestInterface5Impl \{}
                        is Object
                        is TestInterface5
                    end"
            expect:
                "class TestInterface5Impl \{}
    is Object
    is TestInterface5
end
"!

    method test_Format_method_with_multipart_keyword_selector
        self parse: "class TestThis \{\}
                         method a: simple test: case
                             52!
                     end"
            expect:
                "class TestThis \{\}
    method a: simple test: case
        52!
end
"!

    method test_Format_method_with_binary_selector
        self parse: "class TestThisToo \{\}
                         method + x
                             152!
                     end"
            expect:
                "class TestThisToo \{\}
    method + x
        152!
end
"!

    method test_Format_method_with_unary_selector
        self parse: "class TestThisTooYes \{\}
                         method beep
                             15!
                     end"
            expect:
                "class TestThisTooYes \{\}
    method beep
        15!
end
"!

    method test_Format_method_with_prefix_selector
        self parse: "class TestThisTooYesYes \{\}
                         method prefix-
                             1!
                     end"
            expect:
                "class TestThisTooYesYes \{\}
    method prefix-
        1!
end
"!

    method test_Format_small_array
        self parse: "[1,2,3,]"
            expect: "[1, 2, 3]"!

    method test_Line_comments_before_class
        self parse: "-- foo
                     -- bar
                     class Foo \{\}
                     end"
            expect:
                "-- foo
-- bar
class Foo \{\}
end
"!

    method test_Line_comments_before_interface
        self parse: "-- foo
                     -- bar
                     interface Foo
                     end"
            expect:
                "-- foo
-- bar
interface Foo
end
"!

    method test_Line_comments_before_extend
        self parse: "-- foo
                     -- bar
                     extend Foo
                     end"
            expect:
                "-- foo
-- bar
extend Foo
end
"!

    method test_Multiple_line_comments_inside_class
        self parse: "class Foo \{\}
                        -- foo
                        -- bar
                        method quux
                           42!
                     end"
            expect:
                "class Foo \{\}

    -- foo
    -- bar

    method quux
        42!
end
"!

    method test_Format_interface
        self parse: "interface TestInterface4
                        required direct method fooR
                        required direct method fooRR
                        direct method foo
                            42!
                        direct method foo2
                            42!
                        required method barR
                        required method barRR
                        method bar
                            42!
                        method bar2
                            42!
                    end"
             expect: "interface TestInterface4
    required direct method fooR
    required direct method fooRR

    required method barR
    required method barRR

    direct method foo
        42!

    direct method foo2
        42!

    method bar
        42!

    method bar2
        42!
end
"!

    method test_Interface_required_method_missing_detected
        self load: "interface TestInterface5
                        required method fooxx
                        method bar
                            self fooxx!
                    end
                    class TestInterface5Impl \{}
                        is Object
                        is TestInterface5
                    end"
            eval: "TestInterface5Impl new bar"
            expectError: RequiredMethodMissing
            where: { |e| e selector == #fooxx }!

    method testInterface6
        -- Self
        self load: "interface TestInterface6
                        method foo
                           Self bar!
                    end
                    class TestInterface6Impl \{}
                        is TestInterface6
                        direct method bar
                           42!
                    end"
            eval: "TestInterface6Impl new foo"
            expect: 42!

    method test42
        self eval: "42" expect: 42!

    method testPlus
        self eval: "100 + 1000 + 10 + 1" expect: 1111!

    method testPrecedence1
        self eval: "12 + 10 * 10 - 1" expect: 111!

    method testPrecedence2
        self eval: "let x = -40. let y = -2. x abs + y abs" expect: 42!

    method testPrefixMethod
        self eval: "- 42" expect: -42!

    method testUnaryMethod
        self eval: "- 42 abs" expect: 42!

    method testKeywordMethod
        self eval: "1 to: 10 by: 2" expect: (1 to: 10 by: 2)!

    method testIs
        self eval: "1 is 1" expect: True.
        self eval: "1 is 2" expect: False!

    method testIsVsKeywordPrecedence
        self eval: "1 is 1 ifTrue: \{ 123 } ifFalse: \{ 0 }" expect: 123.
        self eval: "1 is 2 ifTrue: \{ 0 } ifFalse: \{ 123 }" expect: 123!

    method testLet
        self eval: "let x = 1. x + x"
             expect: 2!

    method testParens
        self eval: "(1 + 1) * 2"
             expect: 4!

    method testAssign1
        self eval: "let x = 20. x = x + 1. x * 2"
             expect: 42!

    method testAssign2
        self eval: "let y = 0.
                    let x = 20.
                    (let x = 2000. x = x + 100. y = x * 2).
                    x = x + 1. y + x * 2"
            expect: 4242!

    method testSimpleBlock
        self eval: "\{ 32 + 10 } value"
             expect: 42!

    method testArgBlock
        self eval: "\{ |x| x + 1 } value: 41"
             expect: 42!

    method testBlockClosure
        self eval: "let block = (let x = 21. \{ x = x * 2 }).
                    let x = 0.
                    block value. block value"
            expect: 84!

    method testDefine
        self load: "define FourtyTwoForTestDefine
                       42!"
             eval: "FourtyTwoForTestDefine"
             expect: 42!

    method testSimpleClass
        self load: "class MyClass \{ x } is Object end"
             eval: "let c = MyClass x: 42. c x"
             expect: 42.
         self load: "class MyClass \{ x y } is Object end"
             eval: "let c = MyClass x: 40 y: 2. c x + c y"
             expect: 42!

    method test_Class_classOf
        self load: "class MyClass \{} end"
             eval: "MyClass classOf name"
             expect: "MyClass classOf"!

    method testClassWithMethod
        self load: "class MyClass \{ slot }
                        method foo: x
                           slot + x!
                    end"
             eval: "(MyClass slot: 40) foo: 2"
             expect: 42!

    method testSlotAssign
        self load: "class MyClass \{ slot }
                        method bar
                           slot = slot * 2!
                        method foo
                           self bar.
                           slot!
                    end"
             eval: "(MyClass slot: 21) foo"
             expect: 42!

    method testClassWithPrefixMethod
        self load: "class MyClass \{ slot }
                        method prefix%
                            slot * slot!
                    end"
             eval: "%(MyClass slot: -2)"
             expect: 4!

    method testTwoClasses
        self load: "class Class1 \{ slot }
                        is Object
                        method foo: x
                           x bar + slot * 2!
                    end
                    class Class2 \{ slot }
                        is Object
                        method bar
                           slot!
                        method foo: y
                           y foo: self!
                    end"
             eval: "(Class2 slot: 2) foo: (Class1 slot: 20)"
             expect: 42!

    method testBlockInMethod
        self load: "class ClassAA \{ slot }
                        method capture: x
                           \{ x }!
                        method captureSlot
                           \{ slot }!
                        method capture
                           let z = 2.
                           \{ (self captureSlot) value + (self capture: z) value }!
                    end
                    class ClassBB \{ slot }
                        method ctor: x
                           \{ (ClassAA slot: x + slot) }!
                        method run: x
                           (self ctor: x * 2) value capture value!
                    end"
             eval: "(ClassBB slot: 20) run: 10"
             expect: 42!

    method testDirectMethod
        self load: "class ClassDirectMethod \{}
                        direct method gimme1
                            self new gimme2!
                        method gimme2
                            42!
                    end"
             eval: "ClassDirectMethod gimme1"
             expect: 42!

    method testReturn
        self load: "class ReturnTest \{}
                        direct method test: ok
                            ok
                               ifTrue: \{ return 42 }.
                            666!
                    end"
            eval: "ReturnTest test: True"
            expect: 42!

    method test_Format_prefix_comment_to_let_value
        self
            parse: "           let x = -- boop\n 21.     x     *  2"
            expect: "let x = -- boop\n        21.\nx * 2"!

    method test_Format_suffix_comment_to_let_value
        self
            parse: "let x = 21 -- boop\n.\nx * 2"
            expect: "let x = 21. -- boop\nx * 2".
        self
            parse: "let x = 21. -- boop\n\nx * 2"
            expect: "let x = 21. -- boop\nx * 2"!

    method test_Format_prefix_comment_in_sequence
        self
            parse: "doo daa.
                    -- boop
                    self bar.
                    x * 2"
            expect: "doo daa.
-- boop
self bar.
x * 2"!

    method test_Format_suffix_comment_in_sequence
        self
            parse: "self bar. -- boop\n x * 2"
            expect: "self bar. -- boop\nx * 2"!

    method test_Format_suffix_comment_to_keyword_message_in_sequence
        self
            parse: "self bleep: bar. -- boop\n x * 2"
            expect: "self bleep: bar. -- boop\nx * 2"!

    method test_Format_prefix_comment_to_class
        self
            parse: "-- boop\n    class   X   \{}   end"
            expect: "-- boop
class X \{\}
end
"!

    method test_Format_suffix_comment_to_class
        self
            parse: "class   X   \{}   end -- boop"
            expect: "class X \{}
end
 -- boop
"!

    method test_Format_prefix_comment_to_method_body
        self
            parse: "class   X   \{}method bar -- boop
42! end"
            expect: "class X \{}
    method bar
        -- boop
        42!
end
"!

    method test_Formatted_single_expression_has_no_trailing_newline
        self
            parse: "123"
            expect: "123"!

    method test_Format_suffix_comment_to_method_body
        self
            parse: "class X \{}
                        method bar
                            42! -- boop
                    end"
            expect: "class X \{}
    method bar
        42! -- boop
end
"!

    method test_Format_keyword_message_with_tiny_receiver_and_single_keyword
        self
            parse: "receiver println: argument"
            expect: "receiver println: argument"!

    method test_Format_keyword_message_with_tiny_receiver_and_multiple_keywords
        self
            parse: "receiver println: argument println: argument2"
            expect: "receiver
    println: argument
    println: argument2"!

    method test_Format_block_with_suffix_comment_after_literal
        self parse: "class X \{\}
                         method beep
                             \{ panic \"dundun\" -- oops
                               }!
                     end"
            expect: "class X \{\}
    method beep
        \{ panic \"dundun\" -- oops
          \}!
end
"!

    method test_Format_suffix_comment_in_keyword_message
        self parse: "receiver arg: arg1 -- the first arg
                              arg: arg2"
             expect: "receiver
    arg: arg1 -- the first arg
    arg: arg2"!

    method test_Format_let_body_in_method
        self
            parse: "class Droop \{\}
                        method bar
                            let x = 123.
                            x + x!
                    end"
            expect: "class Droop \{\}
    method bar
        let x = 123.
        x + x!
end
"!

    method test_Format_two_defines
        self parseDefinitions:  "define A 100 foobar!
                                 define B 200 droopa!"
             expect:
                 "define A
    100 foobar!

define B
    200 droopa!
"!

    method test_Format_two_classes
        self parseDefinitions:  "class A \{\} end
                                 class B \{\} end"
            expect:
                "class A \{\}
end

class B \{\}
end
"!

    method test_Format_suffix_comment_to_define
        self
            parse: "define ThisOne 312! -- oh yeah"
            expect: "define ThisOne 312!
 -- oh yeah\n"!

    method test_Format_prefix_comment_to_method
        self
            parse: "class X \{} -- boop\n method bar\n 42!\n end"
            expect: "class X \{}

    -- boop

    method bar
        42!
end
"!

    method test_Format_comments_between_keyword_and_receiver
        self parse: "asdasasd
                                 -- deep
                                 -- stuff
                                 ifSo: ayay
                                 ifElse: block"
            expect: "asdasasd -- deep
         -- stuff
    ifSo: ayay
    ifElse: block"!

    method test_Format_comments_between_keywors_and_short_receiver
        self parse: "class Q \{\}
         method ding
           self
           -- FIXME: returning True in the first leg seems strange, but breaks a couple
           -- of tests. Should either explain the rational or return False.
           ifTrue: { True }
           ifFalse: block!
       end"
            expect: "class Q \{\}
    method ding
        self -- FIXME: returning True in the first leg seems strange, but breaks a couple
             -- of tests. Should either explain the rational or return False.
            ifTrue: { True }
            ifFalse: block!
end
"!

    method test_Format_comments_between_unary_and_receiver
        self parse: "asdas
                                 -- deep
                                 -- stuff
                            doopdoop"
            expect: "asdas -- deep
      -- stuff
    doopdoop"!

    method test_Format_single_comment_between_unary_and_receiver
        self parse: "asdas -- deep
                            doopdoop"
            expect: "asdas -- deep
    doopdoop"!

    method test_Format_inside_class_comment_after_interface
        self parse: "class Foo \{\}
                        is A
                        is B

                        -- This is important
                        -- This too

                        method asdads
                            129!
                     end"
            expect: "class Foo \{\}
    is A
    is B

    -- This is important
    -- This too

    method asdads
        129!
end
"!

    method test_Block_comment_in_eval
        self eval: "---
                    This is a test.
                    ---
                    42"
            expect: 42!

    method test_Format_block_comment
        self parse: "---\nThis is a test.\n---\n      42"
             expect: "---\nThis is a test.\n---\n42"!

    method test_Line_comment_in_eval
        self eval: "--> 42\n 42"
             expect: 42!

    method test_Block_comment_without_space_in_eval
        self eval: "---XXX 42--- 42"
             expect: 42!

    method test_Long_comment_fences_in_eval
        self eval: "----
                    --- This is a test.
                    ----
                    42"
            expect: 42!

    method testArray1
        self eval: "[1, 1+1, 3]"
             expect: [1,2,3]!

    method testArray2
        self eval: "[1, 1+1, 3, ]"
             expect: [1,2,3]!

    method testArray3
        self eval: "[1, 1+1, 3,]"
             expect: [1,2,3]!

    method testArray4
        self eval: "[1]"
             expect: [1]!

    method testArray5
        self eval: "[]"
             expect: []!

    method test_Record_without_trailing_comma
        self eval: "\{foo: 42, bar: 123}"
             expect: {foo: 42, bar: 123}!

    method test_Record_with_trailing_comma
        self eval: "\{foo: 42, bar: 123,}"
             expect: {foo: 42, bar: 123}!

    method test_Record_evaluation_order
        self eval: "let x = List new.
                    \{ a: (x add: 1),
                       b: (x add: 2) }.
                    \{ d: (x add: 3),
                       c: (x add: 4) \}.
                    x asArray"
             expect: [1, 2, 3, 4]!

    method testDictionary1
        self eval: "let x = 42. let y = 13. \{ x -> y, y + 1 -> x * 2 }"
             expect: { 42 -> 13, 14 -> 84 }!

    method testDictionary2
        self eval: "let x = 42. let y = 13. \{ x -> y, y + 1 -> x * 2, }"
             expect: { 42 -> 13, 14 -> 84 }!

    method test_DoesNotUnderstand_has_backtrace_available
        self load: "class BacktraceTest \{}
                        is Object
                        method bang: block
                           block value!
                        method foo
                            self bang: \{ self nope }!
                        method bar
                           self foo!
                        direct method test
                           self new bar!
                    end"
            eval: "BacktraceTest test"
            expectError: DoesNotUnderstand
            where: { |e|
                     e selector == #nope
                         ifTrue: { let selectors = e backtrace collect: { |f| f selector :: Selector }.
                                   selectors isEquivalent: [#value, #bang:, #foo, #bar, #test] }}!

    method test_DoesNotUnderstand_has_backtrace_in_description
        self load: "class BacktraceTest \{}
                        is Object
                        method bang: block
                           block value!
                        method foo
                            self bang: \{ self nope }!
                        method bar
                           self foo!
                        direct method test
                           self new bar!
                    end"
            eval: "BacktraceTest test"
            expectError: DoesNotUnderstand
            where: { |e|
                     e selector == #nope
                         ifTrue: { let description = e description.
                                   let expected = "#<a BacktraceTest> does not understand: #nope
004                            block value!
005                         method foo
006                             self bang: \{ self nope }!
                                                  ^^^^ #<a BacktraceTest> does not understand: #nope
007                         method bar
008                            self foo!

Interpreter backtrace:
  5: BacktraceTest#value
  4: BacktraceTest#bang:
  3: BacktraceTest#foo
  2: BacktraceTest#bar
  1: BacktraceTest classOf#test
".
                                   description == expected } }!

    method test_DoesNotUnderstand_has_source_location
         -- `is Object` required for the exception to happen as we want
        self load: "class SourceTest \{}
                         is Object
                         method foo
                            let x = 1 + 2.
                            self bar: x
                                 quux: x.
                            self quux.
                            self zot.
                            2 + 3!
                    end"
            eval: "SourceTest new foo"
            expectError: DoesNotUnderstand
            where: { |e|
                     (e selector == #bar:quux:)
                         ifTrue: { -- FIXME: this is only for "bar:", should include the
                                   -- whole selector!
                                   e source location == (168 to: 171) } }!

    method testOutOfOrderDefine
        self load: "define Two
                       One + One!
                    define One
                       1!"
            eval: "Two"
            expect: 2!

    method testOutOfOrderClasses
        self load: "class Two \{}
                       direct method fini
                          42!
                       method test
                          One new test!
                    end
                    class One \{}
                      method test
                          Two fini!
                    end"
            eval: "Two new test"
            expect: 42!

    method testString1
        self eval: " \"foo\" "
             expect: "foo"!

    method testString2
        self eval: " \"foo\\\"bar\" "
             expect: "foo\"bar"!

    method testString3
        self eval: " \"foo\\nbar\" "
            expect: "foo\nbar"!

    method testHex1
        self eval: "0xfb"
             expect: 251!

    method testHex2
        self eval: "0xfb4"
             expect: 4020!

    method testHex3
        self eval: "0x0"
             expect: 0!

    method testBinary1
        self eval: "0b101"
             expect: 5!

    method testBinary2
        self eval: "0b001110"
             expect: 14!

    method testBinary3
        self eval: "0x0"
             expect: 0!

    method testSelector1
        self eval: "#foo"
             expect: #foo!

    method testSelector2
        self eval: "#+"
             expect: #+ !

    method testSelector3
        self eval: "#foo:bar:"
             expect: #foo:bar: !

    method testTypeDecl01
        self eval: "42::Integer"
             expect: 42!

    method testTypeDecl02
        self eval: "42::String"
             expectError: TypeError
             where: { |e|
                      e value is 42 and: e expected is String }!

    method testTypeDecl03
        self eval: "let x::Integer = 12. 12 + 30"
             expect: 42!

    method testTypeDecl04
        self eval: "let x::String = 12. 12 + 30"
             expectError: TypeError
             where: { |e|
                      e value is 12 and: e expected is String }!

    method testTypeDecl05
        self eval: "let x::String = \"foo\". x = 123"
             expectError: TypeError
             where: { |e|
                      e value is 123 and: e expected is String }!

    method testTypeDecl06
        self load: "class Foo \{ baz::Integer }
                       method quux
                          baz!
                   end"
            eval: "(Foo baz: 42) quux"
            expect: 42!

    method testTypeDecl07
        self load: "class Foo \{ bar::String }
                    end"
            eval: "Foo bar: 42"
            expectError: TypeError
            where: { |e|
                     e value is 42 and: e expected is String }!

    method testTypeDecl08
        self load: "class Foo \{ bar::String }
                        method boop: x
                            bar = x!
                    end"

            eval: "(Foo bar: \"beep\") boop: 42"
            expectError: TypeError
            where: { |e|
                     e value is 42 and: e expected is String }!

    method testTypeDecl09
        self load: "class Foo \{}
                        direct method bar: x::Integer
                            x + 1!
                    end"
            eval: "Foo bar: 41"
            expect: 42!

    method testTypeDecl10
        self load: "class Foo \{}
                        direct method bar: x::String
                            x at: 1!
                    end"
            eval: "Foo bar: 41"
            expectError: TypeError
            where: { |e|
                     e value is 41 and: e expected is String }!

    method testTypeDecl11
        self load: "class Foo \{}
                        direct method @ x::Integer
                            x + 1!
                    end"
            eval: "Foo @ 41"
            expect: 42!

    method testTypeDecl12
        self load: "class Foo \{}
                        direct method @ x::String
                            x at: 1!
                    end"
            eval: "Foo @ 41"
            expectError: TypeError
            where: { |e|
                     e value is 41 and: e expected is String }!

    method testTypeDecl13
        self load: "class Foo \{}
                        direct method @ x::String
                            let res = (x at: 1) code.
                            x = \"ok\".
                            [res, x]!
                    end"
            eval: "Foo @ \"a\""
            expect: [97, "ok"]!

    method testTypeDecl14
        self load: "class Foo \{}
                        direct method @ x::String
                            let res = (x at: 1) code.
                            x = res.
                            [res, x]!
                    end"
            eval: "Foo @ \"a\""
            expectError: TypeError
            where: { |e|
                     e value is 97 and: e expected is String }!

    method testTypeDecl15
        self eval: "\{ |x::Integer| x } value: 42"
             expect: 42!

    method testTypeDecl16
        self eval: "\{ |x::String| x } value: 42"
             expectError: TypeError
             where: { |e|
                      e value is 42 and: e expected is String }!

    method testTypeDecl17
        self eval: "\{ |x::String| x = x size. x } value: \"ok\""
             expectError: TypeError
             where: { |e|
                      e value is 2 and: e expected is String }!

    method testTypeDecl18
        self load: "class Foo \{}
                       direct method bar -> Integer
                           42!
                    end"
            eval: "Foo bar"
            expect: 42!

    method testTypeDecl19
        self load: "class Foo \{}
                       direct method bar -> Integer
                           \"oops\"!
                    end"
            eval: "Foo bar"
            expectError: TypeError
            where: { |e|
                     e value is "oops" and: e expected is Integer }!

    method testTypeDecl20
        self eval: "\{ -> Integer 42 } value"
             expect: 42!

    method testTypeDecl21
        self eval: "\{ |x| -> Integer x * 2 } value: 21"
             expect: 42!

    method testTypeDecl22
        self eval: "\{ -> String 42 } value"
             expectError: TypeError
             where: { |e|
                      e value is 42 and: e expected is String }!

    method testTypeDecl23
        self eval: "\{ |x| -> String x * 2 } value: 21"
             expectError: TypeError
             where: { |e|
                      e value is 42 and: e expected is String }!

    method testTypeDecl24
        self eval: "123::Integer - 1"
             expect: 122!

    method testFloat1
        self eval: "123.123"
             expect: 123.123!

    method testFloat2
        self eval: "1.1e2"
             expect: 110.0!

    method testDynamicBinding1
        self load: "define $foo 0!
                    class Test \{}
                        direct method inner
                            $foo!
                        direct method test: x
                            let $foo = x.
                            self inner!
                    end"
            eval: "Test test: 42"
            expect: 42!

    method testPanic1
        { self eval: "panic \"foo\"" expect: #nothing. return False }
            onPanic: { |p|
                       (p description == "foo") assert.
                       return True }!

    method test_Can_extend_class_with_direct_method
        self load: "class Foo \{}
                    end
                    extend Foo
                        direct method bar
                           42!
                    end"
            eval: "Foo bar"
            expect: 42!

    method test_Can_extend_class_with_instance_method
        self load: "class Foo \{}
                    end
                    extend Foo
                        method bar
                           42!
                    end"
            eval: "Foo new bar"
            expect: 42!

    method test_Define_with_bang_immediately_after_literal_selector_symbol
        self load: "define Thing #<!"
             eval: "Thing"
             expect: #<!

    method test_Can_extend_interface_with_interface
        self load: "interface Foo
                    end
                    extend Integer
                        is Foo
                        method foofoo
                           123!
                    end"
            eval: "[Foo includes: 42, 42 foofoo]"
            expect: [True, 123]!

    method testImport1
        -- prefix import
        self modules: { "foo" -> "class Foo \{}
                                     method fooInModule
                                        42!
                                  end" } asStringModules
             load: "import foo
                    class Foo \{}
                       method fooInHere
                           foo.Foo new fooInModule!
                    end"
             eval: "Foo new fooInHere"
             expect: 42!

    method testImport2
        -- name import
        self modules: { "foo" -> "define Foo 42!" } asStringModules
             load: "import foo.Foo
                    define Bar Foo!"
             eval: "Bar"
             expect: 42!

    method testImport3
        -- name import: other names don't shadow pre-existing
        self modules: { "foo" -> "define Foo 42!
                                  define Quux 0!" } asStringModules
             load: "define Quux 123!
                    import foo.Foo
                    define Bar Foo!"
             eval: "Bar + Quux"
             expect: 165!

    method testImport4
        -- wildcard import
        self modules: { "foo" -> "define Foo 1!
                                  define Bar 2!" } asStringModules
            load: "import foo.*
                   class Test \{}
                      direct method value
                          Foo + Bar!
                   end"
            eval: "Test value"
            expect: 3!

    method testImport5
        -- submodule import
        self modules: { "foo.bar" -> "define Quux 42!",
                        "foo.zot" -> "define Beep 123!" } asStringModules
             load: "import foo.bar.Quux
                    import foo.zot
                    define A Quux!
                    define B zot.Beep!"
             eval: "A + B"
             expect: 165!

    method testImport6
        -- relative import
        self modules: { "foo.foo" -> "define Foo 21!",
                        "foo.bar" -> "import .foo.Foo
                                      define Bar 2!" } asStringModules
             load: "import foo.bar
                    define Test bar.Foo * bar.Bar!"
             eval: "Test"
             expect: 42!

    method testImport7
        -- leading comments at toplevel
        self modules: { "foo.bar" -> "-- comment 1
                                      define Quux 42!",
                        "foo.zot" -> "-- comment 2
                                      define Beep 123!" } asStringModules
             load: "-- comment 3
                    import foo.bar.Quux
                    -- comment 4
                    import foo.zot
                    -- comment 5
                    define A Quux!
                    -- comment 6
                    define B zot.Beep!"
             eval: "A + B"
             expect: 165!

    method testImport8
        -- prefix import in an 'is'
        self modules: { "foo" -> "interface Foo
                                     method foo
                                        42!
                                  end" } asStringModules
            load: "import foo
                   class Test \{}
                      is foo.Foo
                   end"
            eval: "Test new foo"
            expect: 42!

end

class Main { system }
    direct method run: cmd in: system
        (self system: system) run!
    method run
        (TestFoolang runIn: system onFailure: { self fail }) ok
            ifTrue: { self pass }
            ifFalse: { self fail }!
    method fail
        system output println: "Tests failed!".
        system exit: 1!
    method pass
        system output println: "All tests ok!".
        system exit!
end
