import .ast.*
import .syntaxVisitor.SyntaxVisitor
import .syntax.Syntax
import .utils.*

-- define Tracer DebugTracer name: "SyntaxTranslator"!
define Tracer NullTracer!

define $MethodHome
    False!

class SyntaxTranslator { env currentMethod }
    is SyntaxVisitor

    direct method env: env
        self
            env: env
            currentMethod: False!

    direct method translate: syntax in: env
        syntax
            visitBy: (SyntaxTranslator env: env)!

    method child: env
        SyntaxTranslator
            env: env
            currentMethod: currentMethod!

    method addVariable: name
        self child: (env addVariable: name)!

    method addVariable: name type: type
        self child: (env addVariable: name type: type)!

    method import: module relative: relative
        self child: (env
                         import: module
                         relative: relative)!

    method import: name from: module relative: relative source: source
        self child: (env
                         import: name
                         from: module
                         relative: relative
                         source: source)!

    method importAll: module relative: relative
        self child: (env
                         importAll: module
                         relative: relative)!

    method visitSelector: aSelector
        AstConstantRef value: (Selector intern: aSelector name)
                       env: env!

    method visitLiteral: aLiteral
        -- Tracer trace: #visitLiteral:.
        AstConstantRef value: aLiteral value env: env!

    method visitStringInterpolation: anInterpolation
        let parts
            = anInterpolation parts
                collect: { |each|
                           let node = each visitBy: self.
                           each isLiteral
                               ifTrue: { node }
                               ifFalse: { let value
                                              = AstSend
                                                  receiver: node
                                                  selector: #value
                                                  arguments: []
                                                  source: "#<interpolation #valie>".
                                          AstSend
                                              receiver: value
                                              selector: #toString
                                              arguments: []
                                              source: "#<interpolation #toString>" } }.
        let res = parts pop.
        { parts isEmpty }
            whileFalse: { res = AstSend
                              receiver: parts pop
                              selector: (#append:)
                              arguments: [res]
                              source: "<interpolation #append>" }.
        res!

    method visitValueTypeDeclaration: aNode
        -- Tracer trace: #visitValueTypeDeclaration.
        AstTypecheck
            value: (aNode value visitBy: self)
            type: (aNode type visitBy: self)!

    method visitArray: anArray
        -- Tracer trace: #visitArray:.
        AstArray entries: (anArray entries
                               collect: { |each| each visitBy: self })!

    method visitRecord: aRecord
        -- Tracer trace: #visitRecord:.
        let recordName = StringOutput
                             with: { |out|
                                     aRecord entries
                                         do: { |each| out print: each key } }.
        AstRecord
            name: (Selector intern: recordName)
            slots: (aRecord entries collect: { |each| each key butlast })
            values: (aRecord entries
                         collect: { |each| each value visitBy: self })!

    method visitDictionary: aDictionary
        -- Tracer trace: #visitDictionary:.
        AstDictionary
            entries: (aDictionary entries
                          collect: { |each| { key: (each key visitBy: self),
                                              value: (each value visitBy: self) }})!

    method visitSeq: aSeq
        -- Tracer trace: #visitSeq:.
        -- FIXME: Would be nicer to flatten this out.
        AstSeq
            first: (aSeq first visitBy: self)
            then: (aSeq then visitBy: self)!

    method visitReturn: aReturn
        -- Tracer trace: #visitReturn:.
        AstReturn
            from: currentMethod::AstMethod
            value: (aReturn value visitBy: self)!

    method visitPanic: aPanic
        -- Tracer trace: #visitPanic:.
        AstPanic value: (aPanic value visitBy: self)!

    method visitPrefixComment: aComment
           aComment value visitBy: self!

    method visitSuffixComment: aComment
           aComment value visitBy: self!

    method visitLet: aLet
        -- Tracer trace: #visitLet:.
        let bodyVisitor = self addVariable: aLet variable name
                               type: (self _visitType: aLet variable type).
        let var = bodyVisitor env bindings first.
        (var name == aLet variable name) assert.
        AstBindLexical
            variable: var
            value: (aLet value visitBy: self)
            body: (aLet body visitBy: bodyVisitor)!

    method visitDynamicLet: aLet
        -- Tracer trace: #visitDynamicLet:.
        let var = aLet variable visitBy: self.
        AstBindDynamic
            variable: var
            value: (aLet value visitBy: self)
            body: (aLet body visitBy: self)!

    method visitPrefixMessage: aMessage
        -- Tracer trace: #visitPrefixMessage:.
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector intern: "prefix{aMessage selector name}")
            arguments: []
            source: aMessage source!

    method visitUnaryMessage: aMessage
        -- Tracer trace: #visitUnaryMessage:.
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector intern: aMessage selector name)
            arguments: []
            source: aMessage source!

    method visitBinaryMessage: aMessage
        -- Tracer trace: #visitBinaryMessage:.
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector intern: aMessage selector name)
            arguments: [aMessage argument visitBy: self]
            source: aMessage source!

    method visitKeywordMessage: aMessage
        -- Tracer trace: #visitKeywordMessage:.
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector intern: aMessage selector name)
            arguments: (aMessage arguments collect: { |arg| arg visitBy: self })
            source: aMessage source!

    method visitIs: anIs
        -- Tracer trace: #visitIs:.
        AstIs
            left: (anIs left visitBy: self)
            right: (anIs right visitBy: self)!

    method visitSelfInstance: aSelf
        -- Tracer trace: #visitSelfInstance:.
        AstSelfInstanceRef new!

    method visitSelfClass: aSelf
        -- Tracer trace: #visitSelfClass:.
        AstSelfClassRef new!

    method visitVariable: aVariable
        -- Tracer visitVariable: aVariable.
        (env reference: aVariable name)
            withSource: aVariable source!

    method visitDynamicVariable: aVariable
        -- Tracer trace: #visitDynamicVariable:.
        (env dynamic: aVariable name)
            withSource: aVariable source!
                
    method visitInterfaceRef: aRef
        -- Tracer trace: #visitInterfaceRef:.
        aRef name visitBy: self!

    method visitAssign: anAssign
        Tracer visitAssign: anAssign.
        (anAssign variable visitBy: self)
            assign: (anAssign value visitBy: self)!

    method visitParens: aParens
        -- Tracer trace: #visitParens:.
        aParens body visitBy: self!

    method visitBlock: aBlock
        -- Tracer visitBlock: aBlock.
        let bodyEnv = env newFrame
                          addVariables: (aBlock parameters collect: #name)
                          types: (aBlock parameters
                                      collect: { |each| self _visitType: each type }).
        let argumentVariables = bodyEnv bindings.
        (argumentVariables size is aBlock parameters size) assert.
        AstBlock
            body: (aBlock body visitBy: (self child: bodyEnv))
            argumentVariables: argumentVariables
            returnType: (self _visitType: aBlock returnType)
            frameSize: bodyEnv frame size!

    method visitDefine: aDefine
        Tracer visitDefine: aDefine variable name.
        let bodyVisitor = self child: env newFrame.
        AstDefine
            name: aDefine variable name
            body: (aDefine body visitBy: bodyVisitor)
            frameSize: bodyVisitor env frame size
            isDynamic: aDefine variable isDynamic!

    method visitModuleImport: anImport
        -- Tracer visitModuleImport: anImport module.
        let bodyVisitor = self
                              import: anImport module
                              relative: anImport relative.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitNameImport: anImport
        -- Tracer visitNameImport: anImport module.
        let bodyVisitor = self
                              import: anImport name
                              from: anImport module
                              relative: anImport relative
                              source: anImport source.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitWildcardImport: anImport
        -- Tracer visitWildCardImport: anImport module.
        let bodyVisitor = self
                              importAll: anImport module
                              relative: anImport relative.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitExternalRef: aRef
        -- Tracer visitExternalRef: aRef.
        env reference: aRef name
            inModule: aRef module
            source: aRef source!

    method _visitType: aType
        -- Tracer _visitType: aType name.
        aType is Any
            ifTrue: { return Any }.
        (aType visitBy: self) :: AstGlobal!

    method visitMethod: aMethod
        -- Tracer visitMethod: aMethod selector.
        let signature = aMethod signature.
        let bodyEnv = env newFrame
                          addVariables: (signature parameters collect: #name)
                          types: (signature parameters
                                      collect: { |each|
                                                 self _visitType: each type }).
        let argumentVariables = bodyEnv bindings.
        (argumentVariables size is signature parameters size) assert.
        let astMethod = AstMethod
                            home: $MethodHome
                            selector: (Selector intern: signature selector name)
                            argumentVariables: argumentVariables
                            returnType: (self _visitType: signature returnType)
                            isDirect: aMethod isDirect
                            isRequired: aMethod body is False.
        astMethod isRequired
            ifFalse: { astMethod
                           body: (aMethod body
                                      visitBy: (SyntaxTranslator
                                                    env: bodyEnv
                                                    currentMethod: astMethod)) }.
        astMethod
            frameSize: bodyEnv frame size.
        astMethod!

    method visitClass: aClass
        aClass superclass is False
            ifTrue: { self _visitNewClass: aClass }
            ifFalse: { self _visitSubClass: aClass }!

    method _visitNewClass: aClass
        Tracer _visitNewClass: aClass name.
        let n = 0.
        let slots = aClass slots collect: { |each::Syntax|
                                            n = n + 1.
                                            AstSlot
                                                name: each name
                                                index: n
                                                type: (self _visitType: each type) }.
        let theClass = AstClass
                           name: aClass name
                           slots: slots
                           interfaces: (self _visitEach: aClass interfaces).
        let $MethodHome = theClass.
        theClass directMethods: (self _visitEach: aClass directMethods).
        let instanceMethodVisitor = self child: (env addSlots: slots).
        theClass instanceMethods: (instanceMethodVisitor _visitEach: aClass instanceMethods).
        theClass!

    method _visitSubClass: aClass
        Tracer _visitSubClass: aClass name.
        let theClass = AstClass
                           name: aClass name
                           superclass: (aClass superclass visitBy: self)
                           interfaces: (self _visitEach: aClass interfaces).
        let $MethodHome = theClass.
        theClass directMethods: (self _visitEach: aClass directMethods).
        let instanceMethodVisitor = self child: env.
        theClass instanceMethods: (instanceMethodVisitor _visitEach: aClass instanceMethods).
        theClass!


    method visitInterface: anInterface
        Tracer visitInterface: anInterface name.
        let theInterface = AstInterface
                               name: anInterface name
                               interfaces: (self _visitEach: anInterface interfaces).
        let $MethodHome = theInterface.
        theInterface directMethods: (self _visitEach: anInterface directMethods).
        theInterface instanceMethods: (self _visitEach: anInterface instanceMethods).
        theInterface!

    method visitExtend: anExtend
        Tracer trace: #visitExtend:.
        let type = env reference: anExtend name.
        let $MethodHome = type definition.
        AstExtend
            type: type
            interfaces: (self _visitEach: anExtend interfaces)
            directMethods: (self _visitEach: anExtend directMethods)
            instanceMethods: (self _visitEach: anExtend instanceMethods)!

end
