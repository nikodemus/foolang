import .ast.*
import .syntaxVisitor.SyntaxVisitor
import .syntax.Syntax

class SyntaxTranslator { env }
    is SyntaxVisitor

    direct method translate: syntax in: env
        syntax
            visitBy: (SyntaxTranslator env: env)!

    method addVariable: name
        SyntaxTranslator env: (env addVariable: name)!

    method addVariable: name type: type
        SyntaxTranslator env: (env addVariable: name type: type)!

    method import: module relative: relative
        SyntaxTranslator env: (env
                                   import: module
                                   relative: relative)!

    method import: name from: module relative: relative
        SyntaxTranslator env: (env
                                   import: name
                                   from: module
                                   relative: relative)!

    method importAll: module relative: relative
        SyntaxTranslator env: (env
                                   importAll: module
                                   relative: relative)!

    method visitLiteral: aLiteral
        AstConstantRef value: aLiteral value!

    method visitValueTypeDeclaration: aNode
        AstTypecheck
            value: (aNode value visitBy: self)
            type: (aNode type visitBy: self)!

    method visitArray: anArray
        AstArray entries: (anArray entries
                               collect: { |each| each visitBy: self })!

    method visitRecord: aRecord
        let recordName = StringOutput
                             with: { |out|
                                     aRecord entries
                                         do: { |each| out print: each key } }.
        AstRecord
            name: (Selector new: recordName)
            entries: (aRecord entries
                          collect: { |each| each value visitBy: self })!

    method visitDictionary: aDictionary
        AstDictionary
            entries: (aDictionary entries
                          collect: { |each| { key: (each key visitBy: self),
                                              value: (each value visitBy: self) }})!

    method visitSeq: aSeq
        -- FIXME: Would be nicer to flatten this out.
        AstSeq
            first: (aSeq first visitBy: self)
            then: (aSeq then visitBy: self)!

    method visitReturn: aReturn
        AstReturn value: (aReturn value visitBy: self)!

    method visitPanic: aPanic
        AstPanic value: (aPanic value visitBy: self)!

    method visitPrefixComment: aComment
        AstComment
            comment: aComment comment
            value: (aComment value visitBy: self)
            source: aComment source!

    method visitSuffixComment: aComment
        AstComment
            comment: aComment comment
            value: (aComment value visitBy: self)
            source: aComment source!

    method visitLet: aLet
        let bodyVisitor = self addVariable: aLet variable name
                               type: (self _resolveType: aLet variable type).
        let var = bodyVisitor env bindings first.
        (var name == aLet variable name) assert.
        AstBindLexical
            variable: var
            value: (aLet value visitBy: self)
            body: (aLet body visitBy: bodyVisitor)!

    method visitPrefixMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector name: "prefix{aMessage selector name}")
            arguments: []
            source: aMessage source!

    method visitUnaryMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: []
            source: aMessage source!

    method visitBinaryMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: [aMessage argument visitBy: self]
            source: aMessage source!

    method visitKeywordMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: (aMessage arguments collect: { |arg| arg visitBy: self })
            source: aMessage source!

    method visitIs: anIs
        AstIs
            left: (anIs left visitBy: self)
            right: (anIs right visitBy: self)!

    method visitSelfInstance: aSelf
        AstSelfInstanceRef new!

    method visitSelfClass: aSelf
        AstSelfClassRef new!

    method visitVariable: aVariable
        env reference: aVariable name!

    method visitInterfaceRef: aRef
        aRef name visitBy: self!

    method visitAssign: anAssign
        (env reference: anAssign variable name)
            assign: (anAssign value visitBy: self)!

    method visitParens: aParens
        aParens body visitBy: self!

    method visitBlock: aBlock
        let bodyEnv = env newFrame
                          addVariables: (aBlock parameters collect: #name)
                          types: (aBlock parameters
                                      collect: { |each|
                                                 self _resolveType: each type }).
        let argumentVariables = bodyEnv bindings.
        (argumentVariables size is aBlock parameters size) assert.
        AstBlock
            body: (aBlock body visitBy: (SyntaxTranslator env: bodyEnv))
            argumentVariables: argumentVariables
            returnType: (self _resolveType: aBlock returnType)
            frameSize: bodyEnv frame size!

    method visitDefine: aDefine
        let bodyVisitor = SyntaxTranslator env: env newFrame.
        AstDefine
            name: aDefine name
            body: (aDefine body visitBy: bodyVisitor)
            frameSize: bodyVisitor env frame size!

    method visitModuleImport: anImport
        let bodyVisitor = self
                              import: anImport module
                              relative: anImport relative.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitNameImport: anImport
        let bodyVisitor = self
                              import: anImport name
                              from: anImport module
                              relative: anImport relative.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitWildcardImport: anImport
        let bodyVisitor = self
                              importAll: anImport module
                              relative: anImport relative.
        AstDefinitionList
            new: (bodyVisitor _visitEach: anImport body)!

    method visitExternalRef: aRef
        env reference: aRef name inModule: aRef module!

    method _resolveType: aType
        aType is False
            ifTrue: { return False }.
        let ast = aType visitBy: self.
        ast isConstant
            ifFalse: { Error raise: "non-constant type declaration" }.
        ast value!

    method visitMethod: aMethod
        let signature = aMethod signature.
        let bodyEnv = env newFrame
                          addVariables: (signature parameters collect: #name)
                          types: (signature parameters
                                      collect: { |each|
                                                 self _resolveType: each type }).
        let argumentVariables = bodyEnv bindings.
        (argumentVariables size is signature parameters size) assert.
        AstMethod
            -- FIXME: Methods should not know their selectors!
            selector: signature selector
            argumentVariables: argumentVariables
            returnType: (self _resolveType: signature returnType)
            body: (aMethod body is False
                       ifTrue: { False }
                       ifFalse: { (aMethod body visitBy: (SyntaxTranslator env: bodyEnv)) })
            frameSize: bodyEnv frame size
            isDirect: aMethod isDirect!

    method visitClass: aClass
        let slots = aClass slots collect: { |slot::Syntax|
                                            { name: slot name,
                                              type: (self _resolveType: slot type) } }.
        let instanceMethodVisitor = SyntaxTranslator
                                        env: (env addSlots: slots).
        -- FIXME: should fetch interface object instead of using the name
        AstClass
            name: aClass name
            slots: slots
            interfaces: (self _visitEach: aClass interfaces)
            directMethods: (self _visitEach: aClass directMethods)
            instanceMethods: (instanceMethodVisitor _visitEach: aClass instanceMethods)!

    method visitInterface: anInterface
         -- FIXME: should fetch interface object instead of using the name
        AstInterface
            name: anInterface name
            interfaces: (self _visitEach: anInterface interfaces)
            directMethods: (self _visitEach: anInterface directMethods)
            instanceMethods: (self _visitEach: anInterface instanceMethods)!

    method visitExtend: anExtend
        -- FIXME: should fetch interface object instead of using the name
        AstExtend
            name: anExtend name
            interfaces: (self _visitEach: anExtend interfaces)
            directMethods: (self _visitEach: anExtend directMethods)
            instanceMethods: (self _visitEach: anExtend instanceMethods)!

end
