import .ast.*
import .syntaxVisitor.SyntaxVisitor

class SyntaxTranslator { env }
    is SyntaxVisitor

    direct method translate: syntax in: env
        syntax
            visitBy: (SyntaxTranslator env: env)!

    method addVariable: name
        SyntaxTranslator env: (env addVariable: name)!

    method visitLiteral: aLiteral
        AstConstantRef value: aLiteral value!

    method visitSeq: aSeq
        -- FIXME: Would be nicer to flatten this out.
        AstSeq
            first: (aSeq first visitBy: self)
            then: (aSeq then visitBy: self)!

    method visitReturn: aReturn
        AstReturn value: (aReturn value visitBy: self)!

    method visitPrefixComment: aComment
        AstComment
            comment: aComment comment
            value: (aComment value visitBy: self)
            source: aComment source!

    method visitSuffixComment: aComment
        AstComment
            comment: aComment comment
            value: (aComment value visitBy: self)
            source: aComment source!

    method visitLet: aLet
        let bodyVisitor = self addVariable: aLet name.
        AstBindLexical
            name: aLet name
            index: bodyVisitor env allocation index
            value: (aLet value visitBy: self)
            body: (aLet body visitBy: bodyVisitor)!

    method visitPrefixMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: (Selector name: "prefix{aMessage selector name}")
            arguments: []
            source: aMessage source!

    method visitUnaryMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: []
            source: aMessage source!

    method visitBinaryMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: [aMessage argument visitBy: self]
            source: aMessage source!

    method visitKeywordMessage: aMessage
        AstSend
            receiver: (aMessage receiver visitBy: self)
            selector: aMessage selector
            arguments: (aMessage arguments collect: { |arg| arg visitBy: self })
            source: aMessage source!

    method visitIs: anIs
        AstIs
            left: (anIs left visitBy: self)
            right: (anIs right visitBy: self)!

    method visitSelf: aSelf
        AstSelfRef new!

    method visitVariable: aVariable
        env reference: aVariable name!

    method visitAssign: anAssign
        let binding = env reference: anAssign variable name.
        AstLexicalSet
            name: anAssign variable name
            frame: binding frame :: Integer
            index: binding index :: Integer
            value: (anAssign value visitBy: self)!

    method visitParens: body
        body visitBy: self!

    method visitBlockWith: parameters body: body
        let bodyEnv = env newFrame addVariables: parameters.
        AstBlock
            body: (body visitBy: (SyntaxTranslator env: bodyEnv))
            argumentCount: parameters size
            frameSize: parameters size + bodyEnv allocation size!

    method visitDefine: name body: body
        -- FIXME: Is this right?? Should body not gets an environment of its own?
        AstDefine
            name: name
            body: (body visitBy: self)
            frameSize: env allocation size!

    method visitMethodDefinition: signature body: body
        let bodyEnv = env newFrame addVariables: signature parameters.
        AstMethod
            selector: signature selector name
            argumentCount: signature parameters size
            body: (body visitBy: (SyntaxTranslator env: bodyEnv))
            frameSize: bodyEnv allocation size!

    method visitClassDefinition: name directMethods: directMethods slots: slots methods: methods
        let astDirectMethods = directMethods collect: { |m| m visitBy: self }.
        let instanceMethodVisitor = SyntaxTranslator env: (env addSlots: slots).
        let astMethods = methods collect: { |m| m visitBy: instanceMethodVisitor }.
        AstClass
            name: name
            directMethods: astDirectMethods
            slots: slots
            methods: astMethods!
end
