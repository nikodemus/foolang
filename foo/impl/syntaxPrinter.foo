import .syntaxVisitor.SyntaxVisitor

class SyntaxPrinter { output indent printed blockStart suffixComment }
    is SyntaxVisitor

    direct method print: syntax to: output
        syntax visitBy: (self
                             output: output
                             indent: 0
                             printed: 0
                             blockStart: False
                             suffixComment: False)!

    method toString
        "#<SyntaxPrinter>"!

    method indentBody
        SyntaxPrinter
            output: output
            indent: indent + 4
            printed: printed
            blockStart: False
            suffixComment: False!

    method indentHere
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: False
            suffixComment: False!

    method indentBlock
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: True
            suffixComment: False!

    method newline
        output println: "".
        indent times: { output print: " " }.
        printed = indent!

    method print: string::String
        output print: string.
        printed = printed + string size!

    method println: string::String
        self print: string.
        self newline!

    method handleBlockStart
        blockStart is True
            ifTrue: { self newline.
                      blockStart = False }!

    method handleSuffixComment
        suffixComment is False
            ifFalse: { self print: suffixComment.
                       suffixComment = False }!

    method visitLiteral: aLiteral
        self print: aLiteral valueDisplayString!

    method visitValueTypeDeclaration: aNode
        aNode value visitBy: self.
        self print: "::".
        aNode type visitBy: self!

    method visitArray: anArray
        self print: "[".
        anArray entries
            do: { |element| element visitBy: self }
            interleaving: { self print: ", " }.
        self print: "]"!

    method visitRecord: aRecord
        self print: "\{".
        aRecord entries
            do: { |entry|
                  self print: entry key.
                  self print: " ".
                  entry value visitBy: self }
            interleaving: { self print: ", " }.
        self print: "}"!

    method visitDictionary: aDictionary
        self print: "\{".
        aDictionary entries
            do: { |entry|
                  entry key visitBy: self.
                  self print: " -> ".
                  entry value visitBy: self }
            interleaving: { self print: ", " }.
        self print: "}"!

    method visitSeq: aSeq
        self handleBlockStart.
        aSeq first visitBy: self.
        self print: ".".
        self handleSuffixComment.
        self newline.
        aSeq then visitBy: self!

    method visitReturn: aReturn
        self print: "return ".
        aReturn value visitBy: self!

    method visitPanic: aPanic
        self print: "panic ".
        aPanic value visitBy: self!

    method visitPrefixComment: aComment
        self handleBlockStart.
        let valueVisitor = self indentHere.
        aComment fence is False
            ifTrue: { self visitLineComment: aComment }
            ifFalse: { self visitBlockComment: aComment }.
        valueVisitor newline.
        aComment value visitBy: valueVisitor!

    method visitSuffixComment: aComment
        self handleBlockStart.
        suffixComment not assert.
        suffixComment = " --{aComment comment}".
        aComment value visitBy: self!

    method visitPrefixMessage: aMessage
        self print: aMessage selector name.
        aMessage receiver visitBy: self!

    method visitUnaryMessage: aMessage
        aMessage receiver visitBy: self.
        self print: " ".
        self print: aMessage selector name!

    method visitBinaryMessage: aMessage
        aMessage receiver visitBy: self.
        self print: " ".
        self print: aMessage selector name.
        self print: " ".
        aMessage argument visitBy: self!

    method visitKeywordMessage: aMessage
        aMessage receiver visitBy: self.
        aMessage selector parts
            with: aMessage arguments
            do: { |part arg|
                  self print: " ".
                  self print: part.
                  self print: " ".
                  arg visitBy: self }!

    method visitIs: anIs
        anIs left visitBy: self.
        self print: " is ".
        anIs right visitBy: self!

    method visitDynamicLet: aLet
        self visitLet: aLet!

    method visitLet: aLet
        self handleBlockStart.
        self print: "let ".
        aLet variable visitBy: self.
        self print: " = ".
        aLet value visitBy: self.
        self print: ".".
        self handleSuffixComment.
        self newline.
        aLet body visitBy: self!

    method visitTypedVariable: aVar
        self print: aVar name.
        self print: "::".
        aVar type visitBy: self!

    method visitUntypedVariable: aVar
        self print: aVar name!

    method visitSelfClass: aSelf
        self print: "Self"!

    method visitSelfInstance: aSelf
        self print: "self"!

    method visitVariable: aVariable
        self print: aVariable name!

    method visitDynamicVariable: aVariable
        self print: aVariable name!

    method visitAssign: anAssign
        self print: anAssign variable name.
        self print: " = ".
        anAssign value visitBy: self!

    method visitParens: aParens
        self print: "(".
        aParens body visitBy: self indentHere.
        self print: ")"!

    method visitBlock: aBlock
        self print: "\{ ".
        let bodyPrinter = self indentBlock.
        aBlock parameters
            ifNotEmpty: { self print: "|".
                          aBlock parameters
                              do: { |param| param visitBy: self }
                              interleaving: { self print: " " }.
                          self print: "| " }.
        aBlock returnType is False
            ifFalse: { self print: " -> ".
                       aBlock returnType visitBy: self.
                       self print: " " }.
        aBlock body visitBy: bodyPrinter.
        self print: " }"!

    method visitDefine: aDefine
        self print: "define ".
        let bodyVisitor = self indentBody.
        aDefine variable visitBy: bodyVisitor.
        self newline.
        aDefine body visitBy: bodyVisitor.
        self println: "!"!

    method _printModule: path
        self print: ("." join: path)!

    method visitModuleImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self newline.
        self _visitEach: anImport body!

    method visitNameImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self println: ".{anImport name}".
        self _visitEach: anImport body!

    method visitWildcardImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self println: ".*".
        self _visitEach: anImport body!

    method visitExternalRef: aRef
        self print: aRef module.
        self print: ".".
        self print: aRef name!

    method visitLineComment: comment
        self print: "--".
        self print: comment comment!

    method visitBlockComment: comment
        let lines = comment comment.
        -- Inline blocks
        lines size is 1
            ifTrue: { self print: comment fence.
                      self print: lines first.
                      self print: comment fence.
                      return self }.
        -- Multiline blocks, normalizing them so that fences are
        -- on their own lines.
        let first = lines first == ""
                        ifTrue: { 2 }
                        ifFalse: { 1 }.
        let last = lines last == ""
                        ifTrue: { lines size - 1 }
                        ifFalse: { lines size }.
        self print: comment fence.
        first to: last
              do: { |i|
                    self newline.
                    self print: (lines at: i) }.
        self newline.
        self print: comment fence!

    method visitMethod: aMethod
        -- Debug println: "/pp method {aMethod signature selector}".
        aMethod comment is False
            ifFalse: { aMethod comment visitBy: self.
                       self newline }.
        aMethod isRequired
            ifTrue: { self print: "required " }.
        aMethod isDirect
            ifTrue: { self print: "direct " }.
        self print: "method".
        let signature = aMethod signature.
        signature parameters isEmpty
            ifTrue: { self print: " ".
                      self print: signature selector name }
            ifFalse: { signature selector parts
                           withIndexDo: { |part index|
                                          self print: " ".
                                          self print: part.
                                          self print: " ".
                                          let param =  signature parameters at: index.
                                          param visitBy: self } }.
        signature returnType is False
            ifFalse: { self print: " -> ".
                       signature returnType visitBy: self }.
        aMethod isRequired
            ifFalse: { let bodyVisitor = self indentBody.
                       bodyVisitor println: "".
                       aMethod body visitBy: bodyVisitor.
                       bodyVisitor print: "!".
                       -- no newline!
                       bodyVisitor handleSuffixComment }!

    method visitClass: aClass
        -- Debug println: "/pp class {aClass name}".
        self print: "class ".
        self print: aClass name.
        self print: " \{".
        aClass slots
            ifNotEmpty: { self print: " ".
                          aClass slots
                              do: { |slot|
                                    slot visitBy: self.
                                    self print: " " }}.
        self print: "}".
        self _visitTypeBody: aClass.
        self newline.
        self print: "end".
        self handleSuffixComment.
        self newline!

    method visitInterfaceRef: aRef
        self print: "is ".
        aRef name visitBy: self!

    method visitInterface: anInterface
        self print: "interface ".
        self print: anInterface name.
        self _visitTypeBody: anInterface.
        self newline.
        self print: "end".
        self handleSuffixComment.
        self newline!

    method visitExtend: anExtend
        self print: "extend ".
        self print: anExtend name.
        self _visitTypeBody: anExtend.
        self newline.
        self print: "end".
        self handleSuffixComment.
        self newline!

    method _visitTypeBody: aType
        -- Debug println: "/pp methods of {aType name}".
        let bodyVisitor = self indentBody.
        aType interfaces
            do: { |each|
                  bodyVisitor newline.
                  each visitBy: bodyVisitor }.
        (aType directMethods select: #isRequired)
            do: { |m|
                  bodyVisitor newline.
                  m visitBy: bodyVisitor }.
        (aType instanceMethods select: #isRequired)
            do: { |m|
                  bodyVisitor newline.
                  m visitBy: bodyVisitor }.
        (aType directMethods select: #isDefined)
            do: { |m|
                  bodyVisitor newline.
                  m visitBy: bodyVisitor }.
        (aType instanceMethods select: #isDefined)
            do: { |m|
                  bodyVisitor newline.
                  m visitBy: bodyVisitor }!

end
