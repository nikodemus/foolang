import .syntaxVisitor.SyntaxVisitor

class SyntaxPrinter { output
                      indent
                      printed
                      blockStart
                      last }
    is SyntaxVisitor

    direct method printAll: syntaxList to: output
        syntaxList
            do: { |each|
                  SyntaxPrinter print: each to: output }
            interleaving: { output newline }!

    direct method print: syntax to: output
        syntax visitBy: (self
                             output: output
                             indent: 0
                             printed: 0
                             blockStart: False
                             last: False)!

    method toString
        "#<SyntaxPrinter>"!

    method indentBody
        SyntaxPrinter
            output: output
            indent: indent + 4
            printed: printed
            blockStart: False
            last: False!

    method indentHere
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: False
            last: False!

    method indentOne
        SyntaxPrinter
            output: output
            indent: printed + 1
            printed: printed
            blockStart: False
            last: False!

    method indentBlock
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: True
            last: False!

    method newline
        output println: "".
        printed = 0.
        self doIndent.
        self!

    method doIndent
        indent - printed times: { output print: " " }.
        printed = indent.
        self!

    method skipline
        output println: "".
        printed = 0.
        self!

    method print: string::String
        output print: string.
        printed = printed + string size.
        self!

    method println: string::String
        self print: string.
        self newline!

    method handleBlockStart
        blockStart is True
            ifTrue: { self newline.
                      blockStart = False }!

    method visitLiteral: aLiteral
        self print: aLiteral valueDisplayString.
        last = #literal!

    method visitValueTypeDeclaration: aNode
        aNode value visitBy: self.
        self print: "::".
        aNode type visitBy: self.
        last = #declaration!

    method visitSelector: aSelector
        self print: "#".
        self print: aSelector name!

    method visitArray: anArray
        let flat = anArray entries allSatisfy: #isTiny.
        self print: "[".
        let printer = self indentHere.
        anArray entries
            do: { |element| element visitBy: printer }
            interleaving: { printer print: ",".
                            flat
                                ifTrue: { printer print: " " }
                                ifFalse: { printer newline } }.
        printer print: "]".
        last = #paren!

    method visitRecord: aRecord
        self print: "\{".
        let printer = self indentHere.
        aRecord entries
            do: { |entry|
                  printer print: entry key.
                  printer print: " ".
                  entry value visitBy: printer }
            interleaving: { printer println: "," }.
        self print: "}".
        last = #paren!

    method visitDictionary: aDictionary
        self print: "\{".
        aDictionary entries
            do: { |entry|
                  entry key visitBy: self.
                  self print: " -> ".
                  entry value visitBy: self }
            interleaving: { self print: ", " }.
        self print: "}".
        last = #paren!

    method visitSeq: aSeq
        self handleBlockStart.
        let first = aSeq first.
        self visitMaybeSuffixComment: first
             followedBy: ".".
        self newline.
        aSeq then visitBy: self!

    method visitStringInterpolation: anInterpolation
        self print: "\"".
        anInterpolation parts
            do: { |each|
                  each isLiteral
                      ifTrue: { self print: each value }
                      ifFalse: { each visitBy: self } }.
        self print: "\"".
        last = #string!

    method visitReturn: aReturn
        self print: "return ".
        aReturn value visitBy: self!

    method visitPanic: aPanic
        self print: "panic ".
        aPanic value visitBy: self!

    method setLast: newLast
        last = newLast!

    method visitPrefixComment: aComment
        self handleBlockStart.
        let valueVisitor = self indentHere.
        aComment fence is False
            ifTrue: { self visitLineComment: aComment }
            ifFalse: { self visitBlockComment: aComment }.
        valueVisitor newline.
        valueVisitor setLast: #comment.
        aComment value visitBy: valueVisitor!

    method visitMaybeSuffixComment: syntax followedBy: mark
        syntax isSuffixComment
            ifTrue: { syntax value visitBy: self.
                      self print: mark.
                      self printSuffixComments: syntax comments }
            ifFalse: { syntax visitBy: self.
                       self print: mark }!

    method printSuffixComments: comments
        let commentPrinter = self indentHere.
        comments
            do: { |each|
                  commentPrinter print: " --".
                  commentPrinter print: each.
                  last = #comment }
            interleaving: { commentPrinter newline }!

    method visitSuffixComment: aComment
        self handleBlockStart.
        aComment value visitBy: self.
        self printSuffixComments: aComment comments.
        self newline!

    method visitPrefixMessage: aMessage
        self print: aMessage selector name.
        aMessage receiver visitBy: self.
        last = #prefix!

    method visitUnaryMessage: aMessage
        aMessage receiver visitBy: self.
        let printer = (last == #paren or: last == #comment)
                          ifTrue: { let p = self indentBody.
                                    last == #paren
                                        ifTrue: { p newline }
                                        ifFalse: { p doIndent } }
                          ifFalse: { self print: " " }.
        printer print: aMessage selector name.
        last = #unary!

    method visitBinaryMessage: aMessage
        aMessage receiver visitBy: self.
        self print: " ".
        self print: aMessage selector name.
        self print: " ".
        aMessage argument visitBy: self.
        last = #binary!

    method visitKeywordMessage: aMessage
        let receiver = aMessage receiver.
        receiver visitBy: self.
        -- Parts gets a trailing empty string, with #with:do: terminates
        -- before we hit it.
        let parts = aMessage selector name splitBy: ":" character.
        (receiver isTiny and: parts size is 2)
            ifTrue: { return parts
                          with: aMessage arguments
                          do: { |part arg|
                                self print: " ".
                                self print: part.
                                self print: ": ".
                                arg visitBy: self.
                                last = #keyword } }.
        let printer = (receiver isTiny and: printed <= indent + 4)
                          ifTrue: { (self print: " ")
                                        indentHere }
                          ifFalse: { let p = self indentBody.
                                     last == #comment
                                         ifTrue: { p doIndent }
                                         ifFalse: { p newline } }.
        parts
            with: aMessage arguments
            do: { |part arg|
                  printer print: part.
                  printer print: ": ".
                  arg visitBy: printer }
            interleaving: { printer newline }.
        last = #keyword!

    method visitIs: anIs
        anIs left visitBy: self.
        self print: " is ".
        anIs right visitBy: self.
        last = #binary!

    method visitDynamicLet: aLet
        self visitLet: aLet!

    method visitLet: aLet
        self handleBlockStart.
        self print: "let ".
        aLet variable visitBy: self.
        self print: " = ".
        self indentHere visitMaybeSuffixComment: aLet value
                        followedBy: ".".
        self newline.
        aLet body visitBy: self!

    method visitTypedVariable: aVar
        self print: aVar name.
        self print: "::".
        aVar type visitBy: self!

    method visitUntypedVariable: aVar
        self print: aVar name.
        last = #var!

    method visitSelfClass: aSelf
        self print: "Self".
        last = #var!

    method visitSelfInstance: aSelf
        self print: "self".
        last = #var!

    method visitVariable: aVariable
        self print: aVariable name.
        last = #var!

    method visitDynamicVariable: aVariable
        self print: aVariable name.
        last = #var!

    method visitAssign: anAssign
        self print: anAssign variable name.
        self print: " = ".
        anAssign value visitBy: self!

    method visitParens: aParens
        self print: "(".
        aParens body visitBy: self indentHere.
        self print: ")".
        last = #paren!

    method visitBlock: aBlock
        self print: "\{".
        let bodyPrinter = self indentOne.
        let header = False.
        aBlock parameters
            ifNotEmpty: { bodyPrinter print: " |".
                          aBlock parameters
                              do: { |param| param visitBy: bodyPrinter }
                              interleaving: { bodyPrinter print: " " }.
                          bodyPrinter print: "|".
                          header = True }.
        aBlock returnType is Any
            ifFalse: { bodyPrinter print: " -> ".
                       aBlock returnType visitBy: bodyPrinter.
                       header = True }.
        (header not or: aBlock body isSimple)
            ifTrue: { bodyPrinter print: " " }
            ifFalse: { bodyPrinter newline }.
        aBlock body visitBy: bodyPrinter.
        -- If the block ended in a non-block comment add an extra
        -- space to align up.
        bodyPrinter last == #comment
            ifTrue: { self print: "}" }
            ifFalse: { self print: " }" }.
        last = #paren!

    method visitDefine: aDefine
        self _maybeToplevelNewline.
        self print: "define ".
        let bodyVisitor = self indentBody.
        aDefine variable visitBy: bodyVisitor.
        let body = aDefine body.
        body isTiny
            ifTrue: { bodyVisitor print: " "}
            ifFalse: { bodyVisitor newline }.
        bodyVisitor visitMaybeSuffixComment: body
                    followedBy: "!".
        last = #def!

    method _printModule: path
        self print: ("." join: path)!

    method visitModuleImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self newline.
        last = #import.
        self _visitEach: anImport body!

    method visitNameImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self println: ".{anImport name}".
        last = #import.
        self _visitEach: anImport body!

    method visitWildcardImport: anImport
        self print: "import ".
        anImport relative
            ifTrue: { self print: "." }.
        self _printModule: anImport module.
        self println: ".*".
        last = #import.
        self _visitEach: anImport body!

    method visitExternalRef: aRef
        self print: aRef module.
        self print: ".".
        self print: aRef name.
        last = #var!

    method visitLineComment: comment
        self print: "--".
        self print: comment comment.
        last = #comment!

    method visitBlockComment: comment
        let lines = comment comment.
        -- Inline blocks
        lines size is 1
            ifTrue: { self print: comment fence.
                      self print: lines first.
                      self print: comment fence.
                      return self }.
        -- Multiline blocks, normalizing them so that fences are
        -- on their own lines.
        let first = lines first == ""
                        ifTrue: { 2 }
                        ifFalse: { 1 }.
        let last = lines last == ""
                        ifTrue: { lines size - 1 }
                        ifFalse: { lines size }.
        self print: comment fence.
        first to: last
              do: { |i|
                    self newline.
                    self print: (lines at: i) }.
        self newline.
        self print: comment fence.
        last = #blockComment!

    method skipIfNotEmpty
        printed > 1
            ifTrue: { self skipline }!

    method _visitMethodSignature: signature
        let selector = signature selector.
        let spacer = selector isKeyword
                         ifTrue: { ": " }
                         ifFalse: { " " }.
        signature parameters isEmpty
            ifTrue: { self print: " ".
                      self print: selector name }
            ifFalse: { (selector name splitBy: ":" character)
                           with: signature parameters
                           do: { |part param|
                                 self print: " ".
                                 self print: part.
                                 self print: spacer.
                                 param visitBy: self } }.
        signature returnType is Any
            ifFalse: { self print: " -> ".
                       signature returnType visitBy: self }!


    method visitMethod: aMethod
        -- Debug println: "/pp method {aMethod signature selector}".
        aMethod comments
            ifNotEmpty: { self skipIfNotEmpty.
                          aMethod comments reversed
                              do: { |each|
                                    self newline.
                                    each visitBy: self }.
                          self skipline }.
        self newline.
        aMethod isRequired
            ifTrue: { self print: "required " }.
        aMethod isDirect
            ifTrue: { self print: "direct " }.
        self print: "method".
        self _visitMethodSignature: aMethod signature.
        aMethod isRequired
            ifFalse: { let bodyVisitor = self indentBody newline.
                       bodyVisitor visitMaybeSuffixComment: aMethod body
                                   followedBy: "!"
                                       -- no newline!
                     }.
        last = #method!

    method _maybeToplevelNewline
        (last == #def)
            ifTrue: { self skipline }.
        (last is False or: last == #comment)
            ifFalse: { self newline }!

    method visitClass: aClass
        -- Debug println: "/pp class {aClass name}".
        self _maybeToplevelNewline.
        self print: "class ".
        self print: aClass name.
        let slots = aClass slots.
        slots is False
            ifTrue: { self print: " < ".
                      self print: aClass superclass }
            ifFalse: { self print: " \{".
                       slots
                           ifNotEmpty: { self print: " ".
                                         aClass slots
                                             do: { |slot|
                                                   slot visitBy: self.
                                                   self print: " " }}.
                       self print: "}" }.
        self _visitTypeBody: aClass!

    method visitInterfaceRef: aRef
        self newline.
        self print: "is ".
        aRef name visitBy: self!

    method visitInterface: anInterface
        self _maybeToplevelNewline.
        self print: "interface ".
        self print: anInterface name.
        self _visitTypeBody: anInterface!

    method visitExtend: anExtend
        self _maybeToplevelNewline.
        self print: "extend ".
        self print: anExtend name.
        self _visitTypeBody: anExtend!

    method _visitGroup: group in: parent
        group
            do: { |each| each visitBy: self }.
        group
            ifNotEmpty: { self skipline }!

    method _visitTypeBody: aType
        -- Debug println: "/pp methods of {aType name}".
        let bodyVisitor = self indentBody.
        bodyVisitor _visitGroup: aType interfaces
                    in: self.
        bodyVisitor _visitGroup: (aType directMethods select: #isRequired)
                    in: self.
        bodyVisitor _visitGroup: (aType instanceMethods select: #isRequired)
                    in: self.
        let defs = (aType directMethods select: #isDefined)
                       concat: (aType instanceMethods select: #isDefined).
        defs
            do: { |def| def visitBy: bodyVisitor }
            interleaving: { bodyVisitor skipline }.
        bodyVisitor skipIfNotEmpty.
        self print: "end".
        last = #def!

end
