import .syntaxVisitor.SyntaxVisitor

class SyntaxPrinter { output indent printed blockStart suffixComment }
    is SyntaxVisitor

    direct method print: syntax to: output
        syntax visitBy: (self
                             output: output
                             indent: 0
                             printed: 0
                             blockStart: False
                             suffixComment: False)!

    method indentBody
        SyntaxPrinter
            output: output
            indent: indent + 4
            printed: printed
            blockStart: False
            suffixComment: False!

    method indentHere
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: False
            suffixComment: False!

    method indentBlock
        SyntaxPrinter
            output: output
            indent: printed
            printed: printed
            blockStart: True
            suffixComment: False!

    method newline
        output println: "".
        indent times: { output print: " " }.
        printed = indent!

    method handleSuffixComment
        suffixComment is False
            ifFalse: { self print: suffixComment.
                       suffixComment = False }!

    method print: string::String
        output print: string.
        printed = printed + string size!

    method println: string::String
        self print: string.
        self newline!

    method handleBlockStart
        blockStart
            ifTrue: { self newline.
                      blockStart = False }!

    method visitLiteral: aLiteral
        self print: aLiteral value toString!

    method visitSeq: aSeq
        self handleBlockStart.
        aSeq first visitBy: self.
        self print: ".".
        self handleSuffixComment.
        self newline.
        aSeq then visitBy: self!

    method visitReturn: aReturn
        self print: "return ".
        aReturn value visitBy: self!

    method visitPrefixComment: aComment
        self handleBlockStart.
        let valueVisitor = self indentHere.
        self print: "--{aComment comment}".
        valueVisitor newline.
        aComment value visitBy: valueVisitor!

    method visitSuffixComment: aComment
        self handleBlockStart.
        suffixComment not assert.
        suffixComment = " --{aComment comment}".
        aComment value visitBy: self!

    method visitPrefixMessage: aMessage
        self print: aMessage selector name.
        aMessage receiver visitBy: self!

    method visitUnaryMessage: aMessage
        aMessage receiver visitBy: self.
        self print: " ".
        self print: aMessage selector name!

    method visitBinaryMessage: aMessage
        aMessage receiver visitBy: self.
        self print: " ".
        self print: aMessage selector name.
        self print: " ".
        aMessage argument visitBy: self!

    method visitKeywordMessage: aMessage
        aMessage receiver visitBy: self.
        aMessage selector parts
            with: aMessage arguments
            do: { |part arg|
                  self print: " ".
                  self print: part.
                  self print: " ".
                  arg visitBy: self }!

    method visitIs: anIs
        anIs left visitBy: self.
        self print: " is ".
        anIs right visitBy: self!

    method visitLet: aLet
        self handleBlockStart.
        self print: "let ".
        self print: aLet name.
        self print: " = ".
        aLet value visitBy: self.
        self print: ".".
        self handleSuffixComment.
        self newline.
        aLet body visitBy: self!

    method visitSelf: aSelf
        self print: "self"!

    method visitVariable: aVariable
        self print: aVariable name!

    method visitAssign: anAssign
        self print: anAssign variable name.
        self print: " = ".
        anAssign value visitBy: self!

    method visitParens: aParens
        self print: "(".
        aParens body visitBy: self indentHere.
        self print: ")"!

    method visitBlock: aBlock
        self print: "\{ ".
        let bodyPrinter = self indentBlock.
        aBlock parameters
            ifNotEmpty: { self print: "|".
                          aBlock parameters
                              do: { |param| self print: param }
                              interleaving: { self print: " " }.
                          self print: "| " }.
        aBlock body visitBy: bodyPrinter.
        self print: " }"!

    method visitDefine: aDefine
        self print: "define ".
        let bodyVisitor = self indentBody.
        bodyVisitor println: aDefine name.
        aDefine body visitBy: bodyVisitor.
        self println: "!"!

    method visitMethod: aMethod
        self print: "method".
        let signature = aMethod signature.
        signature parameters isEmpty
            ifTrue: { self print: " ".
                      self print: signature selector name }
            ifFalse: { signature selector parts
                           withIndexDo: { |part index|
                                          self print: " ".
                                          self print: part.
                                          self print: " ".
                                          self print: (signature parameters at: index) } }.
        let bodyVisitor = self indentBody.
        bodyVisitor println: "".
        aMethod body visitBy: bodyVisitor.
        self print: "!".
        -- no newline!
        self handleSuffixComment!

    method visitClass: aClass
        self print: "class ".
        self print: aClass name.
        self print: " \{".
        aClass slots
            ifNotEmpty: { self print: " ".
                          aClass slots
                              do: { |slot|
                                    self print: slot.
                                    self print: " " }}.
        self print: "}".
        let methodVisitor = self indentBody.
        aClass directMethods
            do: { |m|
                  methodVisitor newline.
                  methodVisitor print: "direct ".
                  m visitBy: methodVisitor }.
        aClass methods
            do: { |m|
                  methodVisitor newline.
                  m visitBy: methodVisitor }.
        self newline.
        self print: "end".
        self handleSuffixComment.
        self newline!
end
