import .utils.Debug
import .transpiler.name.Name
import .astInterpreter.AstInterpreter
import .c3.C3Linearization

interface Ast
    is Object

    method isConstant
        False!
end

class AstBuiltin { global value }
    is Object

    method eval
        global hasValue
            ifTrue: { global eval }
            ifFalse: { global value: value }!

    method isBuiltin
        True!

    method ownInterfaces
        value interfaces collect: { |each| { value: each } }!

    method visitBy: visitor
        visitor visitBuiltin: self!

    method __addInterface: anInterface
        value __addInterface: anInterface!

    method __addDirectMethod: aDirectMethod
        value __addDirectMethod: aDirectMethod!

    method __addInstanceMethod: anInstanceMethod
        value __addInstanceMethod: anInstanceMethod!
end

interface AstToplevel
    is Object

    method isBuiltin
        False!

    method isDynamic
        False!
end

-- FIXME: Would it be better to have ImportDescription and
-- compose that into both AstImport and SyntaxImport?
class AstImport { syntax }
    is AstToplevel

    method defineIn: env
        let name = self name.
        name is False
            => { return env import: self module
                            relative: self relative }.
        name == "*"
            => { return env importAll: self module
                            relative: self relative }.
        env import: name
            from: self module
            relative: self relative
            source: syntax source!

    method name
        syntax name!

    method relative
        syntax relative!

    method module
        syntax module!

    method spec
        syntax spec!

    method toString
        "#<AstImport {self spec}>"!
end

class AstExtend { type interfaces directMethods instanceMethods }
    is AstToplevel

    method defineIn: env
        -- FIXME: This should use a mirror for host, or
        -- existing metaobjects for self-hosted classes.
        let target = type definition.
        -- KLUDGE: in case of adding interfaces to AstMethodHome
        -- we want to have the definition instead of the interface
        -- object. Consider this more fallout from lack of
        -- mirrors / reflective capabilities.
        (AstMethodHome includes: target)
            ifTrue: { interfaces
                          do: { |each| target __addInterface: each } }
            ifFalse: { interfaces
                          do: { |each| target __addInterface: each eval } }.
        directMethods do: { |each| target __addDirectMethod: each }.
        instanceMethods do: { |each| target __addInstanceMethod: each }.
        target!

    method toString
        "#<AstExtend {type name}>"!
end

interface AstMethodHome
    is Object

    required method _interfaces
    required method _directMethods
    required method _instanceMethods
    required method _directMethods: methods
    required method _instanceMethods: methods
    required method _readerMethods
    required method _allInterfaces
    required method _allInterfaces: interfaces

    method _maybeAddMethod: newMethod to: aDictionary
        let name = newMethod selector name.
        let oldMethod = aDictionary
                            at: name
                            ifNone: { aDictionary
                                          put: newMethod
                                          at: name.
                                      return True }.
        oldMethod isRequired
            ifTrue: { aDictionary
                          put: newMethod
                          at: name.
                      return True }.
        False!

    method __addDirectMethod: aMethod
        self _maybeAddMethod: aMethod to: self _directMethods!

    method __addInstanceMethod: aMethod
        self _maybeAddMethod: aMethod to: self _instanceMethods!

    method __addInterface: anInterface
        -- Order is important, so these must be kept in a list!
        let interfaces = self _interfaces.
        (interfaces contains: anInterface)
            ifTrue: { return False }.
        self _interfaces push: anInterface!

    method directMethods: methods
        (self _directMethods is False) assert: "Direct methods already set.".
        self _directMethods: (self _methodDictionary: methods)!

    method instanceMethods: methods
        (self _instanceMethods is False) assert: "Instance methods already set.".
        self _instanceMethods: (self _methodDictionary: methods)!

    method allInterfaces
        self _allInterfaces is False
            ifTrue: { let list = (C3Linearization allInterfaces: self) asList.
                      (list first is self) assert.
                      self _allInterfaces: list rest }.
        self _allInterfaces!

    method ownInterfaces
        self _interfaces!

    method interfaceDefinitions
        self allInterfaces collect: #definition as: Array!

    method interfaceGlobals
        self allInterfaces collect: #yourself as: Array!

    method interfaceObjects
        self allInterfaces collect: #eval as: Array!

    method _ownDirectMethods
        let dict = Dictionary new.
        self _collectMethods: self _directMethods
             _into: dict.
        dict!

    method ownDirectMethods
        self _ownDirectMethods values!

    method directMethods
        let dict = self _ownDirectMethods.
        self _collectFromInterfaces: #directMethods
            _into: dict.
        dict values!

    ---
    KLUDGE & FIXME: does not include reader methods, since bootstrap host
    class creation creates those automatically.
    ---
    method _ownInstanceMethods
        let dict = Dictionary new.
        self _collectMethods: self _instanceMethods
             _into: dict.
        dict!

    method ownInstanceMethods
        self _ownInstanceMethods values!

    method instanceMethods
        let dict = self _ownInstanceMethods.
        self _collectMethods: self _readerMethods
             _into: dict.
        self _collectFromInterfaces: #instanceMethods
            _into: dict.
        dict values!

    method _collectFromInterfaces: selector _into: dict
        self interfaceDefinitions :: Ordered
            do: { |anInterface|
                  self _collectMethods: (selector value: anInterface)
                       _into: dict }.
        dict!

    method _collectMethods: methods _into: dict
        methods
            do: { |aMethod|
                  dict at: aMethod selector name
                       ifNonePut: { aMethod } }!

    method _methodDictionary: methods
        Dictionary
            keys: (methods collect: { |each| each selector name })
            values: methods!
end

interface AstDefinition
    is AstToplevel

    method idOr: block
        self global idOr: block!

    method defineIn: env
        self global isDefined assert: "undefined global: {self}"!

    method definition
        self!
end

class AstDefine { global body frameSize }
    is AstDefinition

    direct method name: name
                  body: body
                  frameSize: frameSize
                  env: env
        let global = env global: name.
        let theDefine = self global: global
                             body: body
                             frameSize: frameSize.
        global define: theDefine.
        theDefine!

    method name
        global name!

    method isDynamic
        global isDynamic!

    method eval
        global hasValue
            ifTrue: { return global eval }.
        let result = AstInterpreter
                         evalDefine: body
                         frameSize: frameSize.
        global value: result!

    method toString
        "#<AstDefine {self name}>"!

    method visitBy: visitor
        visitor visitDefine: self!
end

class AstInterface { name _interfaces _directMethods _instanceMethods _allInterfaces
                     global _env }
    is AstDefinition
    is AstMethodHome

    direct method name: name
                  interfaces: interfaces
                  env: env
        let global = env global: name.
        let theInterface = self
                               name: name
                               _interfaces: interfaces
                               _directMethods: False
                               _instanceMethods: False
                               _allInterfaces: False
                               global: global
                               _env: env.
        global define: theInterface.
        theInterface!

    method eval
        global hasValue
            ifTrue: { return global eval }.
        { let result = Interface
                           new: name
                           interfaces: self interfaceObjects
                           directMethods: self ownDirectMethods
                           instanceMethods: self ownInstanceMethods.
          _env classes at: result put: self.
          global value: result }
        finally: { _env = False }!

    method _interfaces
        _interfaces!

    method _directMethods
        _directMethods!

    method _instanceMethods
        _instanceMethods!

    method _readerMethods
        []!

    method slots
        []!

    method _allInterfaces
        _allInterfaces!

    method _allInterfaces: list
        (_allInterfaces is False) assert: "Oops, _allInterfaces already set!".
        _allInterfaces = list asArray!

    method _directMethods: methods
        _directMethods = methods!

    method _instanceMethods: methods
        _instanceMethods = methods!

    method visitBy: visitor
        visitor visitInterfaceDefinition: self!

    method toString
        "#<AstInterface {name}>"!
end

class AstClass { name superclass _slots
                 _interfaces _directMethods _instanceMethods
                 _allInterfaces global _env }
    is AstDefinition
    is AstMethodHome

    direct method name: name
                  slots: slots
                  interfaces: interfaces
                  env: env
        let global = env global: name.
        let theClass = self
                           name: name
                           superclass: False
                           _slots: slots
                           _interfaces: interfaces
                           _directMethods: False
                           _instanceMethods: False
                           _allInterfaces: False
                           global: global
                           _env: env.
        global define: theClass.
        theClass!

    direct method name: name
                  superclass: superclass
                  interfaces: interfaces
                  env: env
        let global = env global: name.
        let theClass = self
                           name: name
                           superclass: superclass
                           _slots: False
                           _interfaces: ([superclass] append: interfaces)
                           _directMethods: False
                           _instanceMethods: False
                           _allInterfaces: False
                           global: global
                           _env: env.
        global define: theClass.
        theClass!

    method ifSuperclass: then ifNot: else
        superclass is False
            ifTrue: else
            ifFalse: then!

    method slots
        self
            ifSuperclass: { -- Debug println: "slots for {superclass definition}".
                            superclass definition slots }
            ifNot: { _slots }!

    method isBuiltin
        self
            ifSuperclass: { superclass definition isBuiltin }
            ifNot: { False }!

    method _interfaces
        _interfaces!

    method _directMethods
        _directMethods!

    method _instanceMethods
        _instanceMethods!

    method _allInterfaces
        _allInterfaces!

    method _allInterfaces: list
        (_allInterfaces is False) assert: "Oops, _allInterfaces already set!".
        _allInterfaces = list asArray!

    method _directMethods: methods
        _directMethods = methods!

    method _instanceMethods: methods
        _instanceMethods = methods!

    method markFunction
        self
            ifSuperclass: { superclass definition markFunction }
            ifNot: { "foo_mark_instance" }!

    method _readerMethods
        self _methodDictionary:
            ((self slots reject: { |each| each name startsWith: "_" })
                 collect: { |each|
                            AstReaderMethod home: self slot: each })!

    method eval
        global hasValue
            ifTrue: {
                return global eval }.
        { let result
              = Foolang isSelfHosted
                  ifTrue: { let layout = Layout new: (self slots size).
                            let metaclass = Class subclass: "{name} class"
                                                  interfaces: [] -- FIXME
                                                  methods: self ownDirectMethods asArray.
                            -- FIXME interfaces and methods below
                            metaclass new: name
                                      layout: layout
                                      interfaces: []
                                      methods: [] }
                  ifFalse: { Class
                                 new: name
                                 slots: (self slots
                                             collect: { |each|
                                                        { name: each name,
                                                          type: each type } }
                                             as: Array)
                                 interfaces: self interfaceObjects
                                 directMethods: self ownDirectMethods
                                 instanceMethods: self ownInstanceMethods }.
          _env classes put: self at: result.
          global value: result }
        finally: { _env = False }!

    method constructor
        self slots
            ifEmpty: { #new }
            ifNotEmpty: { Selector
                              intern: (StringOutput
                                        with: { |out|
                                                self slots
                                                    do: { |each|
                                                          out print: each name.
                                                          out print: ":" } }) }!

    method visitBy: visitor
        visitor visitClassDefinition: self!

    method toString
        "#<AstClass {name}>"!
end

class AstSlot { name index type }
    is Object

    method referenceUpwards: offset
        AstSlotRef slot: self!
end

class AstReaderMethod { home slot }
    method selector
        Selector intern: slot name!
    method signature
        []!
    method arity
        0!
    method frameSize
        0!
    method isBuiltin
        False!
    method isDirect
        False!
    method isRequired
        False!
    method returnType
        -- FIXME: Since setters check the type, the readers don't
        -- need to -- but it would be nice for senders to know the type.
        -- So returnType needs to be split into returnTypeCheck and
        -- declaredReturnType?
        Any!
    method body
        slot referenceUpwards: False!
    method printOn: stream
        stream print: "#<AstReaderMethod {home name}#{slot name}>"!
    method methodFunctionName
        Name mangleMethod: self!
    method methodHomeName
        Name mangleMethodClass: self!
end

class AstMethod { home selector argumentVariables returnType _body frameSize isDirect isRequired }
    is Object

    direct method home: home
                  selector: selector
                  argumentVariables: argumentVariables
                  returnType: returnType
                  isDirect: isDirect
                  isRequired: isRequired
        self
            home: home
            selector: selector
            argumentVariables: argumentVariables
            returnType: returnType
            _body: False
            frameSize: False
            isDirect: isDirect
            isRequired: isRequired!

    method methodFunctionName
        Name mangleMethod: self!

    method methodHomeName
        Name mangleMethodClass: self!

    method body: bodyVal
        isRequired
            ifTrue: { Error raise: "Required methods have no body: {selector}" }.
        _body is False
            ifFalse: { Error raise: "Method body already set: {selector}" }.
        _body = bodyVal!

    method body
        isRequired
            ifTrue: { Error raise: "{self} is a required method: it has no body." }.
        _body is False
            ifTrue: { Error raise: "Body of {self} is not set yet." }.
        _body!

    method frameSize: frameSizeVal
        frameSize is False assert: "frame size not set".
        frameSize = frameSizeVal!

    method addTemp
        let offset = frameSize.
        frameSize = frameSize + 1.
        offset!

    method name
        selector name!

    method invoke: arguments on: receiver
        AstInterpreter
            invokeMethod: self
            on: receiver
            with: arguments!

    method isDefined
        (_body is False) not!

    method signature
        argumentVariables collect: { |var| var type }!

    -- FIXME: duplicate methods below

    method arity
        argumentVariables size!

    method argumentCount
        argumentVariables size!

    method isBuiltin
        False!

    method printOn: stream
        self isDirect
            ifTrue: { stream print: "#<AstMethod {home name} {selector name}>" }
            ifFalse: { stream print: "#<AstMethod {home name}{selector}>" }!

    method toString
        StringOutput with: { |out| self printOn: out }!
end

interface AstNode
    is Ast

    method isImmediate
        False!

    required method visitBy: visitor
end

class AstArray { entries }
    is AstNode

    method visitBy: visitor
        visitor visitArray: self!

    method parts
        entries!
end

class AstTypecheck { value type }
    is AstNode

    method visitBy: visitor
        visitor visitTypecheck: self!

    method parts
        [value, type]!
end

class AstRecord { name slots values }
    is AstNode

    method visitBy: visitor
        visitor visitRecord: self!

    method parts
        [name, slots, values]!
end

class AstDictionary { entries }
    is AstNode

    method visitBy: visitor
        visitor visitDictionary: self!

    method parts
        entries!
end

define _Unevaluated { name: "<unevaluated>" }!
define _BeingEvaluated { name: "<being-evaluated>" }!
define _Evaluated { name: "<evaluated>" }!

interface AstGlobalVariable
    is AstNode

    direct method name: name
        self
            name: name
            _id: False
            _value: False
            _state: _Unevaluated
            _definition: False
            sources: List new!

    direct method name: name definition: definition
        self
            name: name
            _id: False
            _value: False
            _state: _Unevaluated
            _definition: definition
            sources: List new!

    method isBuiltin
        self isDefined
            ifTrue: { self _definition isBuiltin }
            ifFalse: { False }!

    method isImmediate
        True!

    method isUndefined
        self _definition is False!

    method isDefined
        self isUndefined not!

    method definition
        self assertDefined: True.
        self _definition!

    method define: definition
        self assertDefined: False.
        self _definition: definition.
        self isDefined assert: "invalid definition for global".
        definition!

    method assertDefined: wanted
        self isDefined is wanted
            ifFalse: { wanted
                           ifTrue: { Error raise: self noteUndefined }
                           ifFalse: { Error raise: "Global is already defined: {self name}" } }!

    method eval
        self _state is _Evaluated
            ifFalse: { self assertDefined: True.
                       self _state is _BeingEvaluated
                           ifTrue: { Error raise: "Cyclic definition: {self name}" }.
                       self _state: _BeingEvaluated.
                       self _definition eval.
                       self _state is _Evaluated
                           assert: "Evaluating definition did not set global" }.
        self _value!

    method value: value
        self hasValue not
            assert: "Cannot set value of global: already has value".
        self isDefined
            assert: "Cannot set value of global: undefined".
        self _value: value.
        self _state: _Evaluated.
        value!

    method hasValue
        self _state is _Evaluated!

    method isConstant
        True!

    method referenceUpwards: _offset
        self!

    method toString
        "#<{self classOf name} {self name} {self _state name} ({self _id})>"!

    method noteUndefined
        self sources
            ifEmpty: { return "Undefined variable: {self name} (no source)" }.
        let note = "Undefined variable: {self name}".
        "{note}\n{self sources first note: note}"!

    method warnIfUndefined
        self isUndefined
            ifTrue: { Output debug println: "\nWARNING: {self noteUndefined}" }!

    method withSource: sourceLocation
        self sources add: sourceLocation.
        self!
end

class AstGlobal { name::String _id _value _state _definition sources }
    is AstGlobalVariable

    method isDynamic
        False!

    method _id
        _id!

    method idOr: block
        -- A bit of a KLUDGE: builtin globals have definitions
        -- in main.c, and we want their names to be consistent.
        --
        -- See also: CompilerBuiltin#idOr:
        self isBuiltin
            ifTrue: { _id = "" }.
        _id is False
            ifTrue: { _id = block value }
            ifFalse: { _id }!

    method _value: new
        _value = new!

    method _value
        _value!

    method _state: new
        _state = new!

    method _state
        _state!

    method _definition: new
        _definition = new!

    method _definition
        _definition!

    method visitBy: visitor
        visitor visitGlobal: self!

    method ownInterfaces
        self definition ownInterfaces!

    method assign: value
        panic "Cannot assign to global! {name} = {value}"!

    -- KLUDGE: Currently types are either Any or AstGlobals. This is marginally
    -- than the previous mess, but still not nice.
    method typecheck: object
        self eval typecheck: object!

    method redefine: newDefinition
        self hasValue not
            assert: "Cannot redefine a materialized global".
        -- FIXME: This is a bit dodgy: the usage is currently for replacing
        -- host definitions of builtins in transpiler, but it seems to me that
        -- value should be updated too if it has been materialized...
        --
        -- (See #redefineUsing:)
        _definition = newDefinition.
        newDefinition global: self.
        newDefinition!

    method redefineUsing: global
        _definition = global definition.
        sources = global sources.
        global hasValue
            ifTrue: { self value: global eval }!

end

class AstDynamic { name::String _id _value _state _definition sources }
    is AstGlobalVariable

    method isDynamic
        True!

    method _id
        _id!

    method idOr: block
        _id is False
            ifTrue: { _id = block value }
            ifFalse: { _id }!

    method _definition
        _definition!

    method _definition: new
        _definition = new!

    method _value
        _value!

    method _value: new
        _value = new!

    method _state
        _state!

    method _state: new
        _state = new!

    method bind: newValue in: block
        let oldValue = self eval.
        _value = newValue.
        { block value }
            finally: { _value = oldValue }!

    method visitBy: visitor
        visitor visitDynamic: self!
end

class AstConstantRef { value source }
    is AstNode

    method isImmediate
        True!

    method visitBy: visitor
        visitor visitConstant: self!

    method isConstant
        True!

    method toString
        "<AstConstantRef {value}>"!
end

class AstIs { left right }
    is AstNode

    method visitBy: visitor
        visitor visitIs: self!
end

class AstSeq { first then }
    is AstNode

    method visitBy: visitor
        visitor visitSeq: self!
end

class AstReturn { from value }
    is AstNode

    method visitBy: visitor
        visitor visitReturn: self!
end

class AstPanic { value }
    is AstNode

    method visitBy: visitor
        visitor visitPanic: self!
end

class AstSend {
        receiver
        selector
        arguments
        source
    }
    is AstNode

    method visitBy: visitor
        visitor visitSend: self!

    method printOn: stream
        stream print: "#<AstSend {selector} to {receiver} with {arguments}>"!
end

class AstBlock { body argumentVariables returnType frameSize }
    is AstNode

    method selector
        self argumentCount is 0
            ifTrue: { return #value }.
        self argumentCount is 1
            ifTrue: { return #value: }.
        self argumentCount is 2
            ifTrue: { return #value:value: }.
        self argumentCount is 3
            ifTrue: { return #value:value:value: }.
        #apply:!

    method visitBy: visitor
        visitor visitBlock: self!

    method addTemp
        let offset = frameSize.
        frameSize = frameSize + 1.
        offset!

    method argumentCount
        argumentVariables size!
end

class AstSelfInstanceRef {}
    is AstNode

    method isImmediate
        True!

    method visitBy: visitor
        visitor visitSelfInstance: self!
end

class AstSelfClassRef {}
    is AstNode

    method isImmediate
        True!

    method visitBy: visitor
        visitor visitSelfClass: self!
end

class AstSlotRef { slot source }
    is AstNode

    method isImmediate
        True!

    direct method slot: slot
        self
            slot: slot
            source: False!

    method visitBy: visitor
        visitor visitSlotRef: self!

    method assign: value
        AstSlotSet
            slot: slot
            value: value!

    method withSource: sourceLocation
        (source is False) assert.
        source = sourceLocation.
        self!
end

class AstSlotSet { slot value }
    is AstNode

    method visitBy: visitor
        visitor visitSlotSet: self!
end

class AstBindLexical { variable value body }
    is AstNode

    method visitBy: visitor
        visitor visitBindLexical: self!
end

class AstBindDynamic { variable value body }
    is AstNode

    method visitBy: visitor
        visitor visitBindDynamic: self!
end

class AstLexicalRef { variable frameOffset::Integer source }
    is AstNode

    method isImmediate
        True!

    direct method variable: variable frameOffset: offset
        self
            variable: variable
            frameOffset: offset
            source: False!

    method withSource: newSource
        (source is False) assert.
        source = newSource.
        self!

    method visitBy: visitor
        visitor visitLexicalRef: self!

    method assign: value
        AstLexicalSet
            variable: variable
            frameOffset: frameOffset
            value: value!
end

class AstLexicalSet { variable frameOffset::Integer value }
    is AstNode

    method visitBy: visitor
        visitor visitLexicalSet: self!
end
