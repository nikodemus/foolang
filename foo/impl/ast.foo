import .utils.Debug
import .astInterpreter.AstInterpreter
import .c3.C3Linearization

interface Ast
    is Object

    method isConstant
        False!
end

class AstBuiltin { value }
    is Object

    method eval
        value!

    method isBuiltin
        True!

    method ownInterfaces
        value interfaces collect: { |each| { eval: each } }!

    method visitBy: visitor
        visitor visitBuiltin: self!

    method __addInterface: anInterface
        value __addInterface: anInterface!

    method __addDirectMethod: aDirectMethod
        value __addDirectMethod: aDirectMethod!

    method __addInstanceMethod: anInstanceMethod
        value __addInstanceMethod: anInstanceMethod!
end

interface AstDefinition
    is Object

    method eval
        Error raise: "{self classOf name}#eval -- should not happend!"!

    method defineIn: env
        Error raise: "{self classOf name}#defineIn: -- should not happen!"!

    method isBuiltin
        False!

    method isDynamic
        False!

    method allocGlobal
        let name = self name.
        self isDynamic
            ifTrue: { AstDynamic name: name }
            ifFalse: { AstGlobal name: name }!
end

class AstDefinitionList { list }
    is AstDefinition

    direct method new: list
        self
            list: list!

    method allocGlobal
        panic "No global for AstDefinitionList"!

    method defineIn: env
        list do: { |each| each defineIn: env }!
end

class AstDefine { name body frameSize isDynamic env }
    is AstDefinition

    direct method name: name
                  body: body
                  frameSize: frameSize
                  isDynamic: isDynamic
        self name: name
             body: body
             frameSize: frameSize
             isDynamic: isDynamic
             env: False!

    method defineIn: defEnv
        env = defEnv.
        defEnv define: name as: self!

    method eval
        AstInterpreter evalDefine: body frameSize: frameSize!

    method toString
        "#<AstDefine {self name}>"!

    method visitBy: visitor
        visitor visitDefine: self!
end

class AstImport { spec }
    is AstDefinition

    method defineIn: env
        self!

    method eval
        self!

    method toString
        "#<AstImport {spec}>"!
end

class AstExtend { type interfaces directMethods instanceMethods }
    is AstDefinition

    method defineIn: env
        -- FIXME: This should use a mirror for host, or
        -- existing metaobjects for self-hosted classes.
        --
        -- FIXME: Does this mean we should resolve name in env instead
        -- of the way it is now done?
        let target = type definition.
        interfaces do: { |each| target __addInterface: each }.
        directMethods do: { |each| target __addDirectMethod: each }.
        instanceMethods do: { |each| target __addInstanceMethod: each }.
        target!

    method toString
        "#<AstExtend {type name}>"!
end

interface AstMethodHome
    required method _interfaces
    required method _directMethods
    required method _instanceMethods
    required method _directMethods: methods
    required method _instanceMethods: methods
    required method _readerMethods
    required method _allInterfaces
    required method _allInterfaces: interfaces

    method __addInterface: anInterface
        -- Order is important, so these must be kept in a list!
        let interfaces = self _interfaces.
        (interfaces contains: anInterface)
            ifTrue: { -- Debug println: "FOO: {self name} already {anInterface}".
                      return False }.
        self _interfaces push: anInterface!

    method __addDirectMethod: aDirectMethod
        self _directMethods at: aDirectMethod selector name put: aDirectMethod!

    method __addInstanceMethod: anInstanceMethod
        self _instanceMethods at: anInstanceMethod selector name put: anInstanceMethod!

    method directMethods: methods
        (self _directMethods is False) assert: "Direct methods already set.".
        self _directMethods: (self _methodDictionary: methods)!

    method instanceMethods: methods
        (self _instanceMethods is False) assert: "Instance methods already set.".
        self _instanceMethods: (self _methodDictionary: methods)!

    method allInterfaces
        self _allInterfaces is False
            ifTrue: { let list = (C3Linearization allInterfaces: self) asList.
                      (list first is self) assert.
                      self _allInterfaces: list rest }.
        self _allInterfaces!

    method ownInterfaces
        self _interfaces!

    method interfaceDefinitions
        self allInterfaces collect: #definition!

    method interfaceGlobals
        self allInterfaces collect: #yourself!

    method interfaceObjects
        self allInterfaces collect: #eval!

    method _ownDirectMethods
        let dict = Dictionary new.
        self _collectMethods: self _directMethods
             _into: dict.
        dict!

    method ownDirectMethods
        self _ownDirectMethods values!

    method directMethods
        let dict = self _ownDirectMethods.
        self _collectFromInterfaces: #directMethods
            _into: dict.
        dict values!

    ---
    KLUDGE & FIXME: does not include reader methods, since bootstrap host
    class creation creates those automatically.
    ---
    method _ownInstanceMethods
        let dict = Dictionary new.
        self _collectMethods: self _instanceMethods
             _into: dict.
        dict!

    method ownInstanceMethods
        self _ownInstanceMethods values!

    method instanceMethods
        let dict = self _ownInstanceMethods.
        self _collectMethods: self _readerMethods
             _into: dict.
        self _collectFromInterfaces: #instanceMethods
            _into: dict.
        dict values!

    method _collectFromInterfaces: selector _into: dict
        self interfaceDefinitions :: Ordered
            do: { |anInterface|
                  self _collectMethods: (selector value: anInterface)
                       _into: dict }.
        dict!

    method _collectMethods: methods _into: dict
        methods
            do: { |aMethod|
                  dict at: aMethod selector name
                       ifNonePut: { aMethod } }!

    method _methodDictionary: methods
        Dictionary
            keys: (methods collect: { |each| each selector name })
            values: methods!
end

class AstInterface { name _interfaces _directMethods _instanceMethods _allInterfaces }
    is AstDefinition
    is AstMethodHome

    direct method name: name
                  interfaces: interfaces
        self
            name: name
            _interfaces: interfaces
            _directMethods: False
            _instanceMethods: False
            _allInterfaces: False!

    method eval
        Interface
            new: name
            interfaces: self interfaceObjects asArray
            directMethods: self ownDirectMethods
            instanceMethods: self ownInstanceMethods!

    method _interfaces
        _interfaces!

    method _directMethods
        _directMethods!

    method _instanceMethods
        _instanceMethods!

    method _readerMethods
        []!

    method _allInterfaces
        _allInterfaces!

    method _allInterfaces: list
        (_allInterfaces is False) assert: "Oops, _allInterfaces already set!".
        _allInterfaces = list asArray!

    method _directMethods: methods
        _directMethods = methods!

    method _instanceMethods: methods
        _instanceMethods = methods!

    method defineIn: env
        env define: name as: self!

    method visitBy: visitor
        visitor visitInterfaceDefinition: self!

    method toString
        "#<AstInterface {name}>"!
end

class AstClass { name slots _interfaces _directMethods _instanceMethods _allInterfaces }
    is AstDefinition
    is AstMethodHome

    direct method name: name
                  slots: slots
                  interfaces: interfaces
        self
            name: name
            slots: slots
            _interfaces: interfaces
            _directMethods: False
            _instanceMethods: False
            _allInterfaces: False!

    method _interfaces
        _interfaces!

    method _directMethods
        _directMethods!

    method _instanceMethods
        _instanceMethods!

    method _allInterfaces
        _allInterfaces!

    method _allInterfaces: list
        (_allInterfaces is False) assert: "Oops, _allInterfaces already set!".
        _allInterfaces = list asArray!

    method _directMethods: methods
        _directMethods = methods!

    method _instanceMethods: methods
        _instanceMethods = methods!

    method markFunction
        "foo_mark_array"!

    method _readerMethods
        self _methodDictionary:
            ((slots reject: { |each| each name startsWith: "_" })
                 collect: { |each|
                            AstReaderMethod home: self slot: each })!

    method defineIn: env
        env define: name as: self!

    method eval
        -- Debug println: "class {name} is {self interfaceObjects}".
        Class
            new: name
            slots: (slots
                        collect: { |each|
                                     { name: each name,
                                       type: each type } }
                        as: Array)
            interfaces: self interfaceObjects asArray
            directMethods: self ownDirectMethods
            instanceMethods: self ownInstanceMethods!

    method constructor
        slots
            ifEmpty: { #new }
            ifNotEmpty: { Selector
                              new: (StringOutput
                                        with: { |out|
                                                slots do: { |each|
                                                            out print: each name.
                                                            out print: ":" } }) }!

    method visitBy: visitor
        visitor visitClassDefinition: self!

    method toString
        "#<AstClass {name}>"!
end

class AstSlot { name index type }
    is Object

    method referenceUpwards: offset
        AstSlotRef slot: self!
end

class AstReaderMethod { home slot }
    method selector
        Selector new: slot name!
    method signature
        []!
    method arity
        0!
    method frameSize
        0!
    method isBuiltin
        False!
    method isDirect
        False!
    method isRequired
        False!
    method returnType
        -- FIXME: Since setters check the type, the readers don't
        -- need to -- but it would be nice for senders to know the type.
        -- So returnType needs to be split into returnTypeCheck and
        -- declaredReturnType?
        Any!
    method body
        slot referenceUpwards: False!
    method printOn: stream
        stream print: "#<AstReaderMethod {home name}#{slot name}>"!
end

class AstMethod { home selector argumentVariables returnType _body frameSize isDirect isRequired }
    is Object

    direct method home: home
                  selector: selector
                  argumentVariables: argumentVariables
                  returnType: returnType
                  isDirect: isDirect
                  isRequired: isRequired
        self
            home: home
            selector: selector
            argumentVariables: argumentVariables
            returnType: returnType
            _body: False
            frameSize: False
            isDirect: isDirect
            isRequired: isRequired!

    method body: bodyVal
        isRequired
            ifTrue: { Error raise: "Required methods have no body: {selector}" }.
        _body is False
            ifFalse: { Error raise: "Method body already set: {selector}" }.
        _body = bodyVal!

    method body
        isRequired
            ifTrue: { Error raise: "{self} is a required method: it has no body." }.
        _body is False
            ifTrue: { Error raise: "Body of {self} is not set yet." }.
        _body!

    method frameSize: frameSizeVal
        frameSize is False assert: "frame size not set".
        frameSize = frameSizeVal!

    method addTemp
        let offset = frameSize.
        frameSize = frameSize + 1.
        offset!

    method name
        selector name!

    method invoke: arguments on: receiver
        AstInterpreter
            invokeMethod: self
            on: receiver
            with: arguments!

    method isDefined
        (_body is False) not!

    method signature
        argumentVariables collect: { |var| var type }!

    -- FIXME: duplicate methods below

    method arity
        argumentVariables size!

    method argumentCount
        argumentVariables size!

    method isBuiltin
        False!

    method printOn: stream
        self isDirect
            ifTrue: { stream print: "#<AstMethod {home name} {selector name}>" }
            ifFalse: { stream print: "#<AstMethod {home name}{selector}>" }!

    method toString
        StringOutput with: { |out| self printOn: out }!
end

interface AstNode
    is Ast

    required method visitBy: visitor
end

class AstComment { comment value source }
    is AstNode
    is AstDefinition

    method visitBy: visitor
        visitor visitComment: self!

    method defineIn: env
        value defineIn: env!

    method eval
        value eval!

    method parts
        [comment, value]!
end

class AstArray { entries }
    is AstNode

    method visitBy: visitor
        visitor visitArray: self!

    method parts
        entries!
end

class AstTypecheck { value type }
    is AstNode

    method visitBy: visitor
        visitor visitTypecheck: self!

    method parts
        [value, type]!
end

class AstRecord { name slots values }
    is AstNode

    method visitBy: visitor
        visitor visitRecord: self!

    method parts
        [name, slots, values]!
end

class AstDictionary { entries }
    is AstNode

    method visitBy: visitor
        visitor visitDictionary: self!

    method parts
        entries!
end

class AstValueMarker { string }
    is Object
    method toString
        string!
end

define AstUndefined AstValueMarker string: "<undefined>"!
define AstPending AstValueMarker string: "<pending>"!
define AstInProgress AstValueMarker string: "<in-progress>"!

interface AstGlobalVariable
    is AstNode

    direct method name: name
        -- Debug println: "{self name}#name: {name}".
        self
            name: name
            _value: AstUndefined
            _definition: False
            sources: List new!

    direct method name: name definition: definition
        -- Debug println: "{self name}#name: {name} (defined)".
        self
            name: name
            _value: AstPending
            _definition: definition
            sources: List new!

    method isUndefined
        self _definition is False!

    method isDefined
        self isUndefined not!

    method definition
        self assertDefined: True.
        self _definition!

    method define: definition
        -- Debug println: "AstGlobalVariable#define: {name}".
        self assertDefined: False.
        self _value: AstPending.
        self _definition: definition.
        self isDefined assert!

    method assertDefined: wanted
        self isDefined is wanted
            ifFalse: { wanted
                           ifTrue: { Error raise: "Undefined global in AST: {self name}" }
                           ifFalse: { Error raise: "Global is already defined: {self name}" } }!

    method value
        self assertDefined: True.
        self _value is AstInProgress
            ifTrue: { Error raise: "Cyclic definition: {self name}" }.
        self _value is AstPending
            ifTrue: { self _value: AstInProgress.
                      self _value: self _definition eval }.
        self _value!

    method hasValue
        self _value is AstUndefined
            ifTrue: { return False }.
        self _value is AstInProgress
            ifTrue: { return False }.
        self _value is AstPending
            ifTrue: { return False }.
        return True!

    method isConstant
        True!

    method referenceUpwards: _offset
        self!

    method toString
        "#<{self classOf name} {self name}: {self _info}>"!

    method _info
        self isUndefined
            ifTrue: { "<undefined>" }.
        self _value!

    method warnIfUndefined
        self isUndefined
            ifTrue: { let note = "Undefined variable: {self name}".
                      (self sources isEmpty not) assert.
                      Output debug
                          println: "\nWARNING: {note}\n{self sources first note: note}" }!

    method withSource: sourceLocation
        self sources add: sourceLocation.
        self!
end

class AstGlobal { name::String _value _definition sources }
    is AstGlobalVariable

    method _value: new
        _value = new!

    method _value
        _value!

    method _definition: new
        _definition = new!

    method _definition
        _definition!

    method visitBy: visitor
        visitor visitGlobal: self!

    method isDynamic
        False!

    method ownInterfaces
        self definition ownInterfaces!

    method eval
        self value!

    method assign: value
        panic "Cannot assign to global! {name} = {value}"!

    -- KLUDGE: Currently types are either Any or AstGlobals. This is marginally
    -- than the previous mess, but still not nice.
    method typecheck: object
        self value typecheck: object!

    method redefine: newDefinition
        -- FIXME: This is a bit dodgy: the usage is currently for replacing
        -- host definitions of builtins in transpiler, but it seems to me that
        -- value should be updated too if it has been materialized...
        --
        -- (See #redefineUsing:)
        _definition = newDefinition!

    method redefineUsing: global
        _definition = global definition.
        sources = global sources.
        self hasValue
                ifTrue: { global hasValue
                              ifTrue: { _value = global value }
                              ifFalse: { _value =  AstPending } }!

end

class AstDynamic { name::String _value _definition sources }
    is AstGlobalVariable

    method _definition
        _definition!

    method _definition: new
        _definition = new!

    method _value
        _value!

    method _value: new
        _value = new!

    method bind: newValue in: block
        let oldValue = _value.
        _value = newValue.
        { block value }
            finally: { _value = oldValue }!

    method visitBy: visitor
        visitor visitDynamic: self!

    method isDynamic
        True!
end

class AstConstantRef { value env }
    is AstNode

    method visitBy: visitor
        visitor visitConstant: self!

    method isConstant
        True!

    method toString
        "<AstConstantRef {value}>"!
end

class AstIs { left right }
    is AstNode

    method visitBy: visitor
        visitor visitIs: self!
end

class AstSeq { first then }
    is AstNode

    method visitBy: visitor
        visitor visitSeq: self!
end

class AstReturn { from value }
    is AstNode

    method visitBy: visitor
        visitor visitReturn: self!
end

class AstPanic { value }
    is AstNode

    method visitBy: visitor
        visitor visitPanic: self!
end

class AstSend {
        receiver
        selector
        arguments
        source
    }
    is AstNode

    method visitBy: visitor
        visitor visitSend: self!

    method printOn: stream
        stream print: "#<AstSend {selector} to {receiver} with {arguments}>"!
end

class AstBlock { body argumentVariables returnType frameSize }
    is AstNode

    method selector
        self argumentCount is 0
            ifTrue: { return #value }.
        self argumentCount is 1
            ifTrue: { return #value: }.
        self argumentCount is 2
            ifTrue: { return #value:value: }.
        self argumentCount is 3
            ifTrue: { return #value:value:value: }.
        #apply:!

    method visitBy: visitor
        visitor visitBlock: self!

    method addTemp
        let offset = frameSize.
        frameSize = frameSize + 1.
        offset!

    method argumentCount
        argumentVariables size!
end

class AstSelfInstanceRef {}
    is AstNode

    method visitBy: visitor
        visitor visitSelfInstance: self!
end

class AstSelfClassRef {}
    is AstNode

    method visitBy: visitor
        visitor visitSelfClass: self!
end

class AstSlotRef { slot source }
    is AstNode

    direct method slot: slot
        self
            slot: slot
            source: False!

    method visitBy: visitor
        visitor visitSlotRef: self!

    method assign: value
        AstSlotSet
            slot: slot
            value: value!

    method withSource: sourceLocation
        (source is False) assert.
        source = sourceLocation.
        self!
end

class AstSlotSet { slot value }
    is AstNode

    method visitBy: visitor
        visitor visitSlotSet: self!
end

class AstBindLexical { variable value body }
    is AstNode

    method visitBy: visitor
        visitor visitBindLexical: self!
end

class AstBindDynamic { variable value body }
    is AstNode

    method visitBy: visitor
        visitor visitBindDynamic: self!
end

class AstLexicalRef { variable frameOffset::Integer source }
    is AstNode

    direct method variable: variable frameOffset: offset
        self
            variable: variable
            frameOffset: offset
            source: False!

    method withSource: newSource
        (source is False) assert.
        source = newSource.
        self!

    method visitBy: visitor
        visitor visitLexicalRef: self!

    method assign: value
        AstLexicalSet
            variable: variable
            frameOffset: frameOffset
            value: value!
end

class AstLexicalSet { variable frameOffset::Integer value }
    is AstNode

    method visitBy: visitor
        visitor visitLexicalSet: self!
end
