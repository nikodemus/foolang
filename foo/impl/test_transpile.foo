import .cTranspiler.CTranspiler
import .environment.Environment
import .parser.Parser
import .syntaxTranslator.SyntaxTranslator

import .utils.Debug

import lib.assert.Assert

import .test_self_hosting.TestSelfHosting
import .transpiler.test_name.TestName

class TestTranspileWrapper { system }
    method assert: assert
        TestTranspile
            assert: assert
            system: system!
end

class TestTranspile { assert system }
    is TestSelfHosting

    direct method system: system
        TestTranspileWrapper system: system!

    method transpile: string
        let env = Environment new load: string.
        let c = CTranspiler transpile: env globals values in: env.
        (system files path: "host/generated_selectors.h")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c selectors }.
        (system files path: "host/generated_blocks.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c blocks }.
        (system files path: "host/generated_main.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c main }.
        (system files path: "host/generated_classes.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c classes }.
        let tmpExe = "tmp_transpile_test.exe".
        let path = system currentDirectory path: tmpExe.
        path ifExists: #deleteFile.
        path exists not assert.
        -- KLUDGE: Windows CI host linker cannot find the sanitizer libraries,
        -- so we conditionalize on the environment and host.
        let sanitizerOptions
            = (((system getenv: "GITHUB_ACTION") is False) or: system isUnix)
                ifTrue: { "-fsanitize=address -fsanitize=undefined" }
                ifFalse: { "" }.
        system command: "clang -o {path} {sanitizerOptions} -fno-omit-frame-pointer -g -Wall --std=c17 host/main.c".
        path exists assert.
        system command: path toString!

    method transpile: string expect: output
        assert that: { self transpile: string }
               equals: output
               testing: "transpile -> {output}"!

    method testLiteralInteger
        self transpile: "class Main \{}
                             direct method run -- FIXME: : cmd in: sys
                                 123 debug!
                         end"
             expect: "#<Integer 123>"!

    method testBinary
        self transpile: "class Main \{}
                             direct method run
                                 (10 + 100 + 1) debug!
                         end"
             expect: "#<Integer 111>"!

    method testLet
        self transpile: "class Main \{}
                             direct method run
                                 let x = 21.
                                 let y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 42>"!

    method testKeyword
        self transpile: "class Main \{}
                             direct method run
                                 (self add: 40 and: 2) debug!
                             direct method add: x and: y
                                 x + y!
                        end"
             expect: "#<Integer 42>"!

    method testBlock
        self transpile: "class Main \{}
                             direct method run
                                 let x = 20.
                                 let b1 = \{ x + 11 * 2 }.
                                 let b2 = \{ let x = 0. b1 value }.
                                 let x = 1.
                                 b2 value debug!
                         end"
            expect: "#<Integer 42>"!

    method testSelf
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 42!
                         end"
            expect: "#<Integer 42>"!

    method testCtor
        self transpile: "class Main \{}
                             direct method run
                                 self new foo debug!
                             method foo
                                 42!
                         end"
            expect: "#<Integer 42>"!

    method testSlots
        self transpile: "class Main \{ x }
                             direct method run
                                 let instance = self x: 21.
                                 instance double.
                                 instance read debug!
                             method double
                                 x = x * 2!
                             method read
                                 x!
                         end"
            expect: "#<Integer 42>"!

    method testNonLocalReturn
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 self bar: \{ |x| return x }.
                                 13!
                             direct method bar: block
                                 block value: 42!
                         end"
            expect: "#<Integer 42>"!

end

class Main {}
    direct method run: cmd in: system
        let ok = True.
        [ TestName,
          (TestTranspile system: system) ]
        do: { |each|
              ok = ok and: (Assert runSuite: each in: system) passed }.
        ok
            ifTrue: { system exit }
            ifFalse: { system exit: 1 }!
end
