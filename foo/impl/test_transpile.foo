import .compiler
import .utils.Debug

import lib.assert.Assert

import .test_self_hosting.TestSelfHosting
import .transpiler.test_name.TestName

class TestTranspileWrapper { test system }
    method assert: assert
        test
            assert: assert
            system: system!
end

interface TranspilerTest
    is TestSuite

    direct method system: system
        TestTranspileWrapper test: self system: system!

    method prelude: prelude transpile: string
        let target = system currentDirectory / "tmp_transpile_test.exe".
        target ifExists: #deleteFile.
        target exists not
            assert: "executable cleared".
        (compiler.Compiler
             source: string
             target: target
             system: system
             prelude: prelude)
            compile.
        target exists
            assert: "executable created".
        let cmd = system command: target pathname.
        cmd stderr isEmpty
            ifFalse: { Debug println: "---stderr---".
                       Debug println: cmd stderr.
                       Debug println: "---" }.
        cmd!

    method transpile: string expect: output
        self prelude: False
             transpile: string
             ok: True
             expect: output!

    method transpile: string expectError: output
        self prelude: False
             transpile: string
             ok: False
             expect: output!

    method transpileWithError: string
        { let res = self prelude: False transpile: string.
          Output debug println: "WTF:\{string}\n==>\n{res}".
          return False }
            on: Error
            do: { |e|
                  return e description }.
        Error raise: "Expected transpiler error, but nothing happened:\n{string}"!

    method transpile: string expectCompilerError: output::String
        assert that: { self transpileWithError: string }
               equals: output
               testing: "transpile:expectCompilerError:"!

    method transpileWithPrelude: string expect: output
        self prelude: ["lang", "prelude"] asList
             transpile: string
             ok: True
             expect: output!

    method transpileWithPrelude: string check: block
        self prelude: ["lang", "prelude"] asList
             transpile: string
             ok: True
             check: block!

    method prelude: name transpile: string ok: maybe expect: output
        assert that: { let res = self prelude: name
                                      transpile: string.
                       [res ok, res stdout] }
               equals: [maybe, output]
               testing: "transpiler"!

    method prelude: name transpile: string ok: maybe check: block
        assert true: { let res = self prelude: name
                                      transpile: string.
                       block value: res }
               testing: "transpiler"!
end

class TestTranspileLet { assert system }
    is TranspilerTest

    method testLet
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x = 22.
                                 let y = 2.
                                 (x integerMul: y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssign
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x = 22.
                                 let y = 0.
                                 y = 2.
                                 (x integerMul: y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssignOuter
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let n = 0.
                                 \{ n = 1142 } value.
                                 n debug!
                        end"
             expect: "#<Integer 1142>"!
end

class TestTranspileLib { assert system }
    is TranspilerTest

    method checkLines: lines match: array
        lines with: array
              do: { |actual expected|
                    (actual startsWith: expected)
                        ifFalse: { system output println: "\ncheckLines: '{actual}' does not start with '{expected}'".
                                   return False } }
                        ifExhausted: { system output println: "\ncheckLines: size mismatch! {lines size} lines, expected {array size}".
                                       system output println: "got: {lines}".
                                       return False }.
        True!

    method test_Substitute
        self
            transpileWithPrelude:
                "import lib.test_substitute.*
                 import lib.assert

                 class Main \{}
                     direct method run: command in: system
                         TestSubstitute run: command in: system!
                 end"
            check: { |res|
                     res ok
                         ifTrue: { self checkLines: (res stdout lines reject: #isEmpty)
                                        match: ["- test_Substitute_can_implement_interface",
                                                "- test_Substitute_returns_as_specified",
                                                "- test_Substitute_tracks_messages"] }
                        ifFalse: { False } }!
end

class TestTranspilePanic { assert system }
    is TranspilerTest

    method testPanic
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 panic \"Let's Panic You And Me!\"!
                         end"
            expectError: "PANIC: Let's Panic You And Me!
Backtrace:
  1: Main classOf#run:in:
"!
end

class TestTranspileCascade { assert system }
    is TranspilerTest

    method test_Compile_cascade
        self transpileWithPrelude:
            "class Main \{}
                 direct method run: command in: system
                     system output
                         print: (List new
                                      ; add: 1
                                      ; add: 2
                                      ; add: 3
                                      ; collect: \{ |each| each * 10 \}
                                        as: Array)!
            end"
            expect: "[10, 20, 30]"!
end

class TestTranspilePerformWith { assert system }
    is TranspilerTest

    method test
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self doop: 123 boop: 321!
                             direct method perform: selector with: args
                                 selector debug.
                                 args debug!
                         end"
            expect: "#<Selector doop:boop:>[#<Integer 123>, #<Integer 321>]"!
end

class TestTranspilePreludeTime { assert system }
    is TranspilerTest

    method testSystemClockTime
        self transpile: "import lang.time_ext
                         import lang.output_ext
                         import lang.integer_ext

                         class Main \{}
                             direct method run: command in: system
                                 let clock = system clock.
                                 let offset = Time user: 0.1
                                                   system: 0.1
                                                   real: 0.1.
                                 -- Easiest way to make sure t1 > t0 > 0.
                                 let t0 = clock time + offset.
                                 let t1 = t0 + offset.
                                 let delta = t1 - t0.
                                 (t1 > delta) debug!
                         end"
            expect: "#<Boolean True>"!
end

class TestTranspilePreludeClosure { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.closure_ext

                         class Main \{ x }
                             direct method run: command in: system
                                 (\{ 53 } cull: 123) debug.
                                 (\{ |x| x } cull: 312) debug!
                         end"
            expect: "#<Integer 53>#<Integer 312>"!
end

class TestTranspileDictionary { assert system }
    is TranspilerTest

    method test_Dictionary_remove_transpiled
        self transpile: "import lang.dictionary_target.Dictionary
                         import lang.output_ext
                         import lang.string
                         import lang.selector_target_ext

                         class Main \{}
                             direct method run: command in: system
                                 let dict = Dictionary new.
                                 dict at: 1 put: \"one\".
                                 dict at: 2 put: \"two\".
                                 dict remove: 1.
                                 system output print: dict!
                         end"
            expect: "\{ 2 -> \"two\" }"!

    method test_Dictionary_toString_transpiled
        self transpile: "import lang.dictionary_target.Dictionary
                         import lang.output_ext
                         import lang.string
                         import lang.selector_target_ext

                         class Main \{}
                             direct method run: command in: system
                                 let dict = Dictionary new.
                                 dict at: 1 put: \"one\".
                                 dict at: 2 put: \"two\".
                                 system output print: dict!
                         end"
            expect: "\{ 1 -> \"one\",
  2 -> \"two\" }"!

    method test_Dictionary_constructor
        self transpile: "import lang.dictionary_target.Dictionary
                         import lang.string
                         import lang.character_target_ext
                         import lang.selector_target_ext

                         class Main \{ out \}
                             direct method run: command in: system
                                 (self out: system output) run!
                             method run
                                 self value:
                                 \{ (self value: \"c\") -> (self value: \"1\"),
                                    (self value: \"b\") -> (self value: \"2\"),
                                    (self value: \"a\") -> (self value: \"3\") } toString!
                             method value: x
                                 out writeString: x.
                                 x!
                         end"
            expect: "c1b2a3\{ \"a\" -> \"3\",
  \"b\" -> \"2\",
  \"c\" -> \"1\" \}"!
end

class TestTranspilePreludeException { assert system }
    is TranspilerTest

    method test_Main_does_not_understand
        self transpile: "import lang.exception.*
                         import lang.selector_target_ext
                         import lang.object.Object

                         class Main \{\}
                             is Object
                             direct method run: command in: system
                                 self bang!
                         end"
            expectError: "PANIC: UNHANDLED ERROR: Main does not understand: #bang
Backtrace:
  6: FallbackHandler classOf#raise:
  5: Error#raise (DoesNotUnderstand)
  4: DoesNotUnderstand classOf#raise:with:on:source:context:
  3: DoesNotUnderstand classOf#raise:with:on:
  2: Object interface#perform:with: (Main classOf) #bang
  1: Main classOf#run:in:
"!

    method test_Class_does_not_understand
        self transpile: "import lang.exception.*
                         import lang.class_target_ext
                         import lang.selector_target_ext

                         class Main \{\}
                             is Object
                             direct method run: command in: system
                                 Class bang!
                         end"
            expectError: "PANIC: UNHANDLED ERROR: Class does not understand: #bang
Backtrace:
  6: FallbackHandler classOf#raise:
  5: Error#raise (DoesNotUnderstand)
  4: DoesNotUnderstand classOf#raise:with:on:source:context:
  3: DoesNotUnderstand classOf#raise:with:on:
  2: Object#perform:with: (Class) #bang
  1: Main classOf#run:in:
"!

    method testErrorRaise
        self transpile: "import lang.exception.*
                         import lang.closure_ext

                         class Main \{}
                             direct method run: command in: system
                                 \{ self bang }
                                     on: Error
                                     do: \{ 1 debug }.
                                 self bang!
                             direct method bang
                                 Error raise: \"Bang!\"!
                         end"
            expectError: "#<Integer 1>PANIC: UNHANDLED ERROR: Bang!
Backtrace:
  11: FallbackHandler classOf#raise:
  10: Handler#raise:
  9: Error#raise (SimpleError)
  8: SimpleError classOf#raise:
  7: Error interface#raise:
  6: Main classOf#bang
  4: Closure#value
  3: Error interface#withHandler:do:
  2: Block#on:do: (Closure)
  1: Main classOf#run:in:
"!

end

class TestTranspilePreludeFile { assert system }
    is TranspilerTest

    method testForAppend
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isAppend debug.
                                 f forAppend isAppend debug.
                                 f isAppend debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testForRead
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isRead debug.
                                 f forRead isRead debug.
                                 f isRead debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testForWrite
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isWrite debug.
                                 f forWrite isWrite debug.
                                 f isWrite debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testOpenBlock
        self transpile: "import lang.file_ext
                         class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"test.tmp\") file.
                                 f forWrite truncateExisting createOrOpen: \{ |s| s writeString: \"test ok\" }.
                                 f readString printOn: system output!
                         end"
            expect: "test ok"!

    method testTruncateExisting
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isTruncate debug.
                                 f truncateExisting isTruncate debug.
                                 f isTruncate debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!
end

class TestTranspilePreludeFilePath { assert system }
    is TranspilerTest

    method testExists
        self transpile: "import lang.filepath_ext
                         class Main \{}
                              direct method run: command in: system
                                  (system files / \"foo\")
                                      ifExists: \{ system output writeString: \"foo ok, \" }
                                      ifDoesNotExist: \{ system output writeString: \"no foo! \"}.
                                  (system files / \"nosuchthing\")
                                      ifExists: \{ system output writeString: \"nosuchthing exists!\" }
                                      ifDoesNotExist: \{ system output writeString: \"nosuchthing ok\"}!
                         end"
             expect: "foo ok, nosuchthing ok"!

    method testFile
        self transpile: "import lang.filepath_ext
                         class Main \{}
                             direct method run: command in: system
                                 (system files / \"README.md\") pathname printOn: system output!
                         end"
            expect: "README.md"!

    method testIsDirectory
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let foo = system files / \"foo\".
                                 let readme = system files / \"README.md\".
                                 foo isDirectory debug.
                                 readme isDirectory debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testIsFile
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let foo = system files / \"foo\".
                                 let readme = system files / \"README.md\".
                                 readme isFile debug.
                                 foo isFile debug!
                         end"
             expect: "#<Boolean True>#<Boolean False>"!

    method testToString
        self transpile: "import lang.filepath_ext
                         class Main \{}
                              direct method run: command in: system
                                  (system files / \"foo\") toString debug!
                         end"
             expect: "#<String foo>"!

end

class TestTranspilePreludeFileStream { assert system }
    is TranspilerTest

    method testRoundtrip
        self transpile: "class Main \{}
                             direct method run: command in: system
                                let test = (system files / \"test.tmp\").
                                let out = test file forWrite truncateExisting createOrOpen.
                                out writeString: \"This is\".
                                out close.
                                let out2 = test file forAppend createOrOpen.
                                out2 writeString: \" a test!\".
                                out2 close.
                                let in = test file forRead open.
                                system output writeString: in readString.
                                in offsetFromEnd: -8.
                                system output writeString: in readString.
                                in offset: 2.
                                in offsetFromHere: 2.
                                system output writeString: in readString.
                                in close.
                                test deleteFile!
                         end"
            expect: "This is a test! a test! is a test!"!


    method testSize
        self transpile: "import lang.filestream_ext
                         import lang.filepath_ext
                         import lang.file_ext
                         class Main \{}
                             direct method run: command in: system
                                 let size = (system files / \"data/132-bytes.txt\") forRead
                                     open: \{ |s| s size }.
                                 size debug!
                         end"
            expect: "#<Integer 132>"!
end

class TestTranspilePreludeFloat { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.float_ext

                         class Main \{}
                             direct method run: command in: system
                                 1.0 to: 2.0
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Float 1.0>#<Float 2.0>"!
end

class TestTranspilePreludeInteger { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.integer_ext

                         class Main \{}
                             direct method run: command in: system
                                 1 to: 3 do: \{ |i| i debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>#<Integer 3>"!
end

class TestTranspilePreludeInterval { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.interval.Interval
                         import lang.integer_ext
                         class Main \{}
                             direct method run: command in: system
                                 (Interval from: 1 to: 5 by: 2)
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Integer 1>#<Integer 3>#<Integer 5>"!
end

class TestTranspilePreludeIterable { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.iterable.*
                         import lang.integer_ext

                         class MyIterator \{ pos thing }
                             is Iterator
                             method nextIfNone: block
                                self hasNext
                                    ifTrue: \{ pos = pos integerAdd: 1.
                                               thing at: pos }
                                    ifFalse: block!
                             method hasNext
                                pos < thing size!
                         end

                         class MyIterable \{ a b c }
                             is Iterable
                             method iterator
                                 MyIterator pos: 0 thing: self!
                             method at: index
                                 index is 1 ifTrue: \{ return a }.
                                 index is 2 ifTrue: \{ return b }.
                                 index is 3 ifTrue: \{ return c }!
                             method size
                                 3!
                         end

                         class Main \{}
                             direct method run: command in: system
                                 (MyIterable a: 10 b: 20 c: 30)
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Integer 10>#<Integer 20>#<Integer 30>"!
end

class TestTranspilePreludeObject { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.object.Object

                         class Main \{ x }
                             is Object
                             direct method run: command in: system
                                 ((self x: 1) == (self x: 2)) debug.
                                 ((self x: 1) == (self x: 1)) debug!
                             method isEquivalent: other
                                 (self x is other x)!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!
end

class TestTranspilePreludeOutput { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.output_ext
                         import lang.integer_ext

                         class Main \{ x }
                             direct method run: command in: system
                                 system output println: \"Hello World!\".
                                 system output print: 42!
                         end"
            expect: "Hello World!\n42"!
end

class TestTranspilePreludeSelector { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.selector_target_ext

                         class Main \{}
                             direct method run: command in: system
                                 #foo isKeyword debug.
                                 (#foo:) isKeyword debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!
end

class TestTranspilePreludeString { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.string.*

                         class Main \{}
                             direct method run: command in: system
                                 (\" to \" join: [\"a\", \"b\", \"c\"]) debug!
                         end"
            expect: "#<String a to b to c>"!
end

class TestTranspilePreludeStringOutput { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.stringOutput.StringOutput

                         class Main \{}
                             direct method run: command in: system
                                 (StringOutput with: \{ |out|
                                                        out print: \"O\".
                                                        out print: \"k\".
                                                        out print: \"!\" })
                                     debug!
                         end"
            expect: "#<String Ok!>"!
end

class TestTranspilePreludeTest { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.testSuite.TestSuite
                         import lang.time_ext
                         import lang.selector_target_ext
                         class Main \{}
                             is TestSuite
                             direct method run: command in: system
                                 self new runTestsIn: system!
                             method test_a
                                 True!
                             method test_b
                                 True!
                         end"
            expect: "- test_a (0.0s)
- test_b (0.0s)
"!
end

class TestTranspileInterface { assert system }
    is TranspilerTest

    method testInterfaceDirect
        self transpile: "interface MyInterface
                             direct method boop
                                 self ding!
                             direct method ding
                                 42!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyInterface boop debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceInherited
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method boop
                                 self new!
                             method value
                                 _value!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceOverride
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self _value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method new
                                self _value: 100!
                             direct method boop
                                 self new!
                             method ding
                                 _value integerAdd: 1!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 101>"!

    method testInterfaceRequired
        self transpile: "interface MyInterface
                             required method foo
                             method bar
                                 self foo!
                         end
                         class MyClass \{}
                             is MyInterface
                             method foo
                                 4102!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass new bar debug!
                         end"
            expect: "#<Integer 4102>"!
end

class TestTranspileSend { assert system }
    is TranspilerTest

    method test_Send_keyword_keyword
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (self add: 40 and: 5) debug!
                             direct method add: x and: y
                                 x integerAdd: y!
                        end"
            expect: "#<Integer 45>"!

    method test_Send_eval_order
        self transpile: "class Main \{ out }
                             direct method run: command in: system
                                 (self out: system output) run!
                             method run
                                 (self say: \"1\" return: self)
                                    a: (self say: \"2\")
                                    b: (self say: \"3\")
                                    c: (self say: \"4\")!
                             method say: x
                                 self say: x return: x!
                             method say: x return: y
                                 out writeString: x.
                                 y!
                             method a: a b: b c: c
                                 False!
                       end"
            expect: "1234"!
end

class TestTranspileGlobals { assert system }
    is TranspilerTest

    method test_Define_global_with_private_slots
        self transpile: "class HasPrivates \{ _private1 _private2 }
                             direct method new
                                 self _private1: \"1\"
                                      _private2: \"2\"!
                             method toString
                                 \"a = \{_private1}, b = \{_private2\}\"!
                         end
                         define ThisHasPrivates HasPrivates new!
                         class Main \{\}
                             direct method run: command in: system
                                 system output
                                     writeString: ThisHasPrivates toString!
                         end"
            expect: "a = 1, b = 2"!

    method test_Define_global_dictionary
        self transpile: "import lang.dictionary_target.Dictionary
                         define Dict \{ \"a\" -> \"A\", \"b\" -> \"B\" \}!
                         class Main \{\}
                             direct method run: command in: system
                                 system output
                                     writeString: (Dict at: \"a\").
                                 system output
                                     writeString: (Dict at: \"b\")!
                         end"
            expect: "AB"!

    method test_Define_global_interface
        self transpile: "import lang.any.Any
                         define X Any!
                         class Main \{}
                             direct method run: command in: system
                                 system output writeString: X name!
                         end"
            expect: "Any"!

    method test_Define_global_array
        self transpile: "define MyArray [1,2,3]!
                         class Main \{}
                             direct method run: command in: system
                                 MyArray debug!
                         end"
            expect: "[#<Integer 1>, #<Integer 2>, #<Integer 3>]"!

    method test_Define_global_nested_array
        self transpile: "define MyArray [[1],[[1]],[[[1]]]]!
                         class Main \{}
                             direct method run: command in: system
                                 MyArray debug!
                         end"
            expect: "[[#<Integer 1>], [[#<Integer 1>]], [[[#<Integer 1>]]]]"!

    method test_Define_global_boolean
        self transpile: "define MyBoolean True!
                         class Main \{}
                             direct method run: command in: system
                                 MyBoolean debug!
                         end"
            expect: "#<Boolean True>"!

    method test_Define_global_class_instance
        self transpileWithPrelude:
            "class MyClass \{ x y }
                 method value
                     x integerAdd: y!
             end

             define MyValue MyClass x: 40 y: 1202!

             class Main \{}
                 direct method run: command in: system
                     MyValue value debug.
                     MyValue x debug!
             end"
                expect: "#<Integer 1242>#<Integer 40>"!

    method test_Define_depends_on_class_defined_after
        self transpile: "define A_Definition A_Class status: \"yes!\"!
                         class A_Class \{ status }
                             method ok status!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 system output
                                     writeString: (self ok: A_Definition)!
                             direct method ok: x
                                 x ok!
                         end"
            expect: "yes!"!

    method test_Define_global_float
        self transpile: "define MyFloat 12.34!
                         class Main \{}
                             direct method run: command in: system
                                 MyFloat debug!
                         end"
            expect: "#<Float 12.34>"!

    method test_Define_global_integer
        self transpile: "define MyInteger 1234!
                         class Main \{}
                             direct method run: command in: system
                                 MyInteger debug!
                         end"
            expect: "#<Integer 1234>"!

    method test_Define_global_selector
        self transpile: "define MySelector #foobar!

                         class Main \{}
                             direct method run: command in: system
                                 MySelector debug!
                         end"
            expect: "#<Selector foobar>"!

    method test_Define_global_string
        self transpile: "define MyString \"foobar\"!
                         class Main \{}
                             direct method run: command in: system
                                 MyString debug!
                         end"
            expect: "#<String foobar>"!

    method test_Undefined_variable
        self transpile: "class Main \{\}
                             direct method run: command in: system
                                 ThisIsUndefined bang!
                         end"
            expectCompilerError: "Undefined variable: ThisIsUndefined
001 class Main \{}
002                              direct method run: command in: system
003                                  ThisIsUndefined bang!
                                     ^^^^^^^^^^^^^^^ Undefined variable: ThisIsUndefined
004                          end
"!

    method test_Undefined_import
        self transpile: "import lang.list.ThisIsUndefinedToo
                         class Main \{\}
                             direct method run: command in: system
                                 ThisIsUndefinedToo bang!
                         end"
            expectCompilerError: "Undefined variable: ThisIsUndefinedToo
001 import lang.list.ThisIsUndefinedToo
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Undefined variable: ThisIsUndefinedToo
002                          class Main \{\}
003                              direct method run: command in: system
004                                  ThisIsUndefinedToo bang!
005                          end
"!

    method test_Undefined_external
        self transpile: "import lang.list
                         class Main \{\}
                             direct method run: command in: system
                                 list.ThisIsReallyUndefined bang!
                         end"
            expectCompilerError: "Undefined variable: ThisIsReallyUndefined
002                          class Main \{}
003                              direct method run: command in: system
004                                  list.ThisIsReallyUndefined bang!
                                          ^^^^^^^^^^^^^^^^^^^^^ Undefined variable: ThisIsReallyUndefined
005                          end
"!

    method test_Put_at_cannot_modify_global_nested_array
        self transpile: "define ThisIsStatic [1, [2], 3]!
                         class Main \{}
                             direct method run: command in: system
                                 let box = ThisIsStatic at: 2.
                                 box put: 0 at: 2.
                                 system output writeString: \"OOPS MODIFIED A GLOBAL!\"!
                         end"
            expectError: "PANIC: Cannot modify constant object!
Backtrace:
  2: Array#put:at:
  1: Main classOf#run:in:
"!

    method test_Put_at_cannot_modify_global_ByteArray
        self transpile: "define ThisIsStatic [ByteArray new: 1]!
                         class Main \{}
                             direct method run: command in: system
                                 let bytes :: ByteArray = ThisIsStatic at: 1.
                                 bytes put: 0 at: 1.
                                 system output writeString: \"OOPS MODIFIED A GLOBAL!\"!
                         end"
            expectError: "PANIC: Cannot modify constant object!
Backtrace:
  2: ByteArray#put:at:
  1: Main classOf#run:in:
"!

    method test_Cannot_modify_global_instances
        self transpile: "import lang.object.Object
                         class Counter \{ value }
                             method inc
                                 value = value integerAdd: 1!
                         end
                         define MyCounter
                             Counter value: 0!
                         class Main \{}
                             direct method run: command in: system
                                 MyCounter inc.
                                 system output writeString: \"OOPS MODIFIED A GLOBAL!\"!
                         end"
            expectError: "PANIC: Cannot modify constant object!
Backtrace:
  2: Counter#inc
  1: Main classOf#run:in:
"!

    method test_At_put_cannot_modify_global_nested_array
        self transpile: "define ThisIsStatic [[1], 2, 3]!
                         class Main \{}
                             direct method run: command in: system
                                 let box = ThisIsStatic at: 1.
                                 box at: 1 put: 0.
                                 system output writeString: \"OOPS MODIFIED A GLOBAL!\"!
                         end"
            expectError: "PANIC: Cannot modify constant object!
Backtrace:
  2: Array#at:put:
  1: Main classOf#run:in:
"!
end

class TestTranspileSelf { assert system }
    is TranspilerTest

    method testSelf
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 142!
                         end"
            expect: "#<Integer 142>"!

    method testSelfClass
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self new foo debug!
                             method foo
                                 Self bar!
                             direct method bar
                                 242!
                         end"
            expect: "#<Integer 242>"!
end

class TestTranspileSelfHosted { assert system }
    is TranspilerTest

    method test_Bad_import
        -- The uppercase Integer makes parser want to import
        -- the global integer defined in lang.foo, and module
        -- setup uses lang both as the root and as the file.
        -- It's not perfect, but it's semi-logical. See
        -- https://github.com/nikodemus/foolang/issues/674 for what
        -- future.
        self transpile: "import lang.Integer
                         class Main \{}
                             direct method run: command in: system
                                system exit!
                         end"
            expectCompilerError: (system isUnix
                                      ifTrue: { "Import error: file foo/lang/lang.foo does not exist." }
                                      ifFalse: { "Import error: file foo\\lang\\lang.foo does not exist." })!

    method test_Transpiled_Parser
        self transpileWithPrelude:
            "import impl.parser
             class Main \{\}
                direct method run: command in: system
                     let exprs = parser.Parser parseExpressions: \"123\".
                     system output print: exprs.
                     let defs = parser.Parser parseDefinitions:
\"
interface X
    method y
        42!
end
\".
                     system output print: defs!

             end"
                expect: "[#<SyntaxLiteral 123>][#<SyntaxInterface X>]"!

    method test_Transpiled_SyntaxPrinter
        self transpileWithPrelude:
            "import impl.syntaxPrinter
             import impl.syntax
             class Main \{\}
                 direct method run: command in: system
                     let tree = syntax.SyntaxBinary
                          receiver: (syntax.SyntaxLiteral value: 20)
                          selector: #+
                          argument: (syntax.SyntaxLiteral value: 22)
                          source: \"20+22\".
                      syntaxPrinter.SyntaxPrinter
                          print: tree
                          to: system output!
             end"
            expect: "20 + 22"!

    method test_Transpiled_evaluator
        self transpileWithPrelude:
            "import impl.environment.Environment
             class Main \{\}
                 direct method run: command in: system
                     let tests = [
                                    [[\"float-literal.test\"], \"float-literal.test\"],
                                    [[\"message-to-float.test\"], \"message-to-float.result\"],
                                    [[\"class-classOf.def\", \"class-classOf.test\"], \"class-classOf.result\"]
                                 ].
                     let root = system files / \"foo/tests/self-hosting\".
                     tests do: \{ |eachTest|
                                    let sources = eachTest first.
                                    let env = Environment new.
                                    sources butlast
                                        do: \{ |eachDef|
                                               env load: (root / eachDef) readString \}.
                                    let script = (root / sources last) readString trim.
                                    let res = (env eval: script) displayString.
                                    let expect = (root / eachTest second) readString trim.
                                    res == expect
                                        ifFalse: \{ Error raise: \"FROM \{sources} EXPECTED:
\{script}
  --->
\{expect displayString}
GOT:
\{res displayString}
\"} }.
                     system output print: #ok!
             end"
            expect: "#ok"!
end

class TestTranspileBoolean { assert system }
    is TranspilerTest

    method testBooleanLiteral
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 True debug.
                                 False debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testBooleanIfTrueIfFalse
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 True
                                     ifTrue: \{ 42 debug }
                                     ifFalse: \{ 13 debug }.
                                 False
                                     ifTrue: \{ 13 debug }
                                     ifFalse: \{ 42 debug }!
                         end"
            expect: "#<Integer 42>#<Integer 42>"!

    method testIs
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let b1 = { 123 }.
                                 let b2 = { 42 }.
                                 (b1 is b2) debug.
                                 (1 is b1) debug.
                                 (b1 is 1) debug.
                                 (1 is 2) debug.
                                 (1 is 1) debug.
                                 (b1 is b1) debug.
                                 (b2 is b2) debug!
                         end"
            expect: "#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean True>#<Boolean True>#<Boolean True>"!

    method testWhileFalse
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let n = 0.
                                 \{ n is 10 } whileFalse: \{ n = n integerAdd: 1 }.
                                 n debug!
                         end"
            expect: "#<Integer 10>"!

end

class TestTranspileBacktrace { assert system }
    is TranspilerTest

    method testBacktraceNoMethod
        self transpile: "interface Aux
                             direct method ok2
                                 self oops!
                         end
                         class Main \{}
                             is Aux
                             direct method run: command in: system
                                 self ok!
                             direct method ok
                                 self ok2!
                         end"
            -- This gets the "instance of ..." message because Main is
            -- not an object, so this is the panic from the runtime
            -- instead of a DoesNotUnderstand.
            expectError: "PANIC: Instances of Main classOf do not understand: #oops
Backtrace:
  3: Aux interface#ok2 (Main classOf)
  2: Main classOf#ok
  1: Main classOf#run:in:
"!
end

class TestTranspileClass { assert system }
    is TranspilerTest

    method test_Superclass_constructor_works
        self transpile:
            "import lang.output_ext
             import lang.integer_ext

             class MainClass \{ a b }
             end

             class MidClass < MainClass
             end

             class SubClass < MidClass
                method sum
                   self a + self b!
             end

             class Main \{\}
                 direct method run: command in: system
                     let x = SubClass a: 22 b: 20.
                     system output print: x sum!
             end
             "
              expect: "42"!

    method test_Superclass_methods_work
        self transpile:
            "import lang.output_ext
             import lang.integer_ext

             class MainClass \{ _a _b }
                 direct method a: a b: b
                    self _a: a _b: b!
                 method a
                    _a!
                 method b
                    _b!
             end

             class MidClass < MainClass
             end

             class SubClass < MidClass
                method sum
                   self a + self b!
             end

             class Main \{\}
                 direct method run: command in: system
                     let x = SubClass a: 22 b: 20.
                     system output print: x sum!
             end
             "
              expect: "42"!

    method test_Class_inheritance_creates_subtype
        self transpile:
            "import lang.output_ext
             import lang.boolean_ext

             class MainClass \{ a b }
             end

             class MidClass < MainClass
             end

             class SubClass < MidClass
             end

             class Main \{\}
                 direct method run: command in: system
                     let x = SubClass a: 22 b: 20.
                     system output
                          print: ((MainClass includes: x) and: (MidClass includes: x))!
             end
             "
             expect: "True"!

    method test_Instantiate_metaclass_at_runtime
        self transpile:
            "import lang.output_ext
             import lang.selector_target_ext

             class Main \{\}
                  direct method run: command in: system
                      let test = Class subclass: \"test class\"
                                       interfaces: []
                                       methods: [].
                      system output print: test name!
             end"
            expect: "test class"!

    method test_Instantiate_class_at_runtime
        self transpile:
            "import lang.output_ext
             import lang.selector_target_ext

             class MidClass < Class
                 method ping
                     #pong!
             end

             class MyMetaclass < MidClass
             end

             class Main \{\}
                  direct method run: command in: system
                      let test = MyMetaclass
                                     new: \"test class\"
                                     layout: Layout empty
                                     interfaces: []
                                     methods: [].
                      system output print: test ping!
             end"
            expect: "#pong"!

    method test_Runtime_class_default_methods
        self transpile:
            "import lang.output_ext
             import lang.array_target_ext
             import lang.selector_target_ext
             import lang.class_target_ext

             class Main \{\}
                  direct method run: command in: system
                      let myClass = Class
                                        new: \"MyTest\"
                                        slots: []
                                        interfaces: []
                                        directMethods: []
                                        instanceMethods: [].
                      system output println: myClass name.
                      system output println: myClass classOf name.
                      system output println: myClass classOf classOf name.
                      system output println: (myClass includes: myClass new)!
             end"
            expect: "MyTest
MyTest classOf
Class
True
"!

    method test_Runtime_interface_inheritance
        self transpile:
            "import lang.output_ext
             import lang.selector_target_ext

             interface MyInterface
                 direct method directPing
                     #directPingFromInterface!
                 method instancePing
                     #instancePingFromInterface!
             end

             class Main \{\}
                  direct method run: command in: system
                      let testMetaclass1
                        = Class
                            subclass: \"*TestMetaClass1\"
                            interfaces: [MyInterface classOf]
                            methods: [].
                      let testClass1
                       = testMetaclass1
                           new: \"*TestClass\"
                           layout: Layout empty
                           interfaces: []
                           methods: [].
                      system output println: testClass1 directPing.
                      let testMetaclass2
                        = Class
                            subclass: \"*TestMetaClass1\"
                            interfaces: [MyInterface]
                            methods: [].
                      let testClass2
                       = testMetaclass2
                           new: \"*TestClass\"
                           layout: Layout empty
                           interfaces: []
                           methods: [].
                      system output print: testClass2 instancePing!
             end"
            expect: "#directPingFromInterface
#instancePingFromInterface"!

    method test_Runtime_class_instances
        self transpile:
            "import lang.output_ext
             import lang.selector_target_ext
             import lang.array_target_ext

             class BlockMethod \{ selector block \}
                 method invoke: args on: receiver
                     block apply: ([receiver] append: args)!
             end

             class Main \{\}
                  direct method run: command in: system
                      self testSlotlessIn: system.
                      self testOneSlotIn: system.
                      self testThreeSlotsIn: system!

                  direct method testOneSlotIn: system
                      let layout = Layout new: 1.
                      let testMetaclass
                        = Class
                            subclass: \"*TestSlotsMetaclass\"
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: (#new:)
                                        block: \{ |r a|
                                                  layout makeInstanceOf: r
                                                         with: a })].
                      let testClass
                        = testMetaclass
                            new: \"*TestSlotsClass\"
                            layout: layout
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: #ping
                                        block: \{ |r|
                                                   [layout at: 1 in: r] })].
                      system output print: (testClass new: 123) ping!

                  direct method testThreeSlotsIn: system
                      let layout = Layout new: 3.
                      let testMetaclass
                        = Class
                            subclass: \"*TestSlotsMetaclass\"
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: (#a:b:c:)
                                        block: \{ |r a b c|
                                                  layout makeInstanceOf: r
                                                         with: a
                                                         with: b
                                                         with: c })].
                      let testClass
                        = testMetaclass
                            new: \"*TestSlotsClass\"
                            layout: layout
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: #ping
                                        block: \{ |r|
                                                  [layout at: 1 in: r,
                                                   layout at: 2 in: r,
                                                   layout at: 3 in: r] })].
                      system output print: (testClass a: 10 b: 20 c: 30) ping!

                  direct method testSlotlessIn: system
                      let layout = Layout empty.
                      let testMetaclass
                        = Class
                            subclass: \"*TestMetaclass\"
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: (#new)
                                        block: \{ |r|
                                                  layout makeInstanceOf: r })].
                      let testClass
                        = testMetaclass
                            new: \"*TestClass\"
                            layout: layout
                            interfaces: []
                            methods: [(BlockMethod
                                        selector: #ping
                                        block: \{ |r|
                                                  #pong })].
                      system output print: testClass new ping!
             end"
            expect: "#pong[123][10, 20, 30]"!

    method test_Object_methods_in_metaclass_work
        self transpile:
            "import lang.output_ext
             import lang.selector_target_ext
             import lang.boolean_ext
             import lang.array
             import lang.array_target_ext

             class BlockMethod \{ selector block \}
                 method invoke: args on: receiver
                     block apply: ([receiver] append: args)!
             end

             class Main \{\}
                  direct method run: command in: system
                      let metaclass = Class subclass: \"test metaclass\"
                                            interfaces: []
                                            methods: [(BlockMethod
                                                           selector: #ping
                                                           block: \{ |r| #pong \})].
                      let test = metaclass new: \"test class\"
                                           layout: Layout empty
                                           interfaces: []
                                           methods: [].
                      system output print: test ping!
             end"
            expect: "#pong"!

    method test_Basic_direct_method_send
        self transpile: "class MyClass \{}
                             direct method test
                                 123!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass test debug!
                         end"
            expect: "#<Integer 123>"!

    method test_Basic_class_instantiation
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self new foo debug!
                             method foo
                                 542!
                         end"
            expect: "#<Integer 542>"!

    method test_Basic_slot_access
        self transpile: "class Main \{ x }
                             direct method run: command in: system
                                 let instance = self x: 1021.
                                 instance double.
                                 instance read debug!
                             method double
                                 x = x integerMul: 2!
                             method read
                                 x!
                         end"
            expect: "#<Integer 2042>"!

    method test_Basic_prefix_method_send
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 -(self foo) debug!
                             direct method foo
                                 42!
                         end"
            expect: "#<Integer -42>"!

    method test_Basic_prefix_method_definition
        self transpile: "class Main \{}
                             direct method prefix-
                                -123!
                             direct method run: command in: system
                               (-self) debug!
                         end"
            expect: "#<Integer -123>"!
end

class TestTranspileByteArray { assert system }
    is TranspilerTest

    method testByteArray1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let bytes = ByteArray new: 3.
                                 bytes put: 0 at: 1.
                                 bytes put: 100 at: 2.
                                 bytes put: 200 at: 3.
                                 bytes debug!
                         end"
            expect: "#<ByteArray 0, 100, 200>"!
end

class TestTranspileFinally { assert system }
    is TranspilerTest

    method testBlockFinally1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \{ 1 debug } finally: \{ 2 debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>"!

    method testBlockFinally2
        self transpile: "class Main \{}
                             direct method test
                                 \{ return 1 } finally: \{ 2 debug }!
                             direct method run: command in: system
                                 self test debug!
                         end"
            expect: "#<Integer 2>#<Integer 1>"!

    method testBlockFinally3
        self transpile: "class Main \{}
                             direct method test
                                let x = 2.
                                self inner: \{ |y| \{ return y } finally: \{ x debug } }!
                             direct method run: command in: system
                                 self test debug!
                             direct method inner: block
                                 block value: 100!
                         end"
            expect: "#<Integer 2>#<Integer 100>"!
end

class TestTranspileRecord { assert system }
    is TranspilerTest

    method test_Record_equality_in_transpiler
        self transpile: "import lang.record_target_ext

                         class Main \{}
                             direct method run: command in: system
                                 let a1 = \{ foo: 42 }.
                                 let a2 = \{ foo: 42 }.
                                 let b = \{ bar: 42 }.
                                 let c = \{ foo: 42, bar: 42 }.
                                 (a1 == a2) debug.
                                 (a1 == b) debug.
                                 (a1 == b) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!
end

class TestTranspileReturn { assert system }
    is TranspilerTest

    method testNonLocalReturn
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 100 + (self bar: \{ |x| return x })!
                             direct method bar: block
                                 block value: 420!
                         end"
            expect: "#<Integer 420>"!
end

class TestTranspileSelector { assert system }
    is TranspilerTest

    method test
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 #foo debug.
                                 (#name sendTo: #bar with: []) debug!
                        end"
            expect: "#<Selector foo>#<String bar>"!
end

class TestTranspileIncludes { assert system }
    is TranspilerTest

    method testArrayIncludes
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (Array includes: [1, 2, 3]) debug.
                                (Array includes: 123) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!
end

class TestTranspileInteger { assert system }
    is TranspilerTest

    method testLiteralInteger
        self transpile: "class Main \{}
                             direct method run: command in: system -- FIXME: : cmd in: sys
                                 123 debug!
                         end"
             expect: "#<Integer 123>"!

    method testIntegerOps
        -- Instead of importing lang.integer_ext into N tests, we import a few more
        -- things and test all ops in one test. Somewhat Faster, since imports
        -- are SLOW at the moment.
        self transpile: "import lang.integer_ext
                         import lang.output_ext
                         import lang.record_target_ext
                         import lang.boolean_ext

                         class Main \{}
                             direct method run: command in: system
                                 system output print: \{
                                     add: (10 + 100 + 1),
                                     div: (20 / 2),
                                     eq1: (1 == 1),
                                     eq2: (1 == 2),
                                     gt1: (1 > 2),
                                     gt2: (2 > 1),
                                     gt3: (1 > 1),
                                     gte1: (1 >= 2),
                                     gte2: (2 >= 1),
                                     gte3: (1 >= 1),
                                     lt1: (1 < 2),
                                     lt2: (2 < 1),
                                     lt3: (1 < 1),
                                     lte1: (1 <= 2),
                                     lte2: (2 <= 1),
                                     lte3: (1 <= 1),
                                     mul: (10 * 100),
                                     sub: (20 - 2),
                                 \}!
                         end"
             expect: ("\{ add: 111, div: 10,
eq1: True, eq2: False,
gt1: False, gt2: True, gt3: False,
gte1: False, gte2: True, gte3: True,
lt1: True, lt2: False, lt3: False,
lte1: True, lte2: False, lte3: True,
mul: 1000, sub: 18 \}" replace: "\n" with: " ")!
end

class TestTranspileString { assert system }
    is TranspilerTest

    method testStringCodeAt
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (\"aaaxbbb\" codeAt: 4) debug!
                         end"
            expect: "#<Integer 120>"!

    method testStringLiterals
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \"foo\" debug.
                                 \"\" debug.
                                 \"\\\\\" debug!
                         end"
            expect: "#<String foo>#<String >#<String \\>"!

    method testStringEquivalent
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (\"foo\" isEquivalent: \"foo\") debug.
                                 (\"foo\" isEquivalent: \"Foo\") debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testStringFromTo
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 ((self string) from: 3 to: 5) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String bar>"!

    method testStringInterpolation1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let fourtytwo = 42.
                                 let q = 123.
                                 \"Answer is \{fourtytwo\}, right? \{q is 123\}!\" debug!
                         end"
            expect: "#<String Answer is 42, right? True!>"!

    method testStringInterpolation2
        self transpile: "class Main \{}
                             direct method string
                                 \"<string>\"!
                             direct method run: command in: system
                                 let note = \"<note>\".
                                 let parser = \{ syntaxTable: \{ where: \"<where>\" } }.
                                 \"\{note}: '\{self string}' in suffix position \{parser syntaxTable where}:\" debug!
                        end"
            expect: "#<String <note>: '<string>' in suffix position <where>:>"!

    method testStringFromToEmpty
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 ((self string) from: 3 to: 2) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String >"!

    method testStringSize
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self string size debug!
                             direct method string
                                 \"1234567890\"!
                         end"
            expect: "#<Integer 10>"!
end

class TestTranspileSystem { assert system }
    is TranspilerTest

    method test_System_getenv
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (system getenv: \"no such variable\") is False
                                     ifTrue: \{ system output writeString: \"undef, \" }.
                                 (String includes: (system getenv: \"PATH\"))
                                     ifTrue: \{ system output writeString: \"path\" }!
                        end"
            expect: "undef, path"!

    method testClock
        self transpile: "class Main \{}
                             -- Just a small smoketest
                             direct method run: command in: system
                                 let clock = system clock.
                                 let t0 = clock seconds.
                                 let n = 0.
                                 let t = clock seconds.
                                 \{ (t0 floatAdd: 0.1) floatLt: t }
                                     whileFalse: \{ clock sleep: 0.1.
                                                    t = clock seconds.
                                                    n = n integerAdd: 1 }.
                                 -- Sleeps may be short, but let's bet on 3
                                 -- consequtive sleeps not being short.
                                 (0 integerLt: n) debug.
                                 (n integerLte: 3) debug.
                                 (t floatLt: (t0 floatAdd: 1.0)) debug!
                          end"
            expect: "#<Boolean True>#<Boolean True>#<Boolean True>"!

    method testOutput
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 system output writeString: \"Hello!\"!
                         end"
            expect: "Hello!"!

    method test_System_input
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 system output writeString: system input classOf name!
                         end"
            expect: "Input"!

    method test_System_input_atEof
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 -- EOF isn't detected until a failed read, for better or worse
                                 system input readChar_onEof: \{ False }.
                                 let status = system input atEof
                                                  ifTrue: \{ \"eof!\" }
                                                  ifFalse: \{ \"good to go...\" }.
                                 system output writeString: status!
                         end"
            expect: "eof!"!

    method test_System_input_lines
        self transpile: "import lang.input_target_ext
                         class Main \{}
                             direct method run: command in: system
                                 system input
                                     redirect: (system files / \"data/lorem_ipsum.txt\")
                                                   file forRead.
                                 let result = system input lines size is 6
                                                 ifTrue: \{ \"ok\" }
                                                 ifFalse: \{ \"nope\" }.
                                 system output writeString: result!
                         end"
            expect: "ok"!

    method test_System_input_readline
        self transpile: "import lang.input_target_ext
                         class Main \{}
                             direct method run: command in: system
                                 system input
                                     redirect: (system files / \"data/lorem_ipsum.txt\")
                                                   file forRead.
                                 let line = system input readline.
                                 system output writeString: line!
                         end"
            expect: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"!

    method test_System_input_readline_long_line
        -- FIXME: This kind of jumping through the hoops to avoid loading
        -- full prelude saves ~5-10s from the test time, but takes effort.
        --
        -- Instead I should really make it so that I can load the prelude
        -- once, and keep it immutable. (Creating copies if extensions)
        -- are added later.
        --
        -- ...could even include it in the compiler, so that unless
        -- a specific prelude is requested, the built-in one is used.
        self transpile: "import lang.input_target_ext
                         class Main \{}
                             direct method run: command in: system
                                 system input
                                     redirect: (system files / \"data/1001-character-line.txt\")
                                                   file forRead.
                                 let result = (system input readline) size is 1001
                                                  ifTrue: \{ \"1001\" }
                                                  ifFalse: \{ \"nope\" }.
                                 system output writeString: result!
                         end"
            expect: "1001"!

    method test_Main_run_in_command_size
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 command size debug!
                         end"
            expect: "#<Integer 0>"!

    method testRandom
        self transpile: "class Main \{}
                            direct method run: command in: system
                                let a = system random integer.
                                let b = system random integer.
                                (a is b) debug!
                        end"
            expect: "#<Boolean False>"!

    method test_System_currentDirectory
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let path = system currentDirectory / \"foo/prelude.foo\".
                                 system output writeString: path pathname.
                                 path exists
                                     ifTrue: \{ system output writeString: \" ok!\" }!
                         end"
            expect: ".//foo/prelude.foo ok!"!
end

class TestTranspileDynamic { assert system }
    is TranspilerTest

    method testDynamicDefine
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 999>"!

    method testDynamicBindBinds
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 \{ let $MyVar = 1234.
                                    self foo debug } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>"!

    method testDynamicBindRestores
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 \{ let $MyVar = 1234.
                                    self foo } value debug.
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!

    method testDynamicBindRestoresOnUnwind
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 self bar debug.
                                 self foo debug!
                             direct method bar
                                 \{ let $MyVar = 1234.
                                    return self foo } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!
end

class TestTranspileExtend { assert system }
    is TranspilerTest

    method testExtend
        self transpile: "class MyClass \{}
                              method bar
                                42!
                         end
                         extend MyClass
                              method foo
                                  self bar integerMul: 2!
                         end
                         class Main \{}
                              direct method run: command in: system
                                  MyClass new foo debug!
                         end"
            expect: "#<Integer 84>"!

    method testExtendBuiltin
        self transpile: "extend Integer
                             method doopdoop
                                 1239812798!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 0 doopdoop debug!
                         end"
            expect: "#<Integer 1239812798>"!

    method testExtendInterface
        self transpile: "interface MyInterface
                         end
                         class MyClass \{}
                              is MyInterface
                              method bar
                                42!
                         end
                         extend MyInterface
                              method foo
                                  self bar integerMul: 2!
                         end
                         class Main \{}
                              direct method run: command in: system
                                  MyClass new foo debug!
                         end"
            expect: "#<Integer 84>"!
end

class TestTranspileTypecheck { assert system }
    is TranspilerTest

    method testIntegerValueOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.2::Integer) debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main classOf#run:in:
"!

    method testIntegerMethodArgOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo: 1.2!
                             direct method foo: x::Integer
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main classOf#foo:
  1: Main classOf#run:in:
"!

    method testIntegerBlockArgOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \{ |x::Integer| x debug } value: 1.2!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Closure#value:
  1: Main classOf#run:in:
"!

    method testInterfaceOops
        self transpile: "interface MyInterface
                         end
                         class Main \{}
                             direct method run: command in: system
                                 42 :: MyInterface value debug!
                         end"
            expectError: "PANIC: Type error! Wanted: MyInterface, got: Integer
Backtrace:
  1: Main classOf#run:in:
"!

    method testLetOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x :: Integer = 42.12.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main classOf#run:in:
"!

    method testAssignOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x :: Integer = 42.
                                 x = 12.23.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main classOf#run:in:
"!

    method testSlotTypeInitOops
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 42.42) x debug!
                             method x
                                 x!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main classOf#x:
  1: Main classOf#run:in:
"!

    method testSlotTypeAssignOops
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 0) frob debug!
                             method frob
                                 x = 42.123.
                                 x!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main#frob
  1: Main classOf#run:in:
"!

    method testMethodReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 42.42!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main classOf#foo
  1: Main classOf#run:in:
"!

    method testMethodNonLocalReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 self bar: \{ return 42.32 }!
                             direct method bar: block
                                 block value.
                                 return 0!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  4: Closure#value
  3: Main classOf#bar:
  2: Main classOf#foo
  1: Main classOf#run:in:
"!

    method testBlockReturnTypeOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (\{ |a| -> Integer a } value: 42) debug!
                         end"
            expect: "#<Integer 42>"!

    method testBlockReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (\{ |a| -> Integer a } value: 42.32) debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Closure#value:
  1: Main classOf#run:in:
"!

    method testClassTypeIncludes
        self transpile: "class A \{} end
                         class B \{} end

                         class Main \{}
                             direct method run: command in: system
                                 (A includes: (A new)) debug.
                                 (A includes: (B new)) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!
end

class Main {}
    direct method run: cmd in: system
        let tests = {
            "--backtrace" -> TestTranspileBacktrace,
            "--boolean" -> TestTranspileBoolean,
            "--byte-array" -> TestTranspileByteArray,
            "--cascade" -> TestTranspileCascade,
            "--class" -> TestTranspileClass,
            "--dictionary" -> TestTranspileDictionary,
            "--dynamic" -> TestTranspileDynamic,
            "--extend" -> TestTranspileExtend,
            "--finally" -> TestTranspileFinally,
            "--globals" -> TestTranspileGlobals,
            "--integer" -> TestTranspileInteger,
            "--includes" -> TestTranspileIncludes,
            "--interface" -> TestTranspileInterface,
            "--let" -> TestTranspileLet,
            "--lib" -> TestTranspileLib,
            "--panic" -> TestTranspilePanic,
            "--perform-with" -> TestTranspilePerformWith,
            "--prelude-closure" -> TestTranspilePreludeClosure,
            "--prelude-exception" -> TestTranspilePreludeException,
            "--prelude-file" -> TestTranspilePreludeFile,
            "--prelude-filepath" -> TestTranspilePreludeFilePath,
            "--prelude-filestream" -> TestTranspilePreludeFileStream,
            "--prelude-float" -> TestTranspilePreludeFloat,
            "--prelude-integer" -> TestTranspilePreludeInteger,
            "--prelude-interval" -> TestTranspilePreludeInterval,
            "--prelude-iterable" -> TestTranspilePreludeIterable,
            "--prelude-object" -> TestTranspilePreludeObject,
            "--prelude-output" -> TestTranspilePreludeOutput,
            "--prelude-selector" -> TestTranspilePreludeSelector,
            "--prelude-string" -> TestTranspilePreludeString,
            "--prelude-string-output" -> TestTranspilePreludeStringOutput,
            "--prelude-test" -> TestTranspilePreludeTest,
            "--prelude-time" -> TestTranspilePreludeTime,
            "--record" -> TestTranspileRecord,
            "--return" -> TestTranspileReturn,
            "--self" -> TestTranspileSelf,
            "--self-hosted" -> TestTranspileSelfHosted,
            "--selector" -> TestTranspileSelector,
            "--send" -> TestTranspileSend,
            "--string" -> TestTranspileString,
            "--system" -> TestTranspileSystem,
            "--typecheck" -> TestTranspileTypecheck
        }.
        let all = tests keys sort.
        cmd == []
            ifTrue: { cmd = all }.
        -- Trying to work around Linux CI hosts mysteriously crashing, presumably due to OOM
        -- killer, presumably due to bootstrap implementation leaking memory, presumably due
        -- to circular Rc chains somewhere.
        cmd == ["--fork-all"]
            ifTrue: { all
                          do: { |test|
                                let next = "cargo run -- foo/impl/test_transpile.foo --use=foo/lib -- {test}".
                                system output println: "TEST: {next}".
                                let command = system command: next.
                                system output println: "--test stdout--".
                                system output println: command stdout.
                                system output println: "--test stderr--".
                                system output println: command stderr.
                                command ok
                                    ifFalse: { system exit: 1 } }.
                      system exit }.
        cmd do: { |name|
                  Assert
                      runSuite: ((tests
                                      at: name
                                      ifNone: { Error raise: "Unknown test: {name}" })
                                     system: system)
                      in: system
                      onFailure: { system exit: 1 } }.
        system exit!
end
