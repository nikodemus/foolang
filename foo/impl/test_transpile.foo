import .cTranspiler.CTranspiler
import .environment.Environment
import .parser.Parser
import .syntaxTranslator.SyntaxTranslator

import .utils.Debug

import lib.assert.Assert

import .test_self_hosting.TestSelfHosting
import .transpiler.test_name.TestName

class TestTranspileWrapper { test system }
    method assert: assert
        test
            assert: assert
            system: system!
end

interface TranspilerTest
    is TestSuite

    direct method system: system
        TestTranspileWrapper test: self system: system!

    method transpile: string
        let env = Environment
                      modules: { "lang" -> system files / "foo/lang" }
                      asFileModules.
        let c = CTranspiler transpile: string in: env.
        (system files / "host/generated_selectors.h")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c selectors }.
        (system files / "host/generated_declarations.h")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c declarations }.
        (system files / "host/generated_constants.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c constants }.
        (system files / "host/generated_closures.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c closures }.
        (system files / "host/generated_main.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c main }.
        (system files / "host/generated_builtins.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c builtins }.
        let path = system currentDirectory / "tmp_transpile_test.exe".
        path ifExists: #deleteFile.
        path exists not assert: "executable cleared".
        -- KLUDGE: Windows CI host linker cannot find the sanitizer libraries,
        -- so we conditionalize on the environment and host.
        let sanitizerOptions
            = (((system getenv: "GITHUB_ACTION") is False) or: system isUnix)
                ifTrue: { "-fsanitize=address -fsanitize=undefined" }
                ifFalse: { "" }.
        let target
            = system isUnix
                ifTrue: { "unix" }
                ifFalse: { "windows" }.
        let buildCmd = "clang -o {path} {sanitizerOptions} -fno-omit-frame-pointer -g -Wall --std=c11 host/main.c host/system_{target}.c ext/dtoa.c".
        let build = system command: buildCmd.
        self _reportStderr: build.
        build ok
            ifFalse: { Error raise: "Build failed: {buildCmd}" }.
        path exists assert: "executable created".
        let exec = system command: path toString.
        self _reportStderr: exec!

    method _reportStderr: cmd
        cmd stderr isEmpty
            ifFalse: { Debug println: "---stderr---".
                       Debug println: cmd stderr.
                       Debug println: "---" }.
        cmd!

    method transpile: string expectError: output
        assert that: { let cmd = self transpile: string.
                       [cmd ok, cmd stdout] }
               equals: [False, output]
               testing: "transpiler"!

    method transpile: string expect: output
        assert that: { let res = self transpile: string.
                       [res ok, res stdout] }
               equals: [True, output]
               testing: "transpiler"!
end

class TestTranspileLet { assert system }
    is TranspilerTest

    method testLet
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x = 22.
                                 let y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssign
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x = 22.
                                 let y = 0.
                                 y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssignOuter
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let n = 0.
                                 \{ n = 1142 } value.
                                 n debug!
                        end"
             expect: "#<Integer 1142>"!
end

class TestTranspilePanic { assert system }
    is TranspilerTest

    method testPanic
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 panic \"Let's Panic You And Me!\"!
                         end"
            expectError: "PANIC: Let's Panic You And Me!
Backtrace:
  1: Main class#run:in:
"!
end

class TestTranspilePerformWith { assert system }
    is TranspilerTest

    method test
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self doop: 123 boop: 321!
                             direct method perform: selector with: args
                                 selector debug.
                                 args debug!
                         end"
            expect: "#<Selector doop:boop:>[#<Integer 123>, #<Integer 321>]"!
end

class TestTranspilePreludeAny { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.any.Any

                         class Main \{}
                             direct method run: command in: system
                                 (Any is Any) debug!
                         end"
            expect: "#<Boolean True>"!
end


class TestTranspilePreludeBoolean { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.boolean.*

                         class Main \{ x }
                             direct method run: command in: system
                                 True not debug.
                                 False not debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!


end

class TestTranspilePreludeCharacter { assert system }
    is TranspilerTest

    method testIsWhitespace
        self transpile: "import lang.character_ext
                         import lang.string -- for String#at:

                         class Main \{}
                             direct method run: command in: system
                                 let s = \" x \".
                                 1 to: s size
                                   do: \{ |index| (s at: index) isWhitespace debug }!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean True>"!
end

class TestTranspilePreludeTime { assert system }
    is TranspilerTest

    method testSystemClockTimes
        self transpile: "import lang.time
                         import lang.output
                         import lang.integer

                         class Main \{}
                             direct method run: command in: system
                                 let clock = system clock.
                                 let offset = Time user: 0.1
                                                   system: 0.1
                                                   real: 0.1.
                                 -- Easiest way to make sure t1 > t0 > 0.
                                 let t0 = clock times + offset.
                                 let t1 = t0 + offset.
                                 let delta = t1 - t0.
                                 (t1 > delta) debug!
                         end"
            expect: "#<Boolean True>"!
end

class TestTranspilePreludeWhole { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.prelude

                         class Main \{}
                             direct method run: command in: system
                                 system output print: \"ok\"!
                         end"
            expect: "ok"!
end

class TestTranspilePreludeClosure { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.closure.*

                         class Main \{ x }
                             direct method run: command in: system
                                 (\{ 53 } cull: 123) debug.
                                 (\{ |x| x } cull: 312) debug!
                         end"
            expect: "#<Integer 53>#<Integer 312>"!
end

class TestTranspilePreludeDictionary { assert system }
    is TranspilerTest

    method testRemove
        self transpile: "import lang.dictionary2.Dictionary
                         import lang.output
                         import lang.string

                         class Main \{}
                             direct method run: command in: system
                                 let dict = Dictionary new.
                                 dict at: 1 put: \"one\".
                                 dict at: 2 put: \"two\".
                                 dict remove: 1.
                                 system output print: dict!
                         end"
            expect: "\{ 2 -> \"two\" }"!

    method testToString
        self transpile: "import lang.dictionary2.Dictionary
                         import lang.output
                         import lang.string

                         class Main \{}
                             direct method run: command in: system
                                 let dict = Dictionary new.
                                 dict at: 1 put: \"one\".
                                 dict at: 2 put: \"two\".
                                 system output print: dict!
                         end"
            expect: "\{ 1 -> \"one\",
  2 -> \"two\" }"!
end

class TestTranspilePreludeException { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.exception.*
                         import lang.closure.* -- for #on:do:

                         class Main \{}
                             direct method run: command in: system
                                 \{ self bang }
                                     on: Error
                                     do: \{ 1 debug }.
                                 self bang!
                             direct method bang
                                 Error raise: \"Bang!\"!
                         end"
            -- FIXME: string interpolation!
            expectError: "#<Integer 1>PANIC: UNHANDLED ERROR: \{ex description}
Backtrace:
  11: FallbackHandler class#raise:
  10: Handler#raise:
  9: Error#raise (SimpleError)
  8: SimpleError class#raise:
  7: Error interface#raise:
  6: Main class#bang
  4: Closure#value
  3: Error interface#withHandler:do:
  2: Block#on:do: (Closure)
  1: Main class#run:in:
"!

end

class TestTranspilePreludeFile { assert system }
    is TranspilerTest

    method testForAppend
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isAppend debug.
                                 f forAppend isAppend debug.
                                 f isAppend debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testForRead
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isRead debug.
                                 f forRead isRead debug.
                                 f isRead debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testForWrite
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isWrite debug.
                                 f forWrite isWrite debug.
                                 f isWrite debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testOpenBlock
        self transpile: "import lang.file
                         class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"test.tmp\") file.
                                 f forWrite truncateExisting createOrOpen: \{ |s| s writeString: \"test ok\" }.
                                 f readString printOn: system output!
                         end"
            expect: "test ok"!

    method testTruncateExisting
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let f = (system files / \"new\") file.
                                 f isTruncate debug.
                                 f truncateExisting isTruncate debug.
                                 f isTruncate debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!
end

class TestTranspilePreludeFilePath { assert system }
    is TranspilerTest

    method testExists
        self transpile: "import lang.filepath
                         class Main \{}
                              direct method run: command in: system
                                  (system files / \"foo\")
                                      ifExists: \{ system output writeString: \"foo ok, \" }
                                      ifDoesNotExist: \{ system output writeString: \"no foo! \"}.
                                  (system files / \"nosuchthing\")
                                      ifExists: \{ system output writeString: \"nosuchthing exists!\" }
                                      ifDoesNotExist: \{ system output writeString: \"nosuchthing ok\"}!
                         end"
             expect: "foo ok, nosuchthing ok"!

    method testFile
        self transpile: "import lang.filepath
                         class Main \{}
                             direct method run: command in: system
                                 (system files / \"README.md\") pathname printOn: system output!
                         end"
            expect: "README.md"!

    method testIsDirectory
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let foo = system files / \"foo\".
                                 let readme = system files / \"README.md\".
                                 foo isDirectory debug.
                                 readme isDirectory debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testIsFile
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let foo = system files / \"foo\".
                                 let readme = system files / \"README.md\".
                                 readme isFile debug.
                                 foo isFile debug!
                         end"
             expect: "#<Boolean True>#<Boolean False>"!

    method testToString
        self transpile: "class Main \{}
                              direct method run: command in: system
                                  (system files / \"foo\") toString debug!
                         end"
             expect: "#<String foo>"!

end

class TestTranspilePreludeFileStream { assert system }
    is TranspilerTest

    method testRoundtrip
        self transpile: "class Main \{}
                             direct method run: command in: system
                                let test = (system files / \"test.tmp\").
                                let out = test file forWrite truncateExisting createOrOpen.
                                out writeString: \"This is\".
                                out close.
                                let out2 = test file forAppend createOrOpen.
                                out2 writeString: \" a test!\".
                                out2 close.
                                let in = test file forRead open.
                                system output writeString: in readString.
                                in offsetFromEnd: -8.
                                system output writeString: in readString.
                                in offset: 2.
                                in offsetFromHere: 2.
                                system output writeString: in readString.
                                in close.
                                test deleteFile!
                         end"
            expect: "This is a test! a test! is a test!"!


    method testSize
        self transpile: "import lang.filestream
                         import lang.filepath
                         import lang.file
                         class Main \{}
                             direct method run: command in: system
                                 let size = (system files / \"README.md\") forRead
                                     open: \{ |s| s size }.
                                 (size > 1000) debug.
                                 (size < 2000) debug!
                         end"
            expect: "#<Boolean True>#<Boolean True>"!
end

class TestTranspilePreludeFloat { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.float

                         class Main \{}
                             direct method run: command in: system
                                 1.0 to: 2.0
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Float 1.0>#<Float 2.0>"!
end

class TestTranspilePreludeInteger { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.integer

                         class Main \{}
                             direct method run: command in: system
                                 1 to: 3 do: \{ |i| i debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>#<Integer 3>"!
end

class TestTranspilePreludeInterval { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.interval.Interval
                         class Main \{}
                             direct method run: command in: system
                                 (Interval from: 1 to: 5 by: 2)
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Integer 1>#<Integer 3>#<Integer 5>"!
end

class TestTranspilePreludeIterable { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.iterable.*

                         class MyIterator \{ pos thing }
                             is Iterator
                             method nextIfNone: block
                                self hasNext
                                    ifTrue: \{ pos = pos + 1.
                                               thing at: pos }
                                    ifFalse: block!
                             method hasNext
                                pos < thing size!
                         end

                         class MyIterable \{ a b c }
                             is Iterable
                             method iterator
                                 MyIterator pos: 0 thing: self!
                             method at: index
                                 index is 1 ifTrue: \{ return a }.
                                 index is 2 ifTrue: \{ return b }.
                                 index is 3 ifTrue: \{ return c }!
                             method size
                                 3!
                         end

                         class Main \{}
                             direct method run: command in: system
                                 (MyIterable a: 10 b: 20 c: 30)
                                     do: \{ |each| each debug }!
                         end"
            expect: "#<Integer 10>#<Integer 20>#<Integer 30>"!
end

class TestTranspilePreludeObject { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.object.Object

                         class Main \{ x }
                             is Object
                             direct method run: command in: system
                                 ((self x: 1) == (self x: 2)) debug.
                                 ((self x: 1) == (self x: 1)) debug!
                             method isEquivalent: other
                                 (self x == other x)!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!
end

class TestTranspilePreludeOutput { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.output.Output
                         import lang.integer

                         class Main \{ x }
                             direct method run: command in: system
                                 system output println: \"Hello World!\".
                                 system output print: 42!
                         end"
            expect: "Hello World!\n42"!
end

class TestTranspilePreludeRecord { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.record_ext.*

                         class Main \{}
                             direct method run: command in: system
                                 let a1 = \{ foo: 42 }.
                                 let a2 = \{ foo: 42 }.
                                 let b = \{ bar: 42 }.
                                 let c = \{ foo: 42, bar: 42 }.
                                 (a1 == a2) debug.
                                 (a1 == b) debug.
                                 (a1 == b) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!
end

class TestTranspilePreludeSelector { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.selector_ext.*

                         class Main \{}
                             direct method run: command in: system
                                 #foo isKeyword debug.
                                 (#foo:) isKeyword debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!
end

class TestTranspilePreludeString { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.string.*

                         class Main \{}
                             direct method run: command in: system
                                 (\" to \" join: [\"a\", \"b\", \"c\"]) debug!
                         end"
            expect: "#<String a to b to c>"!
end

class TestTranspilePreludeStringOutput { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.stringOutput.StringOutput

                         class Main \{}
                             direct method run: command in: system
                                 (StringOutput with: \{ |out|
                                                        out print: \"O\".
                                                        out print: \"k\".
                                                        out print: \"!\" })
                                     debug!
                         end"
            expect: "#<String Ok!>"!
end

class TestTranspilePreludeTest { assert system }
    is TranspilerTest

    method test
        self transpile: "import lang.test
                         class Main \{}
                             is test.TestSuite
                             direct method run: command in: system
                                 self new runTests!
                             method test_a
                                 True!
                             method test_b
                                 True!
                         end"
            expect: "- test_a
- test_b
"!
end

class TestTranspileInterface { assert system }
    is TranspilerTest

    method testInterfaceDirect
        self transpile: "interface MyInterface
                             direct method boop
                                 self ding!
                             direct method ding
                                 42!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyInterface boop debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceInherited
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method boop
                                 self new!
                             method value
                                 _value!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceOverride
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self _value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method new
                                self _value: 100!
                             direct method boop
                                 self new!
                             method ding
                                 _value + 1!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 101>"!

    method testInterfaceRequired
        self transpile: "interface MyInterface
                             required method foo
                             method bar
                                 self foo!
                         end
                         class MyClass \{}
                             is MyInterface
                             method foo
                                 4102!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass new bar debug!
                         end"
            expect: "#<Integer 4102>"!
end

class TestTranspileKeyword { assert system }
    is TranspilerTest

    method testKeyword
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (self add: 40 and: 5) debug!
                             direct method add: x and: y
                                 x + y!
                        end"
            expect: "#<Integer 45>"!
end

class TestTranspileDefine { assert system }
    is TranspilerTest

    method testDefineArray1
        self transpile: "define MyArray [1,2,3]!
                         class Main \{}
                             direct method run: command in: system
                                 MyArray debug!
                         end"
            expect: "[#<Integer 1>, #<Integer 2>, #<Integer 3>]"!

    method testDefineArray2
        self transpile: "define MyArray [[1],[[1]],[[[1]]]]!
                         class Main \{}
                             direct method run: command in: system
                                 MyArray debug!
                         end"
            expect: "[[#<Integer 1>], [[#<Integer 1>]], [[[#<Integer 1>]]]]"!

    method testDefineBoolean
        self transpile: "define MyBoolean True!
                         class Main \{}
                             direct method run: command in: system
                                 MyBoolean debug!
                         end"
            expect: "#<Boolean True>"!

    method testDefineClassInstance
        self transpile: "class MyClass \{ x y }
                             method value
                                 x + y!
                         end

                         define MyValue MyClass x: 40 y: 1202!

                         class Main \{}
                             direct method run: command in: system
                                 MyValue value debug.
                                 MyValue x debug!
                         end"
            expect: "#<Integer 1242>#<Integer 40>"!

    method testDefineFloat
        self transpile: "define MyFloat 12.34!
                         class Main \{}
                             direct method run: command in: system
                                 MyFloat debug!
                         end"
            expect: "#<Float 12.34>"!

    method testDefineInteger
        self transpile: "define MyInteger 1234!
                         class Main \{}
                             direct method run: command in: system
                                 MyInteger debug!
                         end"
            expect: "#<Integer 1234>"!

    method testDefineRecord
        self transpile: "define MyRecord1 \{ foo: 42, bar: 123 }!
                         define MyRecord2 \{ bar: 128947, foo: 99 }!

                         class Main \{}
                             direct method run: command in: system
                                 MyRecord1 foo debug.
                                 MyRecord2 foo debug!
                         end"
            expect: "#<Integer 42>#<Integer 99>"!

    method testDefineSelector
        self transpile: "define MySelector #foobar!

                         class Main \{}
                             direct method run: command in: system
                                 MySelector debug!
                         end"
            expect: "#<Selector foobar>"!

    method testDefineString
        self transpile: "define MyString \"foobar\"!
                         class Main \{}
                             direct method run: command in: system
                                 MyString debug!
                         end"
            expect: "#<String foobar>"!
end

class TestTranspileBlock { assert system }
    is TranspilerTest

    method testValueValue
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (\{ |a b| a + b } value: 10 value: 30) debug!
                         end"
            expect: "#<Integer 40>"!

    method testBlockScope
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x = 200.
                                 let b1 = \{ x + 11 * 2 }.
                                 let b2 = \{ let x = 0. b1 value }.
                                 let x = 1.
                                 b2 value debug!
                         end"
            expect: "#<Integer 222>"!
end

class TestTranspileSelf { assert system }
    is TranspilerTest

    method testSelf
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 142!
                         end"
            expect: "#<Integer 142>"!

    method testSelfClass
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self new foo debug!
                             method foo
                                 Self bar!
                             direct method bar
                                 242!
                         end"
            expect: "#<Integer 242>"!
end

class TestTranspileBoolean { assert system }
    is TranspilerTest

    method testBooleanLiteral
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 True debug.
                                 False debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testBooleanIfTrueIfFalse
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 True
                                     ifTrue: \{ 42 debug }
                                     ifFalse: \{ 13 debug }.
                                 False
                                     ifTrue: \{ 13 debug }
                                     ifFalse: \{ 42 debug }!
                         end"
            expect: "#<Integer 42>#<Integer 42>"!

    method testIs
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let b1 = { 123 }.
                                 let b2 = { 42 }.
                                 (b1 is b2) debug.
                                 (1 is b1) debug.
                                 (b1 is 1) debug.
                                 (1 is 2) debug.
                                 (1 is 1) debug.
                                 (b1 is b1) debug.
                                 (b2 is b2) debug!
                         end"
            expect: "#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean True>#<Boolean True>#<Boolean True>"!

    method testWhileFalse
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let n = 0.
                                 \{ n is 10 } whileFalse: \{ n = n + 1 }.
                                 n debug!
                         end"
            expect: "#<Integer 10>"!

end

class TestTranspileArray { assert system }
    is TranspilerTest

    method testOfNewValue
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (Array of: Float new: 3 value: 12.3) debug!
                         end"
            expect: "[#<Float 12.3>, #<Float 12.3>, #<Float 12.3>]"!

    method testNewValue
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (Array new: 3 value: True) debug!
                         end"
            expect: "[#<Boolean True>, #<Boolean True>, #<Boolean True>]"!

    method testArrayCtor
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 [1, 2, 3] debug!
                         end"
            expect: "[#<Integer 1>, #<Integer 2>, #<Integer 3>]"!

    method testArraySize
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 [1, 2, 3] size debug.
                                 [] size debug!
                         end"
            expect: "#<Integer 3>#<Integer 0>"!

    method testArrayAt
        self transpile: "class Main \{}
                             direct method run: command in: system
                                ([1,2,3,999,5] at: 4) debug!
                         end"
            expect: "#<Integer 999>"!

    method testArrayAtPut
        self transpile: "class Main \{}
                             direct method run: command in: system
                                let a = [1,2,3,999,5].
                                (a at: 4) debug.
                                a at: 4 put: 42.
                                (a at: 4) debug!
                         end"
            expect: "#<Integer 999>#<Integer 42>"!

    method testArraySums
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (self sums: 10) debug!
                             direct method sum: n
                                 let array = Array new: n.
                                 1 to: n
                                   do: \{ |each|
                                         array at: each put: each * 2 }.
                                 let sum = 0.
                                 1 to: n
                                   do: \{ |each|
                                         sum = sum + (array at: each) }.
                                 sum!
                             direct method sums: n
                                n > 0
                                   ifTrue: \{ (self sum: n) + (self sums: n - 1) }
                                   ifFalse: \{ 0 }!
                         end"
            expect: "#<Integer 440>"!

end

class TestTranspileBacktrace { assert system }
    is TranspilerTest

    method testBacktraceNoMethod
        self transpile: "interface Aux
                             direct method ok2
                                 self oops!
                         end
                         class Main \{}
                             is Aux
                             direct method run: command in: system
                                 self ok!
                             direct method ok
                                 self ok2!
                         end"
            expectError: "PANIC: Main class does not understand: #oops
Backtrace:
  3: Aux interface#ok2 (Main class)
  2: Main class#ok
  1: Main class#run:in:
"!
end

class TestTranspileClass { assert system }
   is TranspilerTest

    method testMyClass
        self transpile: "class MyClass \{}
                             direct method test
                                 123!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass test debug!
                         end"
            expect: "#<Integer 123>"!

    method testCtor
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self new foo debug!
                             method foo
                                 542!
                         end"
            expect: "#<Integer 542>"!

    method testSlotReader
        self transpile: "class Main \{ x }
                             direct method run: command in: system
                                (self x: 129408) x debug!
                         end"
            expect: "#<Integer 129408>"!

    method testSlots
        self transpile: "class Main \{ x }
                             direct method run: command in: system
                                 let instance = self x: 1021.
                                 instance double.
                                 instance read debug!
                             method double
                                 x = x * 2!
                             method read
                                 x!
                         end"
            expect: "#<Integer 2042>"!

    method testPrefixMethod
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 -(self foo) debug!
                             direct method foo
                                 42!
                         end"
            expect: "#<Integer -42>"!

    method testPrefixMethodDefinition
        self transpile: "class Main \{}
                             direct method prefix-
                                -123!
                             direct method run: command in: system
                               (-self) debug!
                         end"
            expect: "#<Integer -123>"!
end

class TestTranspileByteArray { assert system }
    is TranspilerTest

    method testByteArray1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let bytes = ByteArray new: 3.
                                 bytes put: 0 at: 1.
                                 bytes put: 100 at: 2.
                                 bytes put: 200 at: 3.
                                 bytes debug!
                         end"
            expect: "#<ByteArray 0, 100, 200>"!
end

class TestTranspileFinally { assert system }
    is TranspilerTest

    method testBlockFinally1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \{ 1 debug } finally: \{ 2 debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>"!

    method testBlockFinally2
        self transpile: "class Main \{}
                             direct method test
                                 \{ return 1 } finally: \{ 2 debug }!
                             direct method run: command in: system
                                 self test debug!
                         end"
            expect: "#<Integer 2>#<Integer 1>"!

    method testBlockFinally3
        self transpile: "class Main \{}
                             direct method test
                                let x = 2.
                                self inner: \{ |y| \{ return y } finally: \{ x debug } }!
                             direct method run: command in: system
                                 self test debug!
                             direct method inner: block
                                 block value: 100!
                         end"
            expect: "#<Integer 2>#<Integer 100>"!
end

class TestTranspileRecord { assert system }
    is TranspilerTest

    method test
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let r = \{ foo: 42 }.
                                 r foo debug!
                        end"
            expect: "#<Integer 42>"!
end

class TestTranspileReturn { assert system }
    is TranspilerTest

    method testNonLocalReturn
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 100 + (self bar: \{ |x| return x })!
                             direct method bar: block
                                 block value: 420!
                         end"
            expect: "#<Integer 420>"!
end

class TestTranspileSelector { assert system }
    is TranspilerTest

    method test
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 #foo debug.
                                 (#name sendTo: #bar with: []) debug!
                        end"
            expect: "#<Selector foo>#<String bar>"!
end

class TestTranspileFloat { assert system }
    is TranspilerTest

    method testToString
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 [0.0 toString,
                                  2123.0 toString,
                                  -2.0 toString,
                                  0.01 toString,
                                  -0.01 toString] debug!
                         end"
            expect: "[#<String 0.0>, #<String 2123.0>, #<String -2.0>, #<String 0.01>, #<String -0.01>]"!

    method testFloatArithmetic1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 -(1.01) debug.
                                 (2.0 floatMul: 3.0) debug.
                                 ((1.0 floatAdd: 10.0) floatAdd: 0.1) debug.
                                 (10.0 floatSub: 0.1) debug!
                         end"
            expect: "#<Float -1.01>#<Float 6.0>#<Float 11.1>#<Float 9.9>"!

    method testFloatArithmetic2
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (8.0 floatDiv: 2.0) debug.
                                 (0.0 floatMul: 10.0) debug!
                         end"
            expect: "#<Float 4.0>#<Float 0.0>"!

    method testFloatEq
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 floatEq: 1.0) debug.
                                 (1.0 floatEq: 2.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testFloatIs
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 is 1.0) debug.
                                 (1.0 is 2.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testFloatGt
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 floatGt: 2.0) debug.
                                 (2.0 floatGt: 1.0) debug.
                                 (1.0 floatGt: 1.0) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testFloatGte
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 floatGte: 2.0) debug.
                                 (2.0 floatGte: 1.0) debug.
                                 (1.0 floatGte: 1.0) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean True>"!

    method testFloatLt
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 floatLt: 2.0) debug.
                                 (2.0 floatLt: 1.0) debug.
                                 (1.0 floatLt: 1.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!

    method testFloatLte
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.0 floatLte: 2.0) debug.
                                 (2.0 floatLte: 1.0) debug.
                                 (1.0 floatLte: 1.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean True>"!
end

class TestTranspileIncludes { assert system }
    is TranspilerTest

    method testArrayIncludes
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (Array includes: [1, 2, 3]) debug.
                                (Array includes: 123) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!
end

class TestTranspileInteger { assert system }
    is TranspilerTest

    method testLiteralInteger
        self transpile: "class Main \{}
                             direct method run: command in: system -- FIXME: : cmd in: sys
                                 123 debug!
                         end"
             expect: "#<Integer 123>"!

    method testIntegerAdd
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (10 + 100 + 1) debug!
                         end"
             expect: "#<Integer 111>"!

    method testIntegerMul
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (10 * 100) debug!
                         end"
             expect: "#<Integer 1000>"!

    method testIntegerDiv
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (20 / 2) debug!
                         end"
             expect: "#<Integer 10>"!

    method testIntegerSub
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (20 - 2) debug!
                         end"
             expect: "#<Integer 18>"!

    method testIntegerEquals
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1 == 2) debug.
                                 (1 == 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!

    method testIntegerGreaterThan
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1 > 2) debug.
                                 (2 > 1) debug.
                                 (1 > 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testIntegerGreaterThanOrEqual
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1 >= 2) debug.
                                 (2 >= 1) debug.
                                 (1 >= 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean True>"!

    method testIntegerLessThan
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1 < 2) debug.
                                 (2 < 1) debug.
                                 (1 < 1) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!

    method testIntegerLessThanOrEqual
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1 <= 2) debug.
                                 (2 <= 1) debug.
                                 (1 <= 1) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean True>"!
end

class TestTranspileString { assert system }
    is TranspilerTest

    method testStringCodeAt
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (\"aaaxbbb\" codeAt: 4) debug!
                         end"
            expect: "#<Integer 120>"!

    method testStringLiterals
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \"foo\" debug.
                                 \"\" debug.
                                 \"\\\\\" debug!
                         end"
            expect: "#<String foo>#<String >#<String \\>"!

    method testStringEquivalent
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (\"foo\" isEquivalent: \"foo\") debug.
                                 (\"foo\" isEquivalent: \"Foo\") debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testStringFromTo
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 ((self string) from: 3 to: 5) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String bar>"!

    method testStringInterpolation1
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let fourtytwo = 42.
                                 let q = 123.
                                 \"Answer is \{fourtytwo\}, right? \{q is 123\}!\" debug!
                         end"
            expect: "#<String Answer is 42, right? True!>"!

    method testStringInterpolation2
        self transpile: "class Main \{}
                             direct method string
                                 \"<string>\"!
                             direct method run: command in: system
                                 let note = \"<note>\".
                                 let parser = \{ syntaxTable: \{ where: \"<where>\" } }.
                                 \"\{note}: '\{self string}' in suffix position \{parser syntaxTable where}:\" debug!
                        end"
            expect: "#<String <note>: '<string>' in suffix position <where>:>"!

    method testStringFromToEmpty
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 ((self string) from: 3 to: 2) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String >"!

    method testStringSize
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self string size debug!
                             direct method string
                                 \"1234567890\"!
                         end"
            expect: "#<Integer 10>"!
end

class TestTranspileSystem { assert system }
    is TranspilerTest

    method testClock
        self transpile: "class Main \{}
                             -- Just a small smoketest
                             direct method run: command in: system
                                 let clock = system clock.
                                 let t0 = clock seconds.
                                 let n = 0.
                                 let t = clock seconds.
                                 \{ (t0 floatAdd: 0.1) floatLt: t }
                                     whileFalse: \{ clock sleep: 0.1.
                                                    t = clock seconds.
                                                    n = n integerAdd: 1 }.
                                 -- Sleeps may be short, but let's bet on 3
                                 -- consequtive sleeps not being short.
                                 (0 integerLt: n) debug.
                                 (n integerLte: 3) debug.
                                 (t floatLt: (t0 floatAdd: 1.0)) debug!
                          end"
            expect: "#<Boolean True>#<Boolean True>#<Boolean True>"!

    method testOutput
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 system output writeString: \"Hello!\"!
                         end"
             expect: "Hello!"!

    method testCommandArgs
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 command size debug!
                         end"
            expect: "#<Integer 1>"!

    method testRandom
        self transpile: "class Main \{}
                            direct method run: command in: system
                                let a = system random integer.
                                let b = system random integer.
                                (a is b) debug!
                        end"
            expect: "#<Boolean False>"!
end

class TestTranspileDynamic { assert system }
    is TranspilerTest

    method testDynamicDefine
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 999>"!

    method testDynamicBindBinds
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 \{ let $MyVar = 1234.
                                    self foo debug } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>"!

    method testDynamicBindRestores
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 \{ let $MyVar = 1234.
                                    self foo } value debug.
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!

    method testDynamicBindRestoresOnUnwind
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run: command in: system
                                 self bar debug.
                                 self foo debug!
                             direct method bar
                                 \{ let $MyVar = 1234.
                                    return self foo } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!
end

class TestTranspileExtend { assert system }
    is TranspilerTest

    method testExtend
        self transpile: "class MyClass \{}
                              method bar
                                42!
                         end
                         extend MyClass
                              method foo
                                  self bar * 2!
                         end
                         class Main \{}
                              direct method run: command in: system
                                  MyClass new foo debug!
                         end"
            expect: "#<Integer 84>"!

    method testExtendBuiltin
        self transpile: "extend Integer
                             method doopdoop
                                 1239812798!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 0 doopdoop debug!
                         end"
            expect: "#<Integer 1239812798>"!

    method testExtendInterface
        self transpile: "interface MyInterface
                         end
                         class MyClass \{}
                              is MyInterface
                              method bar
                                42!
                         end
                         extend MyInterface
                              method foo
                                  self bar * 2!
                         end
                         class Main \{}
                              direct method run: command in: system
                                  MyClass new foo debug!
                         end"
            expect: "#<Integer 84>"!
end

class TestTranspileTypecheck01 { assert system }
    is TranspilerTest

    method testIntegerValueOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (12::Integer) debug!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerValueOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 (1.2::Integer) debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main class#run:in:
"!
end

class TestTranspileTypecheck02 { assert system }
    is TranspilerTest

    method testIntegerMethodArgOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo: 12!
                             direct method foo: x::Integer
                                 x debug!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerMethodArgOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo: 1.2!
                             direct method foo: x::Integer
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main class#foo:
  1: Main class#run:in:
"!
end

class TestTranspileTypecheck03 { assert system }
    is TranspilerTest

    method testIntegerBlockArgOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \{ |x::Integer| x debug } value: 12!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerBlockArgOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 \{ |x::Integer| x debug } value: 1.2!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Closure#value:
  1: Main class#run:in:
"!
end

class TestTranspileTypecheck04 { assert system }
    is TranspilerTest

    method testInterfaceOk
        self transpile: "interface MyInterface
                         end
                         class MyClass \{}
                             is MyInterface
                             method value
                                 9!
                         end
                         class Main \{}
                             direct method run: command in: system
                                 MyClass new :: MyInterface value debug!
                         end"
            expect: "#<Integer 9>"!

    method testInterfaceOops
        self transpile: "interface MyInterface
                         end
                         class Main \{}
                             direct method run: command in: system
                                 42 :: MyInterface value debug!
                         end"
            expectError: "PANIC: Type error! Wanted: MyInterface, got: Integer
Backtrace:
  1: Main class#run:in:
"!

end

class TestTranspileTypecheck05 { assert system }
    is TranspilerTest

    method testLetOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x :: Integer = 42.
                                 x debug!
                         end"
            expect: "#<Integer 42>"!

    method testLetOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x :: Integer = 42.12.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main class#run:in:
"!
end

class TestTranspileTypecheck06 { assert system }
    is TranspilerTest

    method testAssignOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 let x :: Integer = 42.
                                 x = 12.23.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  1: Main class#run:in:
"!

    method testSlotTypeInitOk
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 42) x debug!
                             method x
                                 x!
                         end"
            expect: "#<Integer 42>"!

end

class TestTranspileTypecheck07 { assert system }
    is TranspilerTest

    method testSlotTypeInitOops
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 42.42) x debug!
                             method x
                                 x!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main class#x:
  1: Main class#run:in:
"!

    method testSlotTypeAssignOk
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 0) frob debug!
                             method frob
                                 x = 42.
                                 x!
                         end"
            expect: "#<Integer 42>"!

end

class TestTranspileTypecheck08 { assert system }
    is TranspilerTest

    method testSlotTypeAssignOops
        self transpile: "class Main \{ x::Integer }
                             direct method run: command in: system
                                 (self x: 0) frob debug!
                             method frob
                                 x = 42.123.
                                 x!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main#frob
  1: Main class#run:in:
"!

    method testMethodReturnTypeOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 42!
                         end"
            expect: "#<Integer 42>"!
end

class TestTranspileTypecheck09 { assert system }
    is TranspilerTest

    method testMethodReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 42.42!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Main class#foo
  1: Main class#run:in:
"!

    method testMethodNonLocalReturnTypeOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 self bar: \{ return 427 }!
                             direct method bar: block
                                 block value.
                                 return 0!
                         end"
            expect: "#<Integer 427>"!
end

class TestTranspileTypecheck10 { assert system }
    is TranspilerTest

    method testMethodNonLocalReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                 self foo debug!
                             direct method foo -> Integer
                                 self bar: \{ return 42.32 }!
                             direct method bar: block
                                 block value.
                                 return 0!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  4: Closure#value
  3: Main class#bar:
  2: Main class#foo
  1: Main class#run:in:
"!

    method testBlockReturnTypeOk
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (\{ |a| -> Integer a } value: 42) debug!
                         end"
            expect: "#<Integer 42>"!
end

class TestTranspileTypecheck11 { assert system }
    is TranspilerTest

    method testBlockReturnTypeOops
        self transpile: "class Main \{}
                             direct method run: command in: system
                                (\{ |a| -> Integer a } value: 42.32) debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float
Backtrace:
  2: Closure#value:
  1: Main class#run:in:
"!

    method testClassTypeIncludes
        self transpile: "class A \{} end
                         class B \{} end

                         class Main \{}
                             direct method run: command in: system
                                 (A includes: (A new)) debug.
                                 (A includes: (B new)) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!
end

class Main {}
    direct method run: cmd in: system
        let tests = {
            "--array" -> TestTranspileArray,
            "--backtrace" -> TestTranspileBacktrace,
            "--block" -> TestTranspileBlock,
            "--boolean" -> TestTranspileBoolean,
            "--byte-array" -> TestTranspileByteArray,
            "--class" -> TestTranspileClass,
            "--define" -> TestTranspileDefine,
            "--dynamic" -> TestTranspileDynamic,
            "--extend" -> TestTranspileExtend,
            "--finally" -> TestTranspileFinally,
            "--float" -> TestTranspileFloat,
            "--integer" -> TestTranspileInteger,
            "--includes" -> TestTranspileIncludes,
            "--interface" -> TestTranspileInterface,
            "--keyword" -> TestTranspileKeyword,
            "--let" -> TestTranspileLet,
            "--panic" -> TestTranspilePanic,
            "--perform-with" -> TestTranspilePerformWith,
            "--prelude-any" -> TestTranspilePreludeAny,
            "--prelude-boolean" -> TestTranspilePreludeBoolean,
            "--prelude-character" -> TestTranspilePreludeCharacter,
            "--prelude-closure" -> TestTranspilePreludeClosure,
            "--prelude-dictionary" -> TestTranspilePreludeDictionary,
            "--prelude-exception" -> TestTranspilePreludeException,
            "--prelude-file" -> TestTranspilePreludeFile,
            "--prelude-filepath" -> TestTranspilePreludeFilePath,
            "--prelude-filestream" -> TestTranspilePreludeFileStream,
            "--prelude-float" -> TestTranspilePreludeFloat,
            "--prelude-integer" -> TestTranspilePreludeInteger,
            "--prelude-interval" -> TestTranspilePreludeInterval,
            "--prelude-iterable" -> TestTranspilePreludeIterable,
            "--prelude-object" -> TestTranspilePreludeObject,
            "--prelude-output" -> TestTranspilePreludeOutput,
            "--prelude-record" -> TestTranspilePreludeRecord,
            "--prelude-selector" -> TestTranspilePreludeSelector,
            "--prelude-string" -> TestTranspilePreludeString,
            "--prelude-string-output" -> TestTranspilePreludeStringOutput,
            "--prelude-test" -> TestTranspilePreludeTest,
            "--prelude-time" -> TestTranspilePreludeTime,
            "--prelude-whole" -> TestTranspilePreludeWhole,
            "--record" -> TestTranspileRecord,
            "--return" -> TestTranspileReturn,
            "--self" -> TestTranspileSelf,
            "--selector" -> TestTranspileSelector,
            "--string" -> TestTranspileString,
            "--system" -> TestTranspileSystem,
            "--typecheck-01" -> TestTranspileTypecheck01,
            "--typecheck-02" -> TestTranspileTypecheck02,
            "--typecheck-03" -> TestTranspileTypecheck03,
            "--typecheck-04" -> TestTranspileTypecheck04,
            "--typecheck-05" -> TestTranspileTypecheck05,
            "--typecheck-06" -> TestTranspileTypecheck06,
            "--typecheck-07" -> TestTranspileTypecheck07,
            "--typecheck-08" -> TestTranspileTypecheck08,
            "--typecheck-09" -> TestTranspileTypecheck09,
            "--typecheck-10" -> TestTranspileTypecheck10,
            "--typecheck-11" -> TestTranspileTypecheck11
        }.
        let all = tests keys sort.
        cmd == []
            ifTrue: { cmd = all }.
        -- Trying to work around Linux CI hosts mysteriously crashing, presumably due to OOM
        -- killer, presumably due to bootstrap implementation leaking memory, presumably due
        -- to circular Rc chains somewhere.
        cmd == ["--fork-all"]
            ifTrue: { all
                          do: { |test|
                                let next = "cargo run -- foo/impl/test_transpile.foo --use=foo/lib -- {test}".
                                system output println: "TEST: {next}".
                                let command = system command: next.
                                system output println: "--test stdout--".
                                system output println: command stdout.
                                system output println: "--test stderr--".
                                system output println: command stderr.
                                command ok
                                    ifFalse: { system exit: 1 } }.
                      system exit }.
        cmd do: { |name|
                  Assert
                      runSuite: ((tests
                                      at: name
                                      ifNone: { Error raise: "Unknown test: {name}" })
                                     system: system)
                      in: system
                      onFailure: { system exit: 1 } }.
        system exit!
end
