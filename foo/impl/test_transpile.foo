import .cTranspiler.CTranspiler
import .environment.Environment
import .parser.Parser
import .syntaxTranslator.SyntaxTranslator

import .utils.Debug

import lib.assert.Assert

import .test_self_hosting.TestSelfHosting
import .transpiler.test_name.TestName

class TestTranspileWrapper { test system }
    method assert: assert
        test
            assert: assert
            system: system!
end

interface TranspilerTest
    is TestSuite

    direct method system: system
        TestTranspileWrapper test: self system: system!

    method transpile: string
        let env = Environment new load: string.
        let c = CTranspiler transpile: env globals values in: env.
        (system files path: "host/generated_selectors.h")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c selectors }.
        (system files path: "host/generated_constants.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c constants }.
        (system files path: "host/generated_blocks.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c blocks }.
        (system files path: "host/generated_main.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c main }.
        (system files path: "host/generated_classes.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c classes }.
        let tmpExe = "tmp_transpile_test.exe".
        let path = system currentDirectory path: tmpExe.
        path ifExists: #deleteFile.
        path exists not assert: "executable cleared".
        -- KLUDGE: Windows CI host linker cannot find the sanitizer libraries,
        -- so we conditionalize on the environment and host.
        let sanitizerOptions
            = (((system getenv: "GITHUB_ACTION") is False) or: system isUnix)
                ifTrue: { "-fsanitize=address -fsanitize=undefined" }
                ifFalse: { "" }.
        let buildCmd = "clang -o {path} {sanitizerOptions} -fno-omit-frame-pointer -g -Wall --std=c17 host/main.c".
                           let build = system command: buildCmd.
        self _reportStderr: build.
        build ok
            ifFalse: { Error raise: "Build failed: {buildCmd}" }.
        path exists assert: "executable created".
        let exec = system command: path toString.
        self _reportStderr: exec!

    method _reportStderr: cmd
        cmd stderr isEmpty
            ifFalse: { Debug println: "---stderr---".
                       Debug println: cmd stderr.
                       Debug println: "---" }.
        cmd!

    method transpile: string expectError: output
        assert that: { let cmd = self transpile: string.
                       [cmd ok, cmd stdout] }
               equals: [False, output]
               testing: "transpile error -> {output}"!

    method transpile: string expect: output
        assert that: { let res = self transpile: string.
                       [res ok, res stdout] }
               equals: [True, output]
               testing: "transpile -> {output}"!
end

class TestTranspileLet { assert system }
    is TranspilerTest

    method testLet
        self transpile: "class Main \{}
                             direct method run
                                 let x = 22.
                                 let y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssign
        self transpile: "class Main \{}
                             direct method run
                                 let x = 22.
                                 let y = 0.
                                 y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testLetAssignOuter
        self transpile: "class Main \{}
                             direct method run
                                 let n = 0.
                                 \{ n = 1142 } value.
                                 n debug!
                        end"
             expect: "#<Integer 1142>"!
end

class TestTranspileInterface { assert system }
    is TranspilerTest

    method testInterfaceDirect
        self transpile: "interface MyInterface
                             direct method boop
                                 self ding!
                             direct method ding
                                 42!
                         end
                         class Main \{}
                             direct method run
                                 MyInterface boop debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceInherited
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method boop
                                 self new!
                             method value
                                 _value!
                         end
                         class Main \{}
                             direct method run
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 42>"!

    method testInterfaceOverride
        self transpile: "interface MyInterface
                             direct method new
                                 self _value: 42!
                             method ding
                                 self value!
                         end
                         class MyClass \{ _value }
                             is MyInterface
                             direct method new
                                self _value: 100!
                             direct method boop
                                 self new!
                             method ding
                                 _value + 1!
                         end
                         class Main \{}
                             direct method run
                                 MyClass boop ding debug!
                         end"
            expect: "#<Integer 101>"!
end

class TestTranspileKeyword { assert system }
    is TranspilerTest

    method testKeyword
        self transpile: "class Main \{}
                             direct method run
                                 (self add: 40 and: 5) debug!
                             direct method add: x and: y
                                 x + y!
                        end"
            expect: "#<Integer 45>"!
end

class TestTranspileDefine { assert system }
    is TranspilerTest

    method testDefineInteger
        self transpile: "define MyInteger 1234!
                         class Main \{}
                             direct method run
                                 MyInteger debug!
                         end"
            expect: "#<Integer 1234>"!

    method testDefineFloat
        self transpile: "define MyFloat 12.34!
                         class Main \{}
                             direct method run
                                 MyFloat debug!
                         end"
            expect: "#<Float 12.340000>"!

    method testDefineString
        self transpile: "define MyString \"foobar\"!
                         class Main \{}
                             direct method run
                                 MyString debug!
                         end"
            expect: "#<String foobar>"!

    method testDefineBoolean
        self transpile: "define MyBoolean True!
                         class Main \{}
                             direct method run
                                 MyBoolean debug!
                         end"
            expect: "#<Boolean True>"!
end

class TestTranspileBlock { assert system }
    is TranspilerTest

    method testBlock
        self transpile: "class Main \{}
                             direct method run
                                 let x = 200.
                                 let b1 = \{ x + 11 * 2 }.
                                 let b2 = \{ let x = 0. b1 value }.
                                 let x = 1.
                                 b2 value debug!
                         end"
            expect: "#<Integer 222>"!
end

class TestTranspileSelf { assert system }
    is TranspilerTest

    method testSelf
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 142!
                         end"
            expect: "#<Integer 142>"!

    method testSelfClass
        self transpile: "class Main \{}
                             direct method run
                                 self new foo debug!
                             method foo
                                 Self bar!
                             direct method bar
                                 242!
                         end"
            expect: "#<Integer 242>"!
end

class TestTranspileBoolean { assert system }
    is TranspilerTest

    method testBooleanLiteral
        self transpile: "class Main \{}
                             direct method run
                                 True debug.
                                 False debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testBooleanIfTrueIfFalse
        self transpile: "class Main \{}
                             direct method run
                                 True
                                     ifTrue: \{ 42 debug }
                                     ifFalse: \{ 13 debug }.
                                 False
                                     ifTrue: \{ 13 debug }
                                     ifFalse: \{ 42 debug }!
                         end"
            expect: "#<Integer 42>#<Integer 42>"!

    method testIs
        self transpile: "class Main \{}
                             direct method run
                                 let b1 = { 123 }.
                                 let b2 = { 42 }.
                                 (b1 is b2) debug.
                                 (1 is b1) debug.
                                 (b1 is 1) debug.
                                 (1 is 2) debug.
                                 (1 is 1) debug.
                                 (b1 is b1) debug.
                                 (b2 is b2) debug!
                         end"
            expect: "#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean True>#<Boolean True>#<Boolean True>"!
end

class TestTranspileClass { assert system }
   is TranspilerTest

    method testMyClass
        self transpile: "class MyClass \{}
                             direct method test
                                 123!
                         end
                         class Main \{}
                             direct method run
                                 MyClass test debug!
                         end"
            expect: "#<Integer 123>"!

    method testCtor
        self transpile: "class Main \{}
                             direct method run
                                 self new foo debug!
                             method foo
                                 542!
                         end"
            expect: "#<Integer 542>"!

    method testSlots
        self transpile: "class Main \{ x }
                             direct method run
                                 let instance = self x: 1021.
                                 instance double.
                                 instance read debug!
                             method double
                                 x = x * 2!
                             method read
                                 x!
                         end"
            expect: "#<Integer 2042>"!

    method testPrefixMethod
        self transpile: "class Main \{}
                             direct method run
                                 -(self foo) debug!
                             direct method foo
                                 42!
                         end"
            expect: "#<Integer -42>"!

end

class TestTranspileFinally { assert system }
    is TranspilerTest

    method testBlockFinally1
        self transpile: "class Main \{}
                             direct method run
                                 \{ 1 debug } finally: \{ 2 debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>"!

    method testBlockFinally2
        self transpile: "class Main \{}
                             direct method test
                                 \{ return 1 } finally: \{ 2 debug }!
                             direct method run
                                 self test debug!
                         end"
            expect: "#<Integer 2>#<Integer 1>"!

    method testBlockFinally3
        self transpile: "class Main \{}
                             direct method test
                                let x = 2.
                                self inner: \{ |y| \{ return y } finally: \{ x debug } }!
                             direct method run
                                 self test debug!
                             direct method inner: block
                                 block value: 100!
                         end"
            expect: "#<Integer 2>#<Integer 100>"!
end

class TestTranspileReturn { assert system }
    is TranspilerTest

    method testNonLocalReturn
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 100 + (self bar: \{ |x| return x })!
                             direct method bar: block
                                 block value: 420!
                         end"
            expect: "#<Integer 420>"!
end

class TestTranspileFloat { assert system }
    is TranspilerTest

    method testFloatLiteral
        self transpile: "class Main \{}
                             direct method run
                                 1.01 debug!
                         end"
            expect: "#<Float 1.010000>"!

    method testFloatArithmetic1
        self transpile: "class Main \{}
                             direct method run
                                 -(1.01) debug.
                                 (2.0 floatMul: 3.0) debug.
                                 ((1.0 floatAdd: 10.0) floatAdd: 0.1) debug.
                                 (10.0 floatSub: 0.1) debug!
                         end"
            expect: "#<Float -1.010000>#<Float 6.000000>#<Float 11.100000>#<Float 9.900000>"!

    method testFloatArithmetic2
        self transpile: "class Main \{}
                             direct method run
                                 (8.0 floatDiv: 2.0) debug.
                                 (8.0 floatDiv: 0.0) debug.
                                 (0.0 floatMul: 10.0) debug!
                         end"
            expect: "#<Float 4.000000>#<Float inf>#<Float 0.000000>"!

    method testFloatEq
        self transpile: "class Main \{}
                             direct method run
                                 ((0.0 floatDiv: 0.0) floatEq: (0.0 floatDiv: 0.0)) debug.
                                 (1.0 floatEq: 1.0) debug.
                                 (1.0 floatEq: 2.0) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testFloatIs
        self transpile: "class Main \{}
                             direct method run
                                 ((0.0 floatDiv: 0.0) is (0.0 floatDiv: 0.0)) debug.
                                 (1.0 is 1.0) debug.
                                 (1.0 is 2.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean True>#<Boolean False>"!

    method testFloatGt
        self transpile: "class Main \{}
                             direct method run
                                 (1.0 floatGt: 2.0) debug.
                                 (2.0 floatGt: 1.0) debug.
                                 (1.0 floatGt: 1.0) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testFloatGte
        self transpile: "class Main \{}
                             direct method run
                                 (1.0 floatGte: 2.0) debug.
                                 (2.0 floatGte: 1.0) debug.
                                 (1.0 floatGte: 1.0) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean True>"!

    method testFloatLt
        self transpile: "class Main \{}
                             direct method run
                                 (1.0 floatLt: 2.0) debug.
                                 (2.0 floatLt: 1.0) debug.
                                 (1.0 floatLt: 1.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!

    method testFloatLte
        self transpile: "class Main \{}
                             direct method run
                                 (1.0 floatLte: 2.0) debug.
                                 (2.0 floatLte: 1.0) debug.
                                 (1.0 floatLte: 1.0) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean True>"!
end

class TestTranspileInteger { assert system }
    is TranspilerTest

    method testLiteralInteger
        self transpile: "class Main \{}
                             direct method run -- FIXME: : cmd in: sys
                                 123 debug!
                         end"
             expect: "#<Integer 123>"!

    method testIntegerAdd
        self transpile: "class Main \{}
                             direct method run
                                 (10 + 100 + 1) debug!
                         end"
             expect: "#<Integer 111>"!

    method testIntegerMul
        self transpile: "class Main \{}
                             direct method run
                                 (10 * 100) debug!
                         end"
             expect: "#<Integer 1000>"!

    method testIntegerDiv
        self transpile: "class Main \{}
                             direct method run
                                 (20 / 2) debug!
                         end"
             expect: "#<Integer 10>"!

    method testIntegerSub
        self transpile: "class Main \{}
                             direct method run
                                 (20 - 2) debug!
                         end"
             expect: "#<Integer 18>"!

    method testIntegerEquals
        self transpile: "class Main \{}
                             direct method run
                                 (1 == 2) debug.
                                 (1 == 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>"!

    method testIntegerGreaterThan
        self transpile: "class Main \{}
                             direct method run
                                 (1 > 2) debug.
                                 (2 > 1) debug.
                                 (1 > 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean False>"!

    method testIntegerGreaterThanOrEqual
        self transpile: "class Main \{}
                             direct method run
                                 (1 >= 2) debug.
                                 (2 >= 1) debug.
                                 (1 >= 1) debug!
                         end"
            expect: "#<Boolean False>#<Boolean True>#<Boolean True>"!

    method testIntegerLessThan
        self transpile: "class Main \{}
                             direct method run
                                 (1 < 2) debug.
                                 (2 < 1) debug.
                                 (1 < 1) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean False>"!

    method testIntegerLessThanOrEqual
        self transpile: "class Main \{}
                             direct method run
                                 (1 <= 2) debug.
                                 (2 <= 1) debug.
                                 (1 <= 1) debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>#<Boolean True>"!
end

class TestTranspileString { assert system }
    is TranspilerTest

    method testStringLiteral
        self transpile: "class Main \{}
                             direct method run
                                 \"foo\" debug!
                         end"
            expect: "#<String foo>"!

    method testStringSize
        self transpile: "class Main \{}
                             direct method run
                                 self string size debug!
                             direct method string
                                 \"1234567890\"!
                         end"
            expect: "#<Integer 10>"!

    method testStringFromTo
        self transpile: "class Main \{}
                             direct method run
                                 ((self string) from: 3 to: 5) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String bar>"!

    method testStringFromToEmpty
        self transpile: "class Main \{}
                             direct method run
                                 ((self string) from: 3 to: 2) debug!
                             direct method string
                                 \"XXbarXX\"!
                         end"
            expect: "#<String >"!
end

class TestTranspileDynamic { assert system }
    is TranspilerTest

    method testDynamicDefine
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 999>"!

    method testDynamicBindBinds
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run
                                 \{ let $MyVar = 1234.
                                    self foo debug } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>"!

    method testDynamicBindRestores
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run
                                 \{ let $MyVar = 1234.
                                    self foo } value debug.
                                 self foo debug!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!

    method testDynamicBindRestoresOnUnwind
        self transpile: "define $MyVar 999!
                         class Main \{}
                             direct method run
                                 self bar debug.
                                 self foo debug!
                             direct method bar
                                 \{ let $MyVar = 1234.
                                    return self foo } value!
                             direct method foo
                                 $MyVar!
                         end"
            expect: "#<Integer 1234>#<Integer 999>"!
end

class TestTranspileTypecheck { assert system }
    is TranspilerTest

    method testIntegerValueOk
        self transpile: "class Main \{}
                             direct method run
                                 (12::Integer) debug!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerValueOops
        self transpile: "class Main \{}
                             direct method run
                                 (1.2::Integer) debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testIntegerMethodArgOk
        self transpile: "class Main \{}
                             direct method run
                                 self foo: 12!
                             direct method foo: x::Integer
                                 x debug!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerMethodArgOops
        self transpile: "class Main \{}
                             direct method run
                                 self foo: 1.2!
                             direct method foo: x::Integer
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testIntegerBlockArgOk
        self transpile: "class Main \{}
                             direct method run
                                 \{ |x::Integer| x debug } value: 12!
                         end"
            expect: "#<Integer 12>"!

    method testIntegerBlockArgOops
        self transpile: "class Main \{}
                             direct method run
                                 \{ |x::Integer| x debug } value: 1.2!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testInterfaceOk
        self transpile: "interface MyInterface
                         end
                         class MyClass \{}
                             is MyInterface
                             method value
                                 9!
                         end
                         class Main \{}
                             direct method run
                                 MyClass new :: MyInterface value debug!
                         end"
            expect: "#<Integer 9>"!

    method testInterfaceOops
        self transpile: "interface MyInterface
                         end
                         class Main \{}
                             direct method run
                                 42 :: MyInterface value debug!
                         end"
            expectError: "PANIC: Type error! Wanted: MyInterface, got: Integer"!

    method testLetOk
        self transpile: "class Main \{}
                             direct method run
                                 let x :: Integer = 42.
                                 x debug!
                         end"
            expect: "#<Integer 42>"!

    method testLetOops
        self transpile: "class Main \{}
                             direct method run
                                 let x :: Integer = 42.12.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testAssignOops
        self transpile: "class Main \{}
                             direct method run
                                 let x :: Integer = 42.
                                 x = 12.23.
                                 x debug!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testSlotTypeInitOk
        self transpile: "class Main \{ x::Integer }
                             direct method run
                                 (self x: 42) x debug!
                             method x
                                 x!
                         end"
            expect: "#<Integer 42>"!

    method testSlotTypeInitOops
        self transpile: "class Main \{ x::Integer }
                             direct method run
                                 (self x: 42.42) x debug!
                             method x
                                 x!
                         end"
            expectError: "PANIC: Type error! Wanted: Integer, got: Float"!

    method testSlotTypeAssignOk
        self transpile: "class Main \{ x::Integer }
                             direct method run
                                 (self x: 0) frob debug!
                             method frob
                                 x = 42.
                                 x!
                         end"
            expect: "#<Integer 42>"!

    method testSlotTypeAssignOops
        self transpile: "class Main \{ x::Integer }
                             direct method run
                                 (self x: 0) frob debug!
                             method frob
                                 x = 42.123.
                                 x!
                         end"
            expect: "PANIC: Type error! Wanted: Integer, got: Float"!
end

class Main {}
    direct method run: cmd in: system
        let tests = {
            "--block" -> TestTranspileBlock system: system,
            "--boolean" -> TestTranspileBoolean system: system,
            "--class" -> TestTranspileClass system: system,
            "--define" -> TestTranspileDefine system: system,
            "--dynamic" -> TestTranspileDynamic system: system,
            "--finally" -> TestTranspileFinally system: system,
            "--float" -> TestTranspileFloat system: system,
            "--integer" -> TestTranspileInteger system: system,
            "--interface" -> TestTranspileInterface system: system,
            "--keyword" -> TestTranspileKeyword system: system,
            "--let" -> TestTranspileLet system: system,
            "--name" -> TestName,
            "--return" -> TestTranspileReturn system: system,
            "--self" -> TestTranspileSelf system: system,
            "--string" -> TestTranspileString system: system,
            "--typecheck" -> TestTranspileTypecheck system: system,
        }.
        cmd == ["--all"]
            ifTrue: { cmd = tests keys }.
        cmd do: { |name|
                  Assert
                      runSuite: (tests at: name)
                      in: system
                      onFailure: { system exit: 1 } }.
        system exit!
end
