import .cTranspiler.CTranspiler
import .environment.Environment
import .parser.Parser
import .syntaxTranslator.SyntaxTranslator

import .utils.Debug

import lib.assert.Assert

import .test_self_hosting.TestSelfHosting
import .transpiler.test_name.TestName

class TestTranspileWrapper { test system }
    method assert: assert
        test
            assert: assert
            system: system!
end

interface TranspilerTest
    is TestSuite

    direct method system: system
        TestTranspileWrapper test: self system: system!

    method transpile: string
        let env = Environment new load: string.
        let c = CTranspiler transpile: env globals values in: env.
        (system files path: "host/generated_selectors.h")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c selectors }.
        (system files path: "host/generated_blocks.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c blocks }.
        (system files path: "host/generated_main.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c main }.
        (system files path: "host/generated_classes.c")
            forWrite truncateExisting
                createOrOpen: { |f| f writeString: c classes }.
        let tmpExe = "tmp_transpile_test.exe".
        let path = system currentDirectory path: tmpExe.
        path ifExists: #deleteFile.
        path exists not assert.
        -- KLUDGE: Windows CI host linker cannot find the sanitizer libraries,
        -- so we conditionalize on the environment and host.
        let sanitizerOptions
            = (((system getenv: "GITHUB_ACTION") is False) or: system isUnix)
                ifTrue: { "-fsanitize=address -fsanitize=undefined" }
                ifFalse: { "" }.
        system command: "clang -o {path} {sanitizerOptions} -fno-omit-frame-pointer -g -Wall --std=c17 host/main.c".
        path exists assert.
        system command: path toString!

    method transpile: string expect: output
        assert that: { self transpile: string }
               equals: output
               testing: "transpile -> {output}"!
end

class TestTranspile1 { assert system }
    is TranspilerTest

    method testLiteralInteger
        self transpile: "class Main \{}
                             direct method run -- FIXME: : cmd in: sys
                                 123 debug!
                         end"
             expect: "#<Integer 123>"!

    method testBinary
        self transpile: "class Main \{}
                             direct method run
                                 (10 + 100 + 1) debug!
                         end"
             expect: "#<Integer 111>"!

    method testLet
        self transpile: "class Main \{}
                             direct method run
                                 let x = 22.
                                 let y = 2.
                                 (x * y) debug!
                        end"
             expect: "#<Integer 44>"!

    method testKeyword
        self transpile: "class Main \{}
                             direct method run
                                 (self add: 40 and: 5) debug!
                             direct method add: x and: y
                                 x + y!
                        end"
             expect: "#<Integer 45>"!

    method testBlock
        self transpile: "class Main \{}
                             direct method run
                                 let x = 200.
                                 let b1 = \{ x + 11 * 2 }.
                                 let b2 = \{ let x = 0. b1 value }.
                                 let x = 1.
                                 b2 value debug!
                         end"
            expect: "#<Integer 222>"!
end

class TestTranspile2 { assert system }
    is TranspilerTest

    method testSelf
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 142!
                         end"
            expect: "#<Integer 142>"!

    method testSelfClass
        self transpile: "class Main \{}
                             direct method run
                                 self new foo debug!
                             method foo
                                 Self bar!
                             direct method bar
                                 242!
                         end"
            expect: "#<Integer 242>"!

    method testBooleanDebug
        self transpile: "class Main \{}
                             direct method run
                                 Boolean true debug.
                                 Boolean false debug!
                         end"
            expect: "#<Boolean True>#<Boolean False>"!

    method testBooleanIfTrueIfFalse
        self transpile: "class Main \{}
                             direct method run
                                 Boolean true
                                     ifTrue: \{ 42 debug }
                                     ifFalse: \{ 13 debug }.
                                 Boolean false
                                     ifTrue: \{ 13 debug }
                                     ifFalse: \{ 42 debug }!
                         end"
            expect: "#<Integer 42>#<Integer 42>"!

    method testIs
        self transpile: "class Main \{}
                             direct method run
                                 let b1 = { 123 }.
                                 let b2 = { 42 }.
                                 (b1 is b2) debug.
                                 (1 is b1) debug.
                                 (b1 is 1) debug.
                                 (1 is 2) debug.
                                 (1 is 1) debug.
                                 (b1 is b1) debug.
                                 (b2 is b2) debug!
                         end"
            expect: "#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean False>#<Boolean True>#<Boolean True>#<Boolean True>"!
end

class TestTranspile3 { assert system }
   is TranspilerTest

    method testMyClass
        self transpile: "class MyClass \{}
                             direct method test
                                 123!
                         end
                         class Main \{}
                             direct method run
                                 MyClass test debug!
                         end"
            expect: "#<Integer 123>"!

    method testCtor
        self transpile: "class Main \{}
                             direct method run
                                 self new foo debug!
                             method foo
                                 542!
                         end"
            expect: "#<Integer 542>"!

    method testSlots
        self transpile: "class Main \{ x }
                             direct method run
                                 let instance = self x: 1021.
                                 instance double.
                                 instance read debug!
                             method double
                                 x = x * 2!
                             method read
                                 x!
                         end"
            expect: "#<Integer 2042>"!

    method testPrefixMethod
        self transpile: "class Main \{}
                             direct method run
                                 -(self foo) debug!
                             direct method foo
                                 42!
                         end"
            expect: "#<Integer -42>"!

end

class TestTranspile4 { assert system }
    is TranspilerTest

    method testBlockFinally1
        self transpile: "class Main \{}
                             direct method run
                                 \{ 1 debug } finally: \{ 2 debug }!
                         end"
            expect: "#<Integer 1>#<Integer 2>"!

    method testBlockFinally2
        self transpile: "class Main \{}
                             direct method test
                                 \{ return 1 } finally: \{ 2 debug }!
                             direct method run
                                 self test debug!
                         end"
            expect: "#<Integer 2>#<Integer 1>"!

    method testBlockFinally3
        self transpile: "class Main \{}
                             direct method test
                                let x = 2.
                                self inner: \{ |y| \{ return y } finally: \{ x debug } }!
                             direct method run
                                 self test debug!
                             direct method inner: block
                                 block value: 100!
                         end"
            expect: "#<Integer 2>#<Integer 100>"!
end

class TestTranspile5 { assert system }
    is TranspilerTest

    method testNonLocalReturn
        self transpile: "class Main \{}
                             direct method run
                                 self foo debug!
                             direct method foo
                                 100 + (self bar: \{ |x| return x })!
                             direct method bar: block
                                 block value: 420!
                         end"
            expect: "#<Integer 420>"!
end

class Main {}
    direct method run: cmd in: system
        let tests = {
            "name" -> TestName,
            "transpile1" -> TestTranspile1 system: system,
            "transpile2" -> TestTranspile2 system: system,
            "transpile3" -> TestTranspile3 system: system,
            "transpile4" -> TestTranspile4 system: system,
            "transpile5" -> TestTranspile5 system: system
        }.
        cmd do: { |name|
                  Assert
                      runSuite: (tests at: name)
                      in: system
                      onFailure: { system exit: 1 } }.
        system exit!
end
