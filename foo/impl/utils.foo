class FileModuleDictionary { _dict }
    direct method new: dict
        self _dict: dict!
    method at: fullPath ifNone: block
        -- Debug println: "FILE: {fullPath}".
        let path = fullPath rest butlast asList.
        let root = fullPath first.
        let filepath = _dict at: root
                             ifNone: block.
        { path isEmpty }
            whileFalse: { filepath = filepath / path pop }.
        filepath / "{fullPath last}.foo"
            ifExists: { |foopath|
                        foopath file forRead open: { |f| f readString } }
            ifDoesNotExist: block!

    method toString
        "#<FileModuleDictionary {_dict keys}>"!
end

extend Dictionary
    method asFileModules
        FileModuleDictionary new: self!
end

class Debug {}
    direct method perform: name with: arguments
        name sendTo: Output debug with: arguments!
    direct method pad: n println: message
        n times: { self print: " " }.
        self println: message!
end

define ColonCharacter ":" character!

class DebugTracer { name }
    direct method trace: thing
        Debug println: thing!
    direct method _splitName: name
        let parts = name toString splitBy: ColonCharacter.
        parts size > 1
            ifTrue: { parts = parts butlast
                          collect: { |each| each append: ":" }}.
        parts!

    direct method perform: selectorName with: arguments
        (DebugTracer _splitName: selectorName)
            doWithIndex: { |each index|
                           Debug print: " ".
                           Debug print: each.
                           Debug print: ": ".
                           Debug print: (arguments at: index) }.
        Debug newline!
    method trace: thing
        Debug print: name.
        Debug println: thing!
    method perform: selectorName with: arguments
        Debug print: name.
        (DebugTracer _splitName: selectorName)
            doWithIndex: { |each index|
                           Debug print: " ".
                           Debug print: each.
                           Debug print: " ".
                           Debug print: (arguments at: index) }.
        Debug newline!
end

class NullTracer {}
    direct method perform: selector with: arguments
        False!
end
