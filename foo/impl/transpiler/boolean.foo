import .name.Name

define DirectMethods
    { #debug
          -> { signature: [], vars: 0,
               body: "printf(\"#<Class Boolean>\");
return ctx->receiver;" } }!

define InstanceMethods
    { #ifTrue:ifFalse:
          -> { signature: [Any, Any], vars: 0,
               body: "if (ctx->receiver.datum.boolean) \{
    return foo_send(ctx, &{Name mangleSelector: #value}, ctx->frame[0], 0);
} else \{
    return foo_send(ctx, &{Name mangleSelector: #value}, ctx->frame[1], 0);
}" },
 #hash
          -> { signature: [], vars: 0, returnType: Integer,
               body: "if (receiver.datum.boolean) \{
                          return FOO_INTEGER(0xde4bb7be57eb1407);
                      \} else \{
                          return FOO_INTEGER(0xbf8ccafb476258e7);
                      \}" },
 #ifTrue:
          -> { signature: [Any], vars: 0,
               body: "if (ctx->receiver.datum.boolean) \{
    return foo_send(ctx, &{Name mangleSelector: #value}, ctx->frame[0], 0);
} else \{
    return FooGlobal_False;
}" },
 #ifFalse:
          -> { signature: [Any], vars: 0,
               body: "if (ctx->receiver.datum.boolean) \{
    return FooGlobal_True;
} else \{
    return foo_send(ctx, &{Name mangleSelector: #value}, ctx->frame[0], 0);
}" },
      #not
          -> { signature: [], vars: 0, returnType: Boolean,
               body: "return FOO_BOOLEAN(!receiver.datum.boolean);" },
      #toString
          -> { signature: [], vars: 0, returnType: String,
               body: "return foo_String_new_from(ctx, ctx->receiver.datum.boolean ? \"True\" : \"False\");" },
      #debug
          -> { signature: [], vars: 0,
               body: "printf(\"#<Boolean %s>\", ctx->receiver.datum.boolean ? \"True\" : \"False\");
return ctx->receiver;" } }!
