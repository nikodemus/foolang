define DirectMethods {
    #new:
        -> {signature: [Integer], vars: 0,
            body: "int64_t isize = ctx->frame[0].datum.int64;
assert(isize >= 0);
struct FooBytes* b = FooBytes_alloc(ctx, (size_t)isize);
return (struct Foo)\{ .class = &FooClass_ByteArray, .datum = \{ .ptr = b } };"}
}!

define InstanceMethods {
    #at:
        -> {signature: [Integer], vars: 0, returnType: Integer,
            body: "int64_t index = ctx->frame[0].datum.int64;
struct FooBytes* b = PTR(FooBytes, ctx->receiver.datum);
assert(index > 0);
assert(index <= b->size);
return FOO_INTEGER(b->data[index-1]);"},
    #put:at:
        -> {signature: [Integer, Integer], vars: 0,
            body:" struct FooBytes* b = PTR(FooBytes, foo_check_modification(ctx, ctx->receiver.datum));
int64_t value = ctx->frame[0].datum.int64;
assert((value & 0xff) >= 0 && value <= 255);
int64_t index = ctx->frame[1].datum.int64;
assert(index > 0);
assert(index <= b->size);
b->data[index-1] = value;
return ctx->receiver;"},
    #size
        -> {signature: [], vars: 0, returnType: Integer,
            body: "struct FooBytes* b = PTR(FooBytes, ctx->receiver.datum);
return FOO_INTEGER(b->size);"},
    #stringFrom:to:
        -> {signature: [Integer, Integer], vars: 0, returnType: String,
            body: "int64_t from = ctx->frame[0].datum.int64;
                   int64_t to = ctx->frame[1].datum.int64;
                   struct FooBytes* self = PTR(FooBytes, ctx->receiver.datum);
                   assert(1 <= from);
                   assert(from <= to);
                   assert(to <= self->size);
                   int64_t size = to - from + 1;
                   struct FooBytes* s = FooBytes_alloc(ctx, size);
                   memcpy(s->data, self->data+(from-1), size);
                   return FOO_INSTANCE(String, s);"}
}!
