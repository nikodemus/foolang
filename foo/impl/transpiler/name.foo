---
Selector mangling for transpiler.

Underscores written as __.
Symbols prefixed with _ and translated using SymbolNames.
Keyword parts suffixed with _.
---

define SymbolNames
    { "+" -> "_add",
      "*" -> "_mul",
      "/" -> "_div",
      "-" -> "_sub",
      "%" -> "_mod",
      "=" -> "_eq",
      ">" -> "_gt",
      "<" -> "_lt",
      }!

class Name {}
    is Object

    direct method mangle: selector prefix: prefix
        let res = StringOutput
                      with: { |out|
                              out print: prefix.
                              self _mangle: selector to: out }.
        -- Output debug println: "mangle: {selector} prefix: {prefix} -> {res}".
        res!

    direct method _mangle: selector to: out
        selector isPrefix
            ifTrue: { out print: "_".
                      return self _mangleSymbol: selector to: out }.
        selector isSymbol
            ifTrue: { return self _mangleSymbol: selector to: out }.
        selector isKeyword
            ifTrue: { return self _mangleKeyword: selector to: out }.
        self _mangleUnary: selector to: out!

    direct method mangle: selector
        self mangle: selector prefix: ""!

    direct method mangleSelector: selector
        self mangle: selector prefix: "FOO_"!

    direct method mangleInstanceMethod: selector in: aClass
        "fooInstanceMethod_{aClass name}_{self mangle: selector}"!

    direct method mangleDirectMethod: selector in: aClass
        "fooDirectMethod_{aClass name}_{self mangle: selector}"!

    direct method mangleClassVtable: aClass
        "FooClassVtable_{aClass name}"!

    direct method mangleInstanceVtable: aClass
        "FooInstanceVtable_{aClass name}"!

    direct method mangleGlobal: aVar
        "FooGlobal_{aVar name}"!

    direct method mangleDynamic: aVar
        "FooDynamic_{aVar name}"!

    direct method _mangleSymbol: selector to: out
        selector name
            do: { |each|
                  out print: (SymbolNames
                                  at: each
                                  ifNone: { each }) }!

    direct method _mangleUnary: selector to: out
        self _mangleName: selector name to: out!

    direct method _mangleKeyword: selector to: out
        selector parts
            do: { |part|
                  self _mangleName: (part butlast) to: out.
                  out print: "_" }!

    direct method _mangleName: name to: out
        name do: { |s|
                   s == "_" ifTrue: { out print: s }.
                   out print: s }!

    direct method displayOn: out
        out print: "Name selector: {selector}"!
end
