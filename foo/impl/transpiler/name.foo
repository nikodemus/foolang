---
Selector mangling for transpiler.

Underscores written as __.
Symbols prefixed with _ and translated using SymbolNames.
Keyword parts suffixed with _.
---

define SymbolNames
    { "+" -> "_add",
      "*" -> "_mul",
      "/" -> "_div",
      "-" -> "_sub",
      "%" -> "_mod",
      "=" -> "_eq",
      ">" -> "_gt",
      "<" -> "_lt",
      "^" -> "_up",
      "#" -> "_xx"
      }!

class Name { out }
    is Object

    direct method _new
        self out: StringOutput new!

    direct method mangleSelector: selector::Selector
        self _new
            ; out print: "FOO_"
            ; _mangleSelector: selector
            ; content!

    direct method mangleMethod: aMethod
        self _new
            ; _mangleMethod: aMethod
            ; content!

    direct method mangleMethodClass: aMethod
        aMethod isDirect
            ifTrue: { self mangleMetaclass: aMethod home }
            ifFalse: { self mangleClass: aMethod home }!

    direct method mangleMetaclass: aClass
        self _new
            ; _mangleMetaclass: aClass
            ; content!

    direct method mangleClass: aClass
        self _new
            ; _mangleClass: aClass
            ; content!

    direct method mangleName: name
        self _new
            ; _mangleName: name
            ; content!

    direct method mangleGlobal: aVar
        self _new
            ; _mangleGlobal: aVar
            ; content!

    direct method mangleDynamic: aVar
        self _new
            ; _mangleDynamic: aVar
            ; content!

    method content
        out content!

    method _mangleDynamic: aVar
        out print: "FooDynamic_".
        out print: aVar name!

    method _mangleGlobal: aVar
        out print: "FooGlobal_".
        out print: aVar name!

    method _mangleMetaclass: aClass
        (aClass isBuiltin and: aClass name == "Class")
            ifTrue: { out print: "FooClass_Class" }
            ifFalse: { out print: "FooMetaclass_".
                       self _mangleName: aClass name }!

    method _mangleClass: aClass
        out print: "FooClass_".
        self _mangleName: aClass name!

    method _mangleMethod: aMethod
        out print: (aMethod isDirect
                        ifTrue: { "fooDirectMethod_" }
                        ifFalse: { "fooInstanceMethod_" }).
        out print: aMethod home name.
        out print: "_".
        self _mangleSelector: aMethod selector!

    method _mangleSelector: selector::Selector
        selector isPrefix
            ifTrue: { out print: "_".
                      return self _mangleSymbol: selector }.
        selector isSymbol
            ifTrue: { return self _mangleSymbol: selector }.
        selector isKeyword
            ifTrue: { return self _mangleKeyword: selector }.
        self _mangleUnary: selector!

    method _mangleSymbol: selector
        selector name
            do: { |each|
                  out print: (SymbolNames
                                  at: each
                                  ifNone: { each }) }!

    method _mangleUnary: selector
        self _mangleName: selector name!

    method _mangleKeyword: selector
        selector parts
            do: { |part|
                  self _mangleName: (part butlast).
                  out print: "_" }!

    method _mangleName: name::String
        name do: { |s|
                   s == " "
                       ifTrue: { out print: "__" }
                       ifFalse: { s == "_"
                                      ifTrue: { out print: s }.
                                  out print: s } }!
end
