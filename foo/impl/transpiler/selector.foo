define DirectMethods {
    #intern:
        -> {signature: [String], vars: 0,
            body: "struct FooBytes* name = PTR(FooBytes, ctx->frame[0].datum);
                   return (struct Foo)
                      \{ .class = &FooClass_Selector,
                         .datum = \{ .ptr = foo_intern(name) \}\};"}
}!

define InstanceMethods {
    #<
        -> {signature: [Selector], vars: 0,
            body: "const struct FooBytes* name1 = PTR(FooSelector, ctx->receiver.datum)->name;
const struct FooBytes* name2 = PTR(FooSelector, ctx->frame[0].datum)->name;
size_t n = min_size(name1->size, name2->size);
for (size_t i = 0; i < n; i++) \{
    uint8_t c1 = name1->data[i];
    uint8_t c2 = name2->data[i];
    if (c1 != c2) \{
        return FOO_BOOLEAN(c1 < c2);
    }
}
return FOO_BOOLEAN(name1->size < name2->size);"},
    #debug
        -> {signature: [], vars: 0,
            body: "const char* name = (char*)PTR(FooSelector, ctx->receiver.datum)->name->data;
printf(\"#<Selector %s>\", name);
return ctx->receiver;"},
    #name
        -> {signature: [], vars: 0,
            body: "struct FooSelector* selector = PTR(FooSelector, ctx->receiver.datum);
                   // Got corrupted selectors with 1 as the datum, pointers should
                   // not be odd...
                   if (selector && !((intptr_t)selector & 1)) \{
                       return (struct Foo)\{ .class = &FooClass_String,
                                             .datum = \{ .ptr = selector->name } };
                   \} else \{
                       foo_panicf(ctx, \"Invalid selector datum\");
                   \}"},
    #sendTo:with:
        -> {signature: [Any, Array], vars: 0,
            body: "struct FooSelector* selector = PTR(FooSelector, ctx->receiver.datum);
return foo_send_array(ctx, selector, ctx->frame[0], ctx->frame[1]);"},
    #startsWith:
        -> {signature: [String], vars: 0,
            body: "const struct FooBytes* name = PTR(FooSelector, ctx->receiver.datum)->name;
struct FooBytes* string = PTR(FooBytes, ctx->frame[0].datum);
return FOO_BOOLEAN(name->size >= string->size &&
                       !memcmp(name->data, string->data, string->size));"}
}!
