import .name.Name

-- Not implementing the non-primitive methods here for floats, they should come
-- from lang.number and lang.float!
--
-- Doing them for integers was OK, since it gave an opportunity to think about
-- things - doing them for floats here would be a waste of time.
define FloatMethods
    { (Selector name: "prefix-")
          -> { signature: [],
               body: "return foo_Float_new(- ctx->receiver.datum.float64);" },
      -- FIXME: I absolutely despise the C floating point printing:
      -- print the required number of digits without trailing zeros.
      -- Either integrate dtoa.c, link to a small Rust library,
      -- or implement the algorithm myself.
      #debug -> {signature: [],
                 body: "printf(\"#<Float %f>\", ctx->receiver.datum.float64);
return ctx->receiver;"},
      #floatAdd:
          -> { signature: [Float],
               body: "return foo_Float_new(ctx->receiver.datum.float64 + ctx->frame[0].datum.float64);" },
      #floatDiv:
          -> { signature: [Float],
               body: "return foo_Float_new(ctx->receiver.datum.float64 / ctx->frame[0].datum.float64);" },
      #floatEq:
          -> { signature: [Float],
               body: "return foo_Boolean_new(ctx->receiver.datum.float64 == ctx->frame[0].datum.float64);" },
      #floatGt:
          -> { signature: [Float],
               body: "return foo_Boolean_new(ctx->receiver.datum.float64 > ctx->frame[0].datum.float64);" },
      #floatGte:
          -> { signature: [Float],
               body: "return foo_Boolean_new(ctx->receiver.datum.float64 >= ctx->frame[0].datum.float64);" },
      #floatLt:
          -> { signature: [Float],
               body: "return foo_Boolean_new(ctx->receiver.datum.float64 < ctx->frame[0].datum.float64);" },
      #floatLte:
          -> { signature: [Float],
               body: "return foo_Boolean_new(ctx->receiver.datum.float64 <= ctx->frame[0].datum.float64);" },
      #floatMul:
          -> { signature: [Float],
               body: "return foo_Float_new(ctx->receiver.datum.float64 * ctx->frame[0].datum.float64);" },
      #floatSub:
          -> { signature: [Float],
               body: "return foo_Float_new(ctx->receiver.datum.float64 - ctx->frame[0].datum.float64);" },
    }!
