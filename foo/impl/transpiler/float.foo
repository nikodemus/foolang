import .name.Name

define DirectMethods
    { #parse:
      -> { signature: [String], vars: 0,
           body: "struct FooBytes* b = PTR(FooBytes, ctx->frame[0].datum);
                  return FOO_FLOAT(strtod((char*)b->data, NULL));" },
      }!

define InstanceMethods
    { (Selector intern: "prefix-")
          -> { signature: [], vars: 0,
               body: "return FOO_FLOAT(- ctx->receiver.datum.float64);" },
      #debug
      -> { signature: [], vars: 1,
           body: "ctx->frame[0] = foo_send(ctx, &FOO_toString, ctx->receiver, 0);
                  printf(\"#<Float %s>\", PTR(FooBytes, ctx->frame[0].datum)->data);
                  return ctx->receiver;"},
      #toString
      -> { signature: [], vars: 0,
           body: "double arg = ctx->receiver.datum.float64;
                  if (arg == 0.0) \{
                      // FIXME: signed zero!
                      return FOO_INSTANCE(String, FooBytes_from(\"0.0\"));
                  }
                  int mode = 0;    // we want the shortest representation
                  int ndigits = 0; // mode zero ignores ndigits.
                  int dec;         // decimal exponent (number of digits / leading zeros)
                  int sign;        // 0 for no sign, 1 for negative
                  char *s = dtoa(arg, mode, ndigits, &dec, &sign, NULL);
                  size_t n = strlen(s);
                  struct FooBytes *bytes;
                  size_t dec_digits = dec, zeros = 0, start1 = 0, start2, dot;
                  if (dec == n) \{
                      // Integer value
                      bytes = FooBytes_alloc(sign + n + 2);
                      start1 = sign;
                      dot = start1 + n;
                      start2 = dot + 1;
                  } else if (dec > 0) \{
                      bytes = FooBytes_alloc(sign + n + 1);
                      start1 = sign;
                      dot = start1 + dec;
                      start2 = dot + 1;
                  } else \{
                      dec_digits = 0;
                      zeros = -dec + 2; // dot counted here!
                      bytes = FooBytes_alloc(sign + zeros + n);
                      dot = sign + 1;
                      start2 = dot + 1 + -dec;
                  }
                  char *data = (char *)bytes->data;
                  if (sign)
                      data[0] = '-';
                  if (dec_digits) \{
                      memcpy(data + start1, s, dec_digits);
                  } else \{
                      memset(data + sign, '0', zeros);
                  }
                  data[dot] = '.';
                  if (n > dec_digits) \{
                      memcpy(data + start2, s + dec_digits, n - dec_digits);
                  } else \{
                      data[start2] = '0';
                  }
                  return FOO_INSTANCE(String, bytes);" },
      #truncate
          -> { signature: [], vars: 0,
               body: "return FOO_INTEGER(ctx->receiver.datum.float64);" },
      #round
           -> { signature: [], vars: 0,
                body: "return FOO_INTEGER(round(ctx->receiver.datum.float64));" },
      #floatAdd:
          -> { signature: [Float], vars: 0,
               body: "return FOO_FLOAT(ctx->receiver.datum.float64 + ctx->frame[0].datum.float64);" },
      #floatDiv:
          -> { signature: [Float], vars: 0,
               body: "return FOO_FLOAT(ctx->receiver.datum.float64 / ctx->frame[0].datum.float64);" },
      #floatEq:
          -> { signature: [Float], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.float64 == ctx->frame[0].datum.float64);" },
      #floatGt:
          -> { signature: [Float], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.float64 > ctx->frame[0].datum.float64);" },
      #floatGte:
          -> { signature: [Float], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.float64 >= ctx->frame[0].datum.float64);" },
      #floatLt:
          -> { signature: [Float], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.float64 < ctx->frame[0].datum.float64);" },
      #floatLte:
          -> { signature: [Float], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.float64 <= ctx->frame[0].datum.float64);" },
      #floatMul:
          -> { signature: [Float], vars: 0,
               body: "return FOO_FLOAT(ctx->receiver.datum.float64 * ctx->frame[0].datum.float64);" },
      #floatSub:
          -> { signature: [Float], vars: 0,
               body: "return FOO_FLOAT(ctx->receiver.datum.float64 - ctx->frame[0].datum.float64);" },
    }!
