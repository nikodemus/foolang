define DirectMethods
    Dictionary new!

-- FIXME: #exists swallows access errors
define InstanceMethods {
    #hash
    -> { signature: [], vars: 0, returnType: Integer,
         body: "struct FooBytes* b = PTR(FooBytes, ctx->receiver.datum);
                return FOO_INTEGER(MASK_SIGN(foo_hash(b->data, b->size)));" },
    #/
    -> { signature: [String], vars: 0, returnType: FilePath,
         body: "struct FooBytes* b1 = PTR(FooBytes, ctx->receiver.datum);
                struct FooBytes* b2 = PTR(FooBytes, ctx->frame[0].datum);
                if (b2->size == 0)
                    foo_panicf(ctx, \"Invalid pathname in FilePath#/\");
                if (b1->size == 0)
                    return (struct Foo)\{ .class = &FooClass_FilePath, .datum = \{ .ptr = b2 } };
                struct FooBytes* b3 = FooBytes_alloc(ctx, b1->size + b2->size + 1);
                memcpy(b3->data, b1->data, b1->size);
                b3->data[b1->size] = '/';
                memcpy(b3->data + b1->size + 1, b2->data, b2->size);
                return (struct Foo)\{ .class = &FooClass_FilePath, .datum = \{ .ptr = b3 } };" },
    #deleteFile
    -> { signature: [], vars: 0, returnType: Boolean,
         body: "return FOO_BOOLEAN(
                    0 == remove((char*)PTR(FooBytes, ctx->receiver.datum)->data));" },
    #exists
    -> { signature: [], vars: 0, returnType: Boolean,
         body: "return FOO_BOOLEAN(
                    0 == sys_access((char*)PTR(FooBytes, ctx->receiver.datum)->data, 0));" },
    #file
    -> { signature: [], vars: 0, returnType: File,
         body: "return foo_File_new(ctx, PTR(FooBytes, ctx->receiver.datum), 0);" },
    #isDirectory
    -> { signature: [], vars: 0, returnType: Boolean,
         body: "struct sys_stat s;
                if (sys_stat((char*)PTR(FooBytes, ctx->receiver.datum)->data, &s))
                    return FOO_BOOLEAN(false);
                return FOO_BOOLEAN(SYS_ISDIR(s.st_mode));" },
    #isFile
    -> { signature: [], vars: 0, returnType: Boolean,
         body: "struct sys_stat s;
                if (sys_stat((char*)PTR(FooBytes, ctx->receiver.datum)->data, &s))
                    return FOO_BOOLEAN(false);
                return FOO_BOOLEAN(SYS_ISREG(s.st_mode));" },
    #pathname
    -> { signature: [], vars: 0, returnType: String,
         body: "return (struct Foo)\{ .class = &FooClass_String, .datum = ctx->receiver.datum };" },
}!
