import .name.Name

-- FIXME: Overly restrictive types, mixed integer and float arithmetic not supported
-- yet.
define IntegerMethods
    { (Selector intern: "prefix-")
          -> { signature: [], vars: 0,
               body: "return FOO_INTEGER(- ctx->receiver.datum.int64);" },
      #asFloat
          -> { signature: [], vars: 0,
               body: "return FOO_FLOAT(ctx->receiver.datum.int64);" },
      #debug -> {signature: [], vars: 0,
                 body: "printf(\"#<Integer %\" PRId64 \">\", ctx->receiver.datum.int64);
return ctx->receiver;"},
      #integerAdd:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_INTEGER(ctx->receiver.datum.int64 + ctx->frame[0].datum.int64);" },
      #integerDiv:
          -> { signature: [Integer], vars: 0,
               body: "int64_t div = ctx->frame[0].datum.int64;
if (div)
    return FOO_INTEGER(ctx->receiver.datum.int64 / div);
else
    foo_unimplemented(\"DivideByZero handling\");" },
      #integerEq:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.int64 == ctx->frame[0].datum.int64);" },
      #integerGt:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.int64 > ctx->frame[0].datum.int64);" },
      #integerGte:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.int64 >= ctx->frame[0].datum.int64);" },
      #integerLt:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.int64 < ctx->frame[0].datum.int64);" },
      #integerLte:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_BOOLEAN(ctx->receiver.datum.int64 <= ctx->frame[0].datum.int64);" },
      #integerMul:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_INTEGER(ctx->receiver.datum.int64 * ctx->frame[0].datum.int64);" },
      #integerSub:
          -> { signature: [Integer], vars: 0,
               body: "return FOO_INTEGER(ctx->receiver.datum.int64 - ctx->frame[0].datum.int64);" },
      #to:do:
          -> { signature: [Integer, Any], vars: 0,
               body: "int64_t from = ctx->receiver.datum.int64;
                      int64_t to = ctx->frame[0].datum.int64;
                      for (int64_t i = from; i <= to; i++) \{
                           foo_send(ctx, &FOO_value_, ctx->frame[1], 1, FOO_INTEGER(i));
                      \}
                      return ctx->receiver;" },
      #toString
          -> {signature: [], vars: 0,
              body: "char buffer[22];
assert(22 == sizeof(buffer));
int n = snprintf(buffer, sizeof(buffer), \"%\" PRId64, ctx->receiver.datum.int64);
if (-1 < n && n < sizeof(buffer)) \{
    struct FooBytes* bytes = FooBytes_alloc(n);
    memcpy(bytes->data, buffer, n);
    return (struct Foo)\{ .class = &FooClass_String, .datum = \{ .ptr = bytes }};
} else \{
    foo_panicf(ctx, \"Could not convert integer to string: %zl\", ctx->receiver.datum.int64);
}
"} }!
