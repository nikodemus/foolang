define InstanceMethods
{
     #name
     -> { signature: [], vars: 0, returnType: String,
          body: "struct FooBytes* name = PTR(FooClass, ctx->receiver.datum)->name;
                 return (struct Foo)\{ .class = &FooClass_String, .datum = \{ .ptr = name } };"
          },

     #hash
     -> { signature: [], vars: 0, returnType: String,
          body: "struct FooBytes* name = PTR(FooClass, ctx->receiver.datum)->name;
                 return FOO_INTEGER(MASK_SIGN(foo_hash(name->data, name->size)));"
          },

     #classOf
     -> { signature: [], vars: 0, returnType: Class,
          body: "struct FooClass* classOf = ctx->receiver.class;
                 return (struct Foo)\{ .class = classOf->metaclass, .datum = \{ .ptr = classOf } };"
          },

     #__addMethod:
     -> { signature: [Any], vars: 0, returnType: Boolean,
          body: "// Check out the method object
                 struct Foo method_object = ctx->frame[0];
                 struct Foo selector_object = foo_send(ctx, &FOO_selector, method_object, 0);
                 foo_class_typecheck(ctx, &FooClass_Selector, selector_object);

                 struct FooClass* class = PTR(FooClass, ctx->receiver.datum);
                 struct FooMethodTable* old_table = FOO_GET_METHODS(class);

                 // Check that class is heap-allocated
                 if (old_table->header.allocation != HEAP) \{
                     foo_panicf(ctx, \"%s is not a dynamically allocated class, #__addMethod: failed.\",
                                class->name->data);
                 }

                 struct FooSelector* method_selector = PTR(FooSelector, selector_object.datum);
                 // If a method with this selector exists, return False
                 for (size_t i = 0; i < old_table->size; i++) \{
                     struct FooMethod* m = &old_table->methods[i];
                     if (m->selector == method_selector) \{
                         foo_panicf(ctx, \"%s#%s already exists, #__addMethod: failed.\",
                                    class->name->data, method_selector->name->data);
                     }
                 }

                 // Allocate a new method table with space for one more method.
                 // (FIXME: horribly inefficient...)
                 struct FooMethodTable* new_table = foo_alloc_no_gc(ctx, sizeof(struct FooMethodTable)
                                                                    + (old_table->size + 1) * sizeof(struct FooMethod));
                 new_table->header.allocation = HEAP;
                 new_table->size = 0;

                 // Copy old methods
                 for (size_t i = 0; i < old_table->size; i++) \{
                   new_table->methods[i] = old_table->methods[i];
                   new_table->size++;
                 }

                 // Add the new method
                 struct FooMethod* m = &new_table->methods[old_table->size];
                 m->home = class;
                 m->selector = method_selector;
                 m->function = foo_invoke_on;
                 m->object = method_object;
                 new_table->size++;

                 // Replace the table (it's now visible to GC, and old one is not)
                 FOO_SET_METHODS(class, new_table);

                 return FOO_BOOLEAN(true);" },

     #selectorsOf:do:
     -> { signature: [Any, Any], vars: 0,
          body: "const struct FooClass* class = ctx->frame[0].class;
                 const struct Foo block = ctx->frame[1];
                 const struct FooSelector* seen[1024];
                 size_t n = 0;
                 // First go through own methods, registering them in seen.
                 const struct FooMethodTable* table = FOO_GET_METHODS(class);
                 for (size_t i = 0; i < table->size; i++) \{
                     struct FooSelector* selector = table->methods[i].selector;

                     // Skip private selectors.
                     if (selector->name->data[0] == '_') continue;

                     if (n < sizeof(seen)) \{
                         seen[n++] = selector;
                         foo_send(ctx, &FOO_value_, block, 1,
                                  (struct Foo)\{ .class = &FooClass_Selector,
                                                 .datum = \{ .ptr = selector \}\});
                     \} else \{
                         foo_panicf(ctx, \"Too many selectors in class: %s\", class->name->data);
                     \}
                 \}

                 // Then go through the inherited interfaces
                 const struct FooClassList* interfaces = class->inherited;
                 for (size_t i = 0; i < interfaces->size; i++) \{
                     const struct FooMethodTable* table = FOO_GET_METHODS(interfaces->data[i]);
                     for (size_t j = 0; j < table->size; j++) \{
                         struct FooSelector* selector = table->methods[j].selector;

                         // Skip private selectors.
                         if (selector->name->data[0] == '_') continue;

                         // Check if we've seen this one already
                         bool new = true;
                         for (size_t k = 0; k < n; k++) \{
                             if (seen[k] == selector) \{
                                 new = false;
                                 break;
                             \}
                         \}
                         if (new) \{
                             if (n < sizeof(seen)) \{
                                 seen[n++] = selector;
                                 foo_send(ctx, &FOO_value_, block, 1,
                                          (struct Foo)\{ .class = &FooClass_Selector,
                                                         .datum = \{ .ptr = selector \}\});
                             \} else \{
                                 foo_panicf(ctx, \"Too many selectors in class: %s\", class->name->data);
                             \}
                         \}
                     \}
                 \}

                 return ctx->frame[0];" },
     #includes:
     -> { signature: [Any], vars: 0, returnType: Boolean,
          body: "return foo_class_includes(ctx, PTR(FooClass, receiver.datum), ctx->frame[0]);"
          },

     #subclass:interfaces:methods:
     -> { signature: [String, Array, Array], vars: 1, returnType: Class,
          body: "// Build inheritance list
                 struct FooClass* super = PTR(FooClass, ctx->receiver.datum);
                 struct FooArray* interfaces = PTR(FooArray, ctx->frame[1].datum);
                 struct FooClassList* inherited = FooClassList_alloc(ctx, interfaces->size + 1);
                 inherited->data[0] = super;
                 for (size_t i = 0; i < interfaces->size; i++) \{
                     struct Foo obj = interfaces->data[i];
                     foo_class_typecheck(ctx, &FooClass_Class, obj);
                     inherited->data[i+1] = obj.datum.ptr;
                 \}

                 if (!super->layout) \{
                     assert(super->name);
                     assert(super->name->data);
                     foo_panicf(ctx, \"Superclass has no layout: %s\", super->name->data);
                 \}

                 // Allocate the new class: must use _no_gc since the inherited
                 // class list is not visible to GC yet!
                 struct FooArray* methods = PTR(FooArray, ctx->frame[2].datum);
                 struct FooClass* newclass = foo_alloc_no_gc(ctx, sizeof(struct FooClass));
                 newclass->header.allocation = HEAP;
                 newclass->name = PTR(FooBytes, ctx->frame[0].datum);
                 newclass->metaclass = super->metaclass;
                 newclass->inherited = inherited;
                 newclass->layout = super->layout;
                 newclass->mark = super->mark;
                 struct FooMethodTable* table = foo_alloc_no_gc(ctx, sizeof(struct FooMethodTable)
                                                                + methods->size * sizeof(struct FooMethod));
                 table->header.allocation = HEAP;
                 // Hide the uninitialized part from GC.
                 table->size = 0;
                 FOO_SET_METHODS(newclass, table);

                 /* Make the new class visible to GC. */
                 ctx->frame[3] = (struct Foo)
                   \{ .class = newclass->metaclass,
                      .datum = \{ .ptr = newclass } };

                 for (size_t i = 0; i < methods->size; i++) \{
                   struct Foo method_object = methods->data[i];
                   struct Foo method_selector = foo_send(ctx, &FOO_selector, method_object, 0);
                   foo_class_typecheck(ctx, &FooClass_Selector, method_selector);

                   struct FooMethod* m = &table->methods[i];
                   m->home = newclass;
                   m->selector = PTR(FooSelector, method_selector.datum);
                   m->function = foo_invoke_on;
                   m->object = method_object;

                   /* Update the size once the method is in place,
                      so GC sees it. */
                   table->size++;
                 }
                 return ctx->frame[3];"
        },

     #new:layout:interfaces:methods:
     -> { signature: [String, Layout, Array, Array], vars: 1, returnType: Class,
          body: "struct FooArray* interfaces = PTR(FooArray, ctx->frame[2].datum);
                 struct FooClassList* inherited = FooClassList_alloc(ctx, interfaces->size);
                 for (size_t i = 0; i < interfaces->size; i++) \{
                     struct Foo obj = interfaces->data[i];
                     foo_class_typecheck(ctx, &FooClass_Class, obj);
                     inherited->data[i] = obj.datum.ptr;
                 }

                 // Allocate the new class: must use _no_gc since the inherited
                 // class list is not visible to GC yet!
                 struct FooArray* methods = PTR(FooArray, ctx->frame[3].datum);
                 struct FooClass* newclass = foo_alloc_no_gc(ctx, sizeof(struct FooClass));
                 newclass->header.allocation = HEAP;
                 newclass->name = PTR(FooBytes, ctx->frame[0].datum);
                 newclass->metaclass = PTR(FooClass, ctx->receiver.datum);
                 newclass->inherited = inherited;
                 newclass->layout = PTR(FooLayout, ctx->frame[1].datum);
                 newclass->mark = newclass->layout->mark;
                 struct FooMethodTable* table = foo_alloc_no_gc(ctx, sizeof(struct FooMethodTable)
                                                                + methods->size * sizeof(struct FooMethod));
                 table->header.allocation = HEAP;
                 // Hide the uninitialized part from GC.
                 table->size = 0;
                 FOO_SET_METHODS(newclass, table);

                 /* Make the new class visible to GC. */
                 ctx->frame[4] = (struct Foo)
                   \{ .class = newclass->metaclass,
                      .datum = \{ .ptr = newclass } };

                 for (size_t i = 0; i < methods->size; i++) \{
                   struct Foo method_object = methods->data[i];
                   struct Foo method_selector = foo_send(ctx, &FOO_selector, method_object, 0);
                   foo_class_typecheck(ctx, &FooClass_Selector, method_selector);

                   struct FooMethod* m = &table->methods[i];
                   m->home = newclass;
                   m->selector = PTR(FooSelector, method_selector.datum);
                   m->function = foo_invoke_on;
                   m->object = method_object;

                   /* Update the size once the method is in place,
                      so GC sees it. */
                   table->size++;
                 }
                 return ctx->frame[4];"
          }
}!
