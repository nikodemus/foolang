define InstanceMethods {
     #name:metaclass:layout:methods:
     -> { signature: [String, Class, Any, Array], vars: 1,
          body: "struct FooArray* methods = PTR(FooArray, ctx->frame[3].datum);
                 size_t n = methods->size;
                 struct FooClass* newclass
                   = foo_alloc(sizeof(struct FooClass) + n*sizeof(struct FooMethod));

                 newclass->name = PTR(FooBytes, ctx->frame[0].datum);
                 newclass->metaclass = PTR(FooClass, ctx->frame[1].datum);
                 newclass->inherited = &FooClassInheritance_Class;
                 newclass->mark = foo_mark_none; /* FIXME: this is how we mark instances, should come from layout? */
                 newclass->gc = true;
                 newclass->size = 0;

                 /* Make the new class visible to GC. */
                 ctx->frame[4] = (struct Foo)
                   \{ .class = newclass->metaclass,
                      .datum = \{ .ptr = newclass }};

                 for (size_t i = 0; i < n; i++) \{
                   struct Foo method_object = methods->data[i];
                   struct Foo selector = foo_send(ctx, &FOO_selector, method_object, 0);
                   foo_class_typecheck(ctx, &FooClass_Selector, selector);

                   struct Foo selector_arity = foo_send(ctx, &FOO_arity, selector, 0);
                   foo_class_typecheck(ctx, &FooClass_Integer, selector_arity);
                   int64_t method_arity = selector_arity.datum.int64 - 1;

                   struct FooMethod* m = &newclass->methods[i];
                   m->class = newclass;
                   m->selector = PTR(FooSelector, selector.datum);
                   m->argCount = method_arity; // selector_arity.datum.int64;
                   m->frameSize = selector_arity.datum.int64;
                   m->function = foo_invoke_on;
                   m->object = method_object;

                   /* Update the size once the method is in place,
                      so GC sees it. */
                   newclass->size++;
                 }
                 return ctx->frame[4];"
          }
}!
