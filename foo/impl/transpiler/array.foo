define DirectMethods
    { #of:new:value:
          -> {signature: [Any, Integer, Any], vars: 0, returnType: Array,
              body: "int64_t size = ctx->frame[1].datum.int64;
// FIXME: error instead!
if (size < 0)
   foo_panicf(ctx, \"Negative size! size: %\" PRId64, size);
struct FooArray* new = FooArray_alloc(ctx, size);
struct Foo value = ctx->frame[2];
for (int64_t i = 0; i < size; i++) \{
    new->data[i] = value;
}
return (struct Foo)\{ .class = &FooClass_Array, .datum = \{ .ptr = new } };"},
      #new:
          -> {signature: [Integer], vars: 0, returnType: Array,
              body: "size_t size = ctx->frame[0].datum.int64;
// FIXME: error instead!
if (size < 0)
   foo_panicf(ctx, \"Negative size! size: %\" PRId64, size);
return foo_Array_new(ctx, size);"},
      #new:value:
          -> {signature: [Integer, Any], vars: 0, returnType: Array,
              body: "int64_t size = ctx->frame[0].datum.int64;
// FIXME: error instead!
if (size < 0)
   foo_panicf(ctx, \"Negative size! size: %\" PRId64, size);
struct FooArray* new = FooArray_alloc(ctx, size);
struct Foo value = ctx->frame[1];
for (int64_t i = 0; i < size; i++) \{
    new->data[i] = value;
}
return (struct Foo)\{ .class = &FooClass_Array, .datum = \{ .ptr = new } };"}
}!

define InstanceMethods
    { #debug
          -> {signature: [], vars: 0, returnType: Array,
              body: "struct FooArray* array = PTR(FooArray, ctx->receiver.datum);
printf(\"[\");
for (size_t i = 0; i < array->size; i++) \{
    if (i)
        printf(\", \");
    foo_send(ctx, &FOO_debug, array->data[i], 0);
}
printf(\"]\");
return ctx->receiver;"},
      #at:
          -> {signature: [Integer], vars: 0,
              body: "struct FooArray* array = PTR(FooArray, ctx->receiver.datum);
int64_t i = ctx->frame[0].datum.int64 - 1;
if (i < 0)
   foo_panicf(ctx, \"Invalid index! index: %\" PRId64, i + 1);
if (i >= array->size)
   foo_panicf(ctx, \"Index out of bounds! index: %\" PRId64 \"size: %\" PRId64, i + 1, array->size);
return array->data[i];"},
      #at:put:
          -> {signature: [Integer, Any], vars: 0,
              body: "struct FooArray* array = PTR(FooArray, foo_check_modification(ctx, ctx->receiver.datum));
int64_t i = ctx->frame[0].datum.int64 - 1;
if (i < 0)
   foo_panicf(ctx, \"Invalid index! index: %\" PRId64, i + 1);
if (i >= array->size)
   foo_panicf(ctx, \"Index out of bounds! index: %\" PRId64 \"size: %\" PRId64, i + 1, array->size);
return array->data[i] = ctx->frame[1];"},
      #copy
          -> {signature: [], vars: 0,
              body: "struct FooArray* self = PTR(FooArray, ctx->receiver.datum);
struct FooArray* new = FooArray_alloc(ctx, self->size);
for (size_t i = 0; i < self->size; i++) \{
    new->data[i] = self->data[i];
}
return (struct Foo)\{ .class = &FooClass_Array, .datum = \{ .ptr = new } };"},
      #do:
          -> {signature: [Any], vars: 0,
              body: "struct FooArray* self = PTR(FooArray, ctx->receiver.datum);
                     for (size_t i = 0; i < self->size; i++) \{
                         foo_send(ctx, &FOO_value_, ctx->frame[0], 1, self->data[i]);
                     \};
                     return ctx->receiver;"},
      #put:at:
          -> {signature: [Any, Integer], vars: 0,
              body: "struct FooArray* array = PTR(FooArray, foo_check_modification(ctx, ctx->receiver.datum));
int64_t i = ctx->frame[1].datum.int64 - 1;
if (i < 0)
   foo_panicf(ctx, \"Invalid index! index: %\" PRId64, i + 1);
if (i >= array->size)
   foo_panicf(ctx, \"Index out of bounds! index: %\" PRId64 \"size: %\" PRId64, i + 1, array->size);
return array->data[i] = ctx->frame[0];"},
      #from:to:
          -> {signature: [Integer, Integer], vars: 0, returnType: Array,
              body: "int64_t start = ctx->frame[0].datum.int64 - 1;
int64_t end = ctx->frame[1].datum.int64;
struct FooArray* self = PTR(FooArray, ctx->receiver.datum);
// FIXME: errors instead!
if (start > end)
   foo_panicf(ctx, \"Start after end! start: %\" PRId64 \" end: %\" PRId64, start, end);
if (end > self->size)
   foo_panicf(ctx, \"End out of bounds! end: %\" PRId64 \" size: %\" PRId64, end, self->size);
struct FooArray* new = FooArray_alloc(ctx, (size_t)(end-start));
size_t offset = 0;
for (size_t i = start; i < end;) \{
    new->data[offset++] = self->data[i++];
}
return (struct Foo)\{ .class = &FooClass_Array, .datum = \{ .ptr = new } };"},
      #size
              -> {signature: [], vars: 0,
                  body: "return FOO_INTEGER(PTR(FooArray, ctx->receiver.datum)->size);"}
}!
