import lib.assert.Assert
import impl.parser.Parser

class ENTRY { succ exit }
    direct method new
        self succ: False
             exit: False!
    method succ: val
        succ = val!
    method visitBy: visitor
        visitor visitEntry: self!
end

class CpsConverter {}
    direct method convert: syntax
        let entry = ENTRY new.
        entry succ: (syntax visitBy: CpsConverter new
                            with: entry exit).
        entry!

    method visitLiteral: cps with: cc
        cps!
end

class CpsPrinter { output }
    direct method printToString: cps
        StringOutput
            with: { |out|
                    cps visitBy: (CpsPrinter output: out) }!

    method visitEntry: cps
        output print: "
start():
  return(42)
"!

end

class TestCPS { assert }
    is TestSuite

    method test_convert_constant_integer
        let syntax = Parser parseExpression: "123".
        let cps = CpsConverter convert: syntax.
        assert that: { CpsPrinter printToString: cps }
               equals: "
start():
  return(123)
"!
end

class Main {}
    direct method run: command in: system
        TestCPS runTests: (Assert reportingTo: system output)
                in: system!
end
