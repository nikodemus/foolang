class Assert { system fail }
   class method using: system
      self system: system fail: False
   method check: cond on: x onSuccess: success onFailure: failure
      let res = { cond value: x }
                    onError: { |e ctx|
                               system output println: "ERROR: {e}".
                               failure value }.
      res
        ifTrue: success
        ifFalse: failure
   method forAll: generator that: cond testing: thing
      let n = 0.
      generator
         do: { |x| self check: cond on: x
                        onSuccess: { n = n + 1 }
                        onFailure: { system output
                                       println: "! {thing} failed on: {x}".
                                     fail = True.
                                     return False }}.
      system output println: "  {thing} ok ({n} assertions)".
      True
   method exit
      system exit: (fail ifTrue: { 1 } ifFalse: { 0 })
end

class TestArrays {}
   class method do: block
      block value: [1, 2, 3, 4].
      block value: [123, 10293810293, -123, 123].
      block
end

-- Generates signed integers small enough to add without overflowing.
class SmallIntegers {}
   class method do: block
      -- First around zero
      block value: -1.
      block value: 0.
      block value: 1.
      -- Then random numbers
      let rng = Random new.
      100 times: { block value: (rng integer / 2) }
end

class Main { assert }
    class method system: system
       self assert: (Assert using: system)

    method run
       self testByteArrays.
       self testIntegers.
       -- self testArrays.
       assert exit

    method testByteArrays
       assert forAll: (1 to: 10)
              that: { |n|
                      let bytes = ByteArray new: n.
                      let p = n / 2 + 1.
                      let old = bytes at: p.
                      bytes put: n at: p.
                      let new = bytes at: p.
                      (bytes size == n)
                         and: (old == 0)
                         and: (new == n)
                         and: (n > 0) }
              testing: "ByteArray creation and access"

    method testIntegers
       assert forAll: SmallIntegers
              that: { |x| x + x == x * 2 }
              testing: "integer self addition".
       assert forAll: SmallIntegers
              that: { |x| x - x == 0 }
              testing: "integer self substraction".
       assert forAll: SmallIntegers
              that: { |x| x + 1 == 1 + x }
              testing: "integer addition commutates"

    method testArrays
       assert forAll: TestArrays
              that: { |a|
                      let x = a copy.
                      a reverse.
                      (x == a) not }
              testing: "array copy"

end
