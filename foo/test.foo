class Assert { system fail }
   class method using: system
      self system: system fail: False
   method check: cond on: x onSuccess: success onFailure: failure
      let res = { cond value: x }
                    onError: { |e ctx|
                               system output println: "ERROR: {e}".
                               failure value }.
      res
        ifTrue: success
        ifFalse: failure
   method forAll: generator that: cond testing: thing
      let n = 0.
      generator
         do: { |x| self check: cond on: x
                        onSuccess: { n = n + 1 }
                        onFailure: { system output
                                       println: "! {thing} failed on: {x}".
                                     fail = True.
                                     return False }}.
      system output println: "  {thing} ok ({n} assertions)".
      True
   method exit
      system exit: (fail ifTrue: { 1 } ifFalse: { 0 })
   method true: block testing: thing
       block value
           ifTrue: { system output println: "  {thing} ok" }
           ifFalse: { fail = True.
                      system output println: "! {thing} failed" }
end

class TestArrays {}
   class method do: block
      block value: [1, 2, 3, 4].
      block value: [123, 10293810293, -123, 123].
      block
end

-- Generates signed integers small enough to add without overflowing.
class SmallIntegers {}
   class method do: block
      -- First around zero
      block value: -1.
      block value: 0.
      block value: 1.
      -- Then random numbers
      let rng = Random new.
      100 times: { block value: (rng integer / 2) }
end

class ShortStringSeqs {}
   class method do: block
      -- FIXME: actual random generation, please
      block value: [].
      block value: [""].
      block value: ["", ""].
      block value: ["", "", ""].
      block value: ["123", "", ""].
      block value: ["", "123", ""].
      block value: ["", "", "123"]
end

class Floats {}
   class method do: block
      block value: -0.0.
      block value: 0.0.
      block value: 1.0.
      block value: -1.0.
      block value: 0.1.
      block value: -0.1.
      let rng = Random new.
      100 times: { block value: rng float }
end

class Box { value }
    method *** other
        self value * other
    method * other
        self value * other
    method + other
        self value + other
    method prefix-
        - (self value)
end

class Main { assert }
    class method run: cmd in: system
       let instance = self assert: (Assert using: system).
       instance test

    method test
        self testByteArrays.
        self testFloats.
        self testIntegers.
        self testStringOutput.
        self testPrecedence.
        self testPrefix.
        self testRecord.
        assert exit

    method testRecord
        assert true: { let r = {x: -10, y: 52}.
                       r x + r y == 42 }
               testing: "record creation and accessors"

    method testPrefix
        assert forAll: (1 to: 10)
        that: { |n|
                let b = Box value: n.
                -n == -b }
        testing: "custom prefix method"

    method testPrecedence
       assert forAll: (2 to: 10)
              that: { |n|
                      let a1 = n * n + n.
                      let a2 = (n * n) + n.
                      let b1 = (Box value: n) *** n + n.
                      let b2 = n * (n + n).
                      (a1 == a2)
                        and: (b1 == b2)
                        and: (a1 == b1) not }
              testing: "operator precedence"

    method testByteArrays
       assert forAll: (1 to: 10)
              that: { |n|
                      let bytes = ByteArray new: n.
                      let p = n / 2 + 1.
                      let old = bytes at: p.
                      bytes put: n at: p.
                      let new = bytes at: p.
                      (bytes size == n)
                         and: (old == 0)
                         and: (new == n)
                         and: (n > 0) }
              testing: "ByteArray creation and access"

    method testFloats
       assert forAll: Floats
              that: { |x| x + x == x * 2.0 }
              testing: "float addition"

    method testIntegers
       assert forAll: SmallIntegers
              that: { |x| x + x == x * 2 }
              testing: "integer self addition".
       assert forAll: SmallIntegers
              that: { |x| x - x == 0 }
              testing: "integer self substraction".
       assert forAll: SmallIntegers
              that: { |x| x + 1 == 1 + x }
              testing: "integer addition commutates"

    method testStringOutput
       assert forAll: ShortStringSeqs
              that: { |seq|
                      let out = StringOutput new.
                      let cmp = "".
                      seq do: { |s|
                                 cmp = cmp append: s.
                                 out print: s }.
                      cmp == out content }
             testing: "string output"

end
