class Nothing {}
end

class TestSuccess { case input }
    method reportOn: output
        -- No problem, nothing to report
        output!
end

class TestFailure { case input expected result }
    method reportOn: output
        let valueMessage = input is Nothing
                               ifTrue: { "" }
                               ifFalse: { " on {input displayString}" }.
        let resultMessage = expected is Nothing
                                ifTrue: { "" }
                                ifFalse: { ", expected '{expected}', got '{result}'" }.
        let name = case name.
        name is False
            ifTrue: { output print: "\n! FAILURE{valueMessage}{resultMessage}" }
            ifFalse: { output print: "\n! FAILUREin {case name}{valueMessage}{resultMessage}" }!
end

class TestError { case input what }
    method reportOn: output
        input is Nothing
            ifTrue: { output print: "! ERROR in {case name}: {what}" }
            ifFalse: { output print: "! ERROR in {case name} on {input}: {what}" }!
end

class TestCase { name condition successCount failureCount errorCount }
    direct method name: name condition: condition
        self
            name: name
            condition: condition
            successCount: 0
            failureCount: 0
            errorCount: 0!

    method failed
        failureCount + errorCount > 0!

    method expect: expected using: block
        let actual = { condition value }
                         onPanic: { |p|
                                    return self errorOn: Nothing
                                                what: (p description) }.
        (block value: actual value: expected)
            ifTrue: { self successOn: Nothing }
            ifFalse: { self failureOn: Nothing
                            expected: expected
                            result: actual }!

    method tryOn: input
        let ok = { condition value: input }
                     onPanic: { |p|
                                return self errorOn: input
                                            what: (p description) }.
        ok
            ifTrue: { self successOn: input }
            ifFalse: { self failureOn: input }!

    method successOn: input
        successCount = successCount + 1.
        TestSuccess case: self input: input!
    method failureOn: input
        self failureOn: input expected: Nothing result: Nothing!
    method failureOn: input expected: expected result: result
        failureCount = failureCount + 1.
        TestFailure case: self input: input expected: expected result: result!
    method errorOn: input what: error
        errorCount = errorCount + 1.
        TestError case: self input: input what: error!
end

class Assert { output failed }
    is Object

    direct method reportingTo: output
        self output: output failed: False!

    direct method runSuite: suite in: system
        self runSuite: suite in: system onFailure: { self }!

    direct method runSuite: suite in: system onFailure: failBlock
        let assert = self reportingTo: system output.
        let tests = suite assert: assert.
        system output println: tests classOf name.
        let start = system clock time.
        tests doTests: { |each|
                         tests runTest: each in: system.
                         assert failed
                             ifTrue: failBlock }.
        let stop = system clock time.
        system output println: "  total: {(stop-start) real decimalString: 1}s".
        assert!

    method report: testResult
        testResult reportOn: output!

    method forAll: inputs that: condition testing: thing
        let test = TestCase name: thing condition: condition.
        inputs do: { |input| self report: (test tryOn: input) }.
        failed = failed or: test failed!

    method passed
        failed not!

    method exitCode
        failed
            ifTrue: { 1 }
            ifFalse: { 0 }!

    method that: condition matches: value using: block testing: thing
        let test = TestCase name: thing condition: condition.
        self report: (test expect: value using: block).
        failed = failed or: test failed!

    method that: condition is: value testing: thing
        self
            that: condition
            matches: value
            using: { |actual expected| actual is expected }
            testing: thing!

    method that: condition is: value
        self
            that: condition
            matches: value
            using: { |actual expected| actual is expected }
            testing: False!

    method _test: test _catching: ex
        { test
            on: ex
            do: { |e|
                  Output debug println: "caught {ex} = {e}".
                  return e } }!

    method that: condition raises: ex where: test testing: thing
        self
            that: (condition catch: ex)
            matches: False
            using: { |actual _|
                     (ex includes: actual)
                         ifTrue: { test value: actual } }
            testing: thing!

    method that: condition raises: ex where: test
        self that: condition
             raises: ex
             where: test
             testing: False!

    method that: condition equals: value testing: thing
        self
            that: condition
            matches: value
            using: { |actual expected| actual == expected }
            testing: thing!

    method that: condition equals: value
        self
            that: condition
            matches: value
            using: { |actual expected| actual == expected }
            testing: False!

    method true: condition testing: thing
        self that: condition is: True testing: thing!

    method false: condition testing: thing
        self that: condition is: False testing: thing!

    method true: condition
        self that: condition is: True!

    method false: condition
        self that: condition is: False!

end

extend TestSuite
    direct method run: command in: system
        self runTests: (Assert reportingTo: system output)
             in: system!
end
