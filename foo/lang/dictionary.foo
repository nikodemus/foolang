import .object.Object

-- FIXME: should be Collection!
extend Dictionary
    is Object

    direct method withCapacity: capacity
        -- Ignore hint, implement in self-hosted implementation.
        self new!

    direct method keys: keys values: values
        let new = self new.
        keys with: values
             do: { |k v| new
                       at: k
                       put: v }.
        new!

    method _keys
        -- To allow dumping in transpiler for target
        self keys sort!

    method _values
        -- To allow dumping in transpiler for target
        let values = Array new: self size.
        self _keys
            doWithIndex: { |key index|
                           values
                               put: (self at: key)
                               at: index }.
        values!

    method isEmpty
        self size is 0!

    method at: key
        self at: key
             ifNone: { False }!

    method at: key put: value
        self put: value
             at: key!

    method has: key
        self at: key
             ifNone: { return False }.
        True!

    method at: key ifNonePut: block
        self at: key
             ifNone: { let new = block value.
                       self put: new
                            at: key.
                       new }!

    method toString
        StringOutput with: { |out|
                             out print: "\{ ".
                             self keys sort
                                 do: { |each|
                                       out display: each.
                                       out print: " -> ".
                                       out display: (self at: each) }
                                 interleaving: { out println: ",".
                                                 out print: "  " }.
                             out print: " }" }!

    method isEquivalent: other
        self size is other size
            ifFalse: { return False }.
        self doKeys: { |key|
                       (other
                            at: key
                            ifNone: { return False }) == (self at: key)
                           ifFalse: { return False } }.
        True!

    method merge: other
        other doKeys: { |key|
                        self put: (other at: key)
                             at: key }.
        self!

    method removeAll: iter
        iter do: { |each| self remove: each }.
        self!

    method keys
        let keys = Array new: self size.
        let index = 1.
        self doKeys: { |key|
                       keys put: key
                            at: index.
                       index = index + 1 }.
        keys!

    method values
        let values = Array new: self size.
        let index = 1.
        self doValues: { |value|
                         values
                             put: value
                             at: index.
                         index = index + 1 }.
        values!

    method do: block
        self doKeys: { |key|
                       block
                           cull: key
                           value: (self at: key) }!

    method doValues: block
        self doKeys: { |key|
                       block value: (self at: key) }.
        self!

    method copy
        let copy = Dictionary new.
        self doKeys: { |key|
                       copy put: (self at: key)
                            at: key }.
        copy!
end
