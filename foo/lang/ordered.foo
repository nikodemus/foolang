import .any.Any
import .iterable.Iterable
import .iterable.Iterator

class OrderedIterator { object index }
    is Iterator

    direct method new: object
        self object: object index: 1!

    method nextIfNone: block

        let next = index > object size
            ifTrue: { return block value }
            ifFalse: { object at: index }.
        index = index + 1.
        next!

    method hasNext
        index <= object size!
end

interface Ordered
    is Iterable

    required method size
    required method at: index

    method at: index put: elt
        self put: elt at: index!

    method bytes
        let bytes = ByteArray new: self size.
        1 to: self size do: { |i| bytes put: (self at: i) at: i }.
        bytes!

    method asArray
        let new = Array new: self size.
        self doWithIndex: { |each index|
                            new put: each at: index }.
        new!

    method iterator
        OrderedIterator new: self!

    method first
        self at: 1!

    method firstOrFalse
        self size is 0
            ifTrue: { False }
            ifFalse: { self at: 1 }!

    method second
        self at: 2!

    method third
        self at: 3!

    method last
        self at: self size!

    method butlast
        self isEmpty
            ifTrue: { return self }.
        self from: 1 to: (self size - 1)!

    method rest
        self from: 2 to: self size!

    method checkEqualInternal: other
        self size == other size
            ifFalse: { self mismatch: other }.
        self with: other
             do: { |a b| a checkEqual: b }!

    method isEquivalent: other
        self size == other size
            ifFalse: { return False }.
        self with: other
             do: { |a b|
                   a == b
                       ifFalse: { return False } }.
        True!

    method isEmpty
        self size is 0!

    method copy
        let copy = Self of: self elementType new: self size.
        self copyTo: copy!

    method copyTo: other
         self copyTo: other startingAt: 1!

    method copyTo: other startingAt: index
        self from: 1 to: self size copyTo: other startingAt: index!

    method from: first to: last copyTo: other startingAt: index
        let offset = 0.
        first to: last
              do: { |i|
                    other put: (self at: i) at: (index + offset).
                    offset = offset + 1 }.
        other!

    method concat: other
        Output debug println: "XXX: {self} concat: {other}".
        let copy = Self of: self elementType new: self size + other size.
        self copyTo: copy.
        other copyTo: copy startingAt: self size + 1!

    method species
        Self of: self elementType!

    method collect: block
        self collect: block as: self species!

    method collect: block of: type
        self collect: block as: (Self of: type)!

    method collect: block as: type
        let n = self size.
        let coll = type new: self size.
        1 to: n
          do: { |i|
                coll put: (block value: (self at: i)) at: i }.
        coll!

    method reject: block
        self reject: block as: self species!

    method reject: block as: type
        let capacity = self size.
        let tmp = type new: capacity.
        let n = 0.
        1 to: capacity
          do: { |index|
                let maybe = self at: index.
                (block value: maybe)
                    ifFalse: { n = n + 1.
                               tmp put: maybe at: n } }.
        tmp from: 1 to: n!

    method select: block
        self select: block as: self species!

    method select: block as: type
        let capacity = self size.
        let tmp = type new: capacity.
        let n = 0.
        1 to: capacity
          do: { |index|
                let maybe = self at: index.
                (block value: maybe)
                    ifTrue: { n = n + 1.
                              tmp put: maybe at: n } }.
        tmp from: 1 to: n!

    -- FIXME: Inconsistency between split:do: and splitBy:
    -- ...the use-cases are different, but at least the idea should be
    -- made clear in the names.
    method split: byBlock do: block
        let cursor = 1.
        1 to: self size
          do: { |index|
                (byBlock value: (self at: index))
                    ifTrue: { block value: (self from: cursor to: index).
                              cursor = index + 1 } }.
        cursor <= self size
            ifTrue: { block value: (self from: cursor to: self size) }!

    method do: block
        1 to: self size
          do: { |i|
                block value: (self at: i) }.
        self!

    method doWithIndex: block
        1 to: self size
          do: { |i|
                block value: (self at: i) value: i }.
        self!

    method position: block ifNone: noneBlock
        self doWithIndex: { |each index|
                            (block value: each)
                                ifTrue: { return index } }.
        noneBlock value!

    method position: block
        self position: block ifNone: { return False }!

    method with: other collect: block
        self with: other collect: block of: Any!

    method with: other collect: block of: type
        self with: other collect: block as: (Self of: type)!

    method with: other collect: block as: species
        let new = species new: self size.
        1 to: self size
          do: { |i|
                new put: (block
                              value: (self at: i)
                              value: (other at: i))
                    at: i }.
        new!

    method with: other do: block
        1 to: (self size min: other size)
          do: { |i| block value: (self at: i) value: (other at: i) }.
        self!

    method with: other inject: value into: block
        let result = value.
        self
            with: other
            do: { |a b| result = block value: result value: a value: b }.
        result!

    method with: other sum: block
        self
            with: other
            inject: 0
            into: { |res a b|
                    res + (block value: a value: b) }!

    method replaceFrom: first to: last with: source startingAt: sourceFirst
        let j = sourceFirst.
        first to: last
              do: { |i|
                    self at: i put: (source at: j).
                    j = j + 1 }.
        self!

    method reverse
        let n = self size.
        0 to: n
          do: { |offset|
                let i = 1 + offset.
                let j = n - offset.
                j <= i
                    ifTrue: { return self }.
                self swap: i with: j }.
          panic "BUG: this should never happen."!

    method reversed
        self copy reverse!

    method sort
        self sort: { |a b| a < b }!

    method sort: block
        -- Unfortunate a straigthforward rust-side wrapper for Vec::sort_by()
        -- cannot propagate errors from the comparison function, so instead
        -- here's a quick and dirty quicksort. O(N^2) worst case, since I
        -- was too lazy to do the center pivot.
        self _quicksort: 1 to: self size by: block!

    method sorted
        self copy sort!

    method sorted: block
        self copy sort: block!

    method _quicksort: left to: right by: block
        left < right
            ifTrue: { let p = self _partition: left to: right by: block.
                      self _quicksort: left to: p - 1 by: block.
                      self _quicksort: p + 1 to: right by: block }.
        self!

    method _partition: left to: right by: block
        let pivot = self at: right.
        let i = left.
        left to: right
                 do: { |j|
                       let x = self at: j.
                       (block value: x value: pivot)
                           ifTrue: { self swap: i with: j.
                                     i = i + 1 } }.
        self swap: i with: right.
        i!

    method swap: i with: j
        let tmp = self at: i.
        self put: (self at: j) at: i.
        self put: tmp at: j.
        self!

end
