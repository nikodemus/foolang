import .interval.Interval
import .object.Object

interface Number
    is Object

    direct method default
        0!

    method == right -> Boolean
        self is right!

    method isEquivalent: right
        self is right!

    method broadcast: block to: collection
        collection collect: { |x| block value: x value: self }!

    method square
        self * self!

    method + right
        right addNumber: self!
    method - right
        right subNumber: self!
    method * right
        right mulNumber: self!
    method / right
        right divNumber: self!

    method < right
        right ltNumber: self!
    method > right
        right gtNumber: self!
    method <= right
        right lteNumber: self!
    method >= right
        right gteNumber: self!

    -- FIXME: Should support floating point exponents for floats at least
    method ^ power::Integer
        let result = 1.
        power times: { result = result * self }.
        result!

    method abs
        self < 0.0
            ifTrue: { -self }
            ifFalse: { self }!

    method max: other
        self < other
            ifTrue: { other }
            ifFalse: { self }!

    method min: other
        self > other
            ifTrue: { other }
            ifFalse: { self }!

    method to: other by: step
       Interval from: self to: other by: step!

    method leftPad: width by: padding
        padding size is 1 assert: "padding size is 1 in Number#leftPad:by:".
        let padded = self toString.
        { padded size < width }
            whileTrue: { padded = "{padding}{padded}" }.
        padded!

end
