import .iterable.Iterator
import .iterable.Iterable
import .ordered.Ordered

class ArrayIterator { array index }
    is Iterator

    class method new: array
        self array: array index: 1

    method nextIfNone: block
        let next = index > array size
            ifTrue: { return block value }
            ifFalse: { array at: index }.
        index = index + 1.
        next

    method hasNext
        index <= array size
end

class Specialized { containerClass elementType }
    class method class: containerClass of: elementType
        self containerClass: containerClass elementType: elementType
    method new
        containerClass of: elementType new: 0
    method new: size
        containerClass of: elementType new: size
    method new: size value: value
        containerClass of: elementType new: size value: value
    method includes: thing
        (containerClass includes: thing)
            ifTrue: { thing elementType is elementType }
    method typecheck: thing
        self includes: thing
             ifFalse: { TypeError raise: thing expected: self }.
        thing
    method displayOn: stream
        stream print: "{containerClass} of: {elementType}"
end

extend Array
    is Ordered

    class method from: ordered
        (Array includes: ordered)
            ifTrue: { return ordered }.
        let new = self new: ordered size.
        1 to: new size
          do: { |i| new put: (ordered at: i) at: i }.
        new

    class method new: size
        self of: Object new: size value: False

    class method new: size value: value
        self of: Object new: size value: value

    class method of: type
        Specialized class: Array of: type

    class method of: type new: size
        self of: type new: size value: type default

    method + x
        x broadcast: {|a b| a + b} to: self.
    method - x
        x broadcast: {|a b| a - b} to: self.
    method * x
        x broadcast: {|a b| a * b} to: self.
    method / x
        x broadcast: {|a b| a / b} to: self.

    method broadcast: block to: collection
        collection with: self collect: block.

    method iterator
        ArrayIterator new: self

    method elementType
        -- KLUDGE: otherwise Iterator#elementType:
        -- need something like
        --  is Iterable except: [#elementType]
        self arrayElementType

    method _emitOn: stream using: block
        stream print: "[".
        self do: { |x| block value: x }
             interleaving: { stream print: ", " }.
        stream print: "]".

    method displayOn: stream
        self _emitOn: stream using: { |x| x displayOn: stream }.

    method printOn: stream
        self _emitOn: stream using: { |x| x printOn: stream }.

    method dot: other
        self with: other sum: { |a b| a * b }.

    method norm
       (self inject: 0.0 into: { |abs elt| abs + (elt * elt) }) sqrt.

    method normalized
       let reciprocal = 1.0 / (self norm).
        self * reciprocal.

    method scalarProjectionOn: other
        (self dot: other) / other norm.

    method vectorProjectionOn: other
        ((self dot: other) / (other dot: other)) * other.

    method addNumber: left
       self collect: { |elt| left + elt }.
    method subNumber: left
       self collect: { |elt| left - elt }.
    method divNumber: left
       self collect: { |elt| left / elt }.
    method mulNumber: left
       self collect: { |elt| left * elt }.
end

class TestArray {}
    class method testEquality: assert
        assert true: { [1, 2, 3] == [1, 2, 3] }
               testing: "Array#== (true 1)".
        assert true: { [1, 2, [3, 4]] == [1, 2, [3, 4]] }
               testing: "Array#== (true 2)".
        assert false: { [1, 2, 4] == [1, 2, 3] }
               testing: "Array#== (false 1)".
        assert false: { [1, 2, 3, 4] == [1, 2, 3] }
               testing: "Array#== (false 2)".
        assert false: { ["one", 2, 3] == [1, "two", 3] }
               testing: "Array#== (false 3)".

    class method testSort: assert
        assert that: { [] sort }
               equals: []
               testing: "sort, empty".
        assert that: { [1] sort }
               equals: [1]
               testing: "sort, singular".
        assert that: { [1, 1] sort }
               equals: [1, 1]
               testing: "sort, two identical".
        assert that: { [1, 2] sort }
               equals: [1, 2]
               testing: "sort, two in order".
        assert that: { [2, 1] sort }
               equals: [1, 2]
               testing: "sort, two in reverse order".
        assert that: { [1, 2, 3] sort }
               equals: [1, 2, 3]
               testing: "sort, three in order".
        assert that: { [3, 2, 1] sort }
               equals: [1, 2, 3]
               testing: "sort, three in reverse order".
        assert that: { [9, 2, 1, 8, 7, 3, 5, 4, 6, 0] sort }
               equals: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
               testing: "sort, ten".

    class method testReverse: assert
        assert that: { let a = [].
                       a reverse.
                       a }
               equals: []
               testing: "reverse array (empty)".
        assert that: { let a = [1].
                       a reverse.
                       a }
               equals: [1]
               testing: "reverse array (1)".
        assert that: { let a = [1,2].
                       a reverse.
                       a }
               equals: [2,1]
               testing: "reverse array (2)".
        assert that: { let a = [1,2,3].
                       a reverse.
                       a }
               equals: [3,2,1]
               testing: "reverse array (3)".
        assert that: { let a = [1,2,3].
                       a reverse }
               equals: [3,2,1]
               testing: "reverse array, retval (3)".

    class method testReversed: assert
        assert that: { let a = [].
                       a reversed }
               equals: []
               testing: "reversed array (empty)".
        assert that: { let a = [1].
                       a reversed }
               equals: [1]
               testing: "reversed array (1)".
        assert that: { let a = [1,2].
                       a reversed }
               equals: [2,1]
               testing: "reversed array (2)".
        assert that: { let a = [1,2,3].
                       a reversed }
               equals: [3,2,1]
               testing: "reversed array (3)".
        assert that: { let a = [1,2,3].
                       a reversed.
                       a }
               equals: [1,2,3]
               testing: "reversed array, side-effect (3)".

    class method runTests: assert
        self testEquality: assert.
        self testSort: assert.
        self testReverse: assert.
        self testReversed: assert.
end
