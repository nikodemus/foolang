extend FileStream
    method displayOn: stream
        stream print: self toString

    method isOpen
        self isClosed not

    method readBytes
        let n = self size - self offset.
        let bytes = ByteArray new: n.
        let got = self tryRead: n bytesInto: bytes at: 1.
        got == n
            ifFalse: { panic "Could not #readBytes from {self} upto end of file" }.
        bytes

    method read: n bytesInto: buffer at: index
        let got = self tryRead: n bytesInto: buffer at: index.
        got == n
            ifTrue: { return n }
            ifFalse: { panic "Could not read {n} bytes from {self}." }

    method tryRead: n bytesInto: buffer at: index
        let total = 0.
        { n > 0 }
            whileTrue: { let did = self
                                       tryReadOnce: n
                                       bytesInto: buffer
                                       at: index.
                         did == 0
                             ifTrue: { return total }.
                         total = total + did.
                         n = n - did.
                         index = index + did }.
        total

    method write: n bytesFrom: buffer at: index
        let did = self tryWrite: n bytesFrom: buffer at: index.
        did == n
            ifTrue: { return n }
            ifFalse: { panic "Could not write {n} bytes to {self}." }

    method tryWrite: n bytesFrom: buffer at: index
        let total = 0.
        { n > 0 }
            whileTrue: { let did = self
                                       tryWriteOnce: n
                                       bytesFrom: buffer
                                       at: index.
                         did == 0
                             ifTrue: { return total }.
                         total = total + did.
                         n = n - did.
                         index = index + did }.
        total

    method size
        let pos = self offset.
        { self offsetFromEnd: 0 } finally: { self offset: pos }

    method writeBytes: bytes
        self write: bytes size bytesFrom: bytes at: 1
end

class TestFileStream { assert dir foopath foodata }

    method testReadBytes
        let newpath = dir path: "TestFileStream-testReadBytes.tmp".
        let newdata = "\r\r\n\n".
        newpath forWrite truncateExisting
            createOrOpen: { |f| f writeString: newdata }.
        assert that: { newpath forRead
                           open: { |f| f readBytes } }
               equals: [13, 13, 10, 10]
               testing: "FileStream#readBytes".
        newpath deleteFile

    method testReadString
        assert true: { foodata is (foopath forRead open readString) }
               testing: "FileStream#readString (ok)".
        assert true: { let s = foopath forRead open.
                       s close.
                       { s readString. False } onPanic: { |p| True } }
               testing: "FileStream#readString (closed)".

    method testResize
        let newpath = dir path: "TestFileStream-testResize.tmp".
        let newdata = "This is a temporary file for testing.\n".
        newpath forWrite truncateExisting
            createOrOpen: { |f| f writeString: newdata }.
        assert true: { newpath forRead forWrite
                           open: { |f|
                                   [ f size, f resize: 4. f size, f readString ]
                                       == [ 38, 4, "This" ] } }
               testing: "FileStream#resize:".
        newpath deleteFile

    method testTryReadBytesIntoAt
        let newpath = dir path: "TestFileStream-testTryReadBytesIntoAt.tmp".
        let newdata = "\r\n\r\n".
        newpath forWrite truncateExisting
            createOrOpen: { |f| f writeString: newdata }.
        let buf = ByteArray new: 6.
        buf put: 101 at: 1.
        buf put: 106 at: 6.
        assert that: { newpath forRead
                           open: { |f| f tryRead: 4 bytesInto: buf at: 2 } }
               is: 4
               testing: "FileStream#tryRead:bytesInto:at: (return)".
        assert that: { [101, 13, 10, 13, 10, 106] }
               equals: buf
               testing: "FileStream#tryRead:bytesInto:at: (data)".
        assert that: { newpath forRead
                           open: { |f| f tryRead: 6 bytesInto: buf at: 1 } }
               is: 4
               testing: "FileStream#tryRead:bytesInto:at: (short return)".
        assert that: { [13, 10, 13, 10, 10, 106] }
               equals: buf
               testing: "FileStream#tryRead:bytesInto:at: (short data)".
        newpath deleteFile

    method testTryWriteBytesFromAt
        let newpath = dir path: "TestFileStream-testTryWriteBytesFromAt.tmp".
        let bytes = ByteArray new: 12.
        1 to: bytes size
          do: { |i| bytes put: i at: i }.
        assert that: { newpath forWrite truncateExisting
                           createOrOpen: { |f|
                                           f
                                               tryWrite: 10
                                               bytesFrom: bytes
                                               at: 2 } }
               is: 10
               testing: "FileStream#tryWrite:bytesFrom:at: (return)".
        let data = ByteArray new: 12.
        assert that: { newpath forRead
                           open: { |f| f tryRead: data size bytesInto: data at: 1 } }
               is: 10
               testing: "FileStream#tryWrite:bytesFrom:at: (wrote length)".
        assert that: { [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0] }
               equals: data
               testing: "FileStream#tryWrite:bytesFrom:at: (wrote data)".
        newpath deleteFile

    method testIsOpen
        assert true: { foopath forRead open: { |f| f isOpen } }
               testing: "FileStream#isOpen (true)".
        assert false: { (foopath forRead open: { |f| f }) isOpen }
               testing: "FileStream#isOpen (false)"

    method testIsClosed
        assert false: { foopath forRead open: { |f| f isClosed } }
               testing: "FileStream#isClosed (false)".
        assert true: { (foopath forRead open: { |f| f }) isClosed }
               testing: "FileStream#isClosed (true)"

    method testOffset
        assert that: { foopath forRead open: { |f| f offset } } is: 0
               testing: "FileStream#offset (0)".
        assert that: { foopath forRead
                           open:  { |f| f readString. f offset } }
               is: 45
               testing: "FileStream#offset (45)"

    method testOffsetSet
        assert that: { foopath forRead
                           open: { |f| f offset: 5. f readString } }
               is: "file just says 'foo' for test purposes.\n"
               testing: "FileStream#offset:"

    method testOffsetFromEnd
        assert that: { foopath forRead
                           open: { |f| f offsetFromEnd: -10. f readString } }
               is: "purposes.\n"
               testing: "FileStream#offsetFromEnd:"

    method testSize
        assert that: { foopath forRead
                           open: { |f|
                                   f offsetFromEnd: -10.
                                   f offsetFromHere: -5.
                                   f readString } }
               is: "test purposes.\n"
               testing: "FileStream#offsetFromHere:".
        assert true: { let res = foopath forRead
                                    open: { |f| [f size, f offset] }.
                       res == [45, 0] }
               testing: "FileStream#size"

    method testWriteString
        let newpath = dir path: "TestFileStream-testWriteString.tmp".
        let newdata = "This is a temporary file for testing.\n".
        -- Clean up first
        newpath ifExists: { newpath deleteFile }.
        assert false: { newpath exists }
               testing: "FileStream#writeString: (pre)".
        newpath forWrite create: { |f| f writeString: newdata }.
        assert that: { newpath readString }
               is: newdata
               testing: "FileStream#writeString: (post)".
        newpath deleteFile

    class method runTests: assert in: system
        let tests = self assert: assert
                         dir: system currentDirectory
                         foopath: (system currentDirectory path: "foo/tests/foo.txt")
                         foodata: "This file just says 'foo' for test purposes.\n".
        tests testReadBytes.
        tests testReadString.
        tests testIsOpen.
        tests testIsClosed.
        tests testOffset.
        tests testOffsetFromEnd.
        tests testResize.
        tests testTryReadBytesIntoAt.
        tests testTryWriteBytesFromAt.
        tests testSize.
        tests testWriteString

end
