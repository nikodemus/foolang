class TestString { assert }
    is TestSuite

    method test_codeAt
        assert that: { ("aaaxbbb" codeAt: 4) }
               is: 120!

    method test_size
        assert that: { "foo" size }
               equals: 3.
        assert that: { "" size }
               equals: 0.
        assert that: { "\\" size }
               equals: 1!

    method test_isEquivalent
        assert true: { "foo" isEquivalent: "foo" }.
        assert false: { "foo" isEquivalent: "Foo" }!

    method test_from_to
        assert that: { "XXbarXX" from: 3 to: 5 }
               equals: "bar"!

    method test_from_to_empty
        assert that: { "XXbarXX" from: 3 to: 2 }
               equals: ""!

    method test_interpolation_1
        let fourtyTwo = 42.
        let q = 123.
        assert that: { "Answer is {fourtyTwo}, right? {q is 123}!" }
               equals: "Answer is 42, right? True!"!

    method test_interpolation_2
        let note = "<note>".
        let parser = { syntaxTable: { where: "<where>" } }.
        assert that: { "{note}: '{self _interpolation_2_aux}' in suffix position {parser syntaxTable where}:" }
               equals: "<note>: '<string>' in suffix position <where>:"!

    method _interpolation_2_aux
        "<string>"!

    method test_String_lines
        assert forAll: [["foo\nbar", ["foo", "bar"]],
                        ["foo", ["foo"]],
                        ["", [""]],
                        ["\n", ["", ""]]]
               that: { |test|
                       test first lines == test second asList }
               testing: "String#lines"!

    method test_String_trimRight
        assert forAll: [["foo", "foo"],
                        [" foo", " foo"],
                        [" foo ", " foo"],
                        [" foo ", " foo"],
                        ["    ", ""],
                        ["foo\n", "foo"]]
               that: { |test|
                       test first trimRight == test second }
               testing: "String#trimRight"!

    method test_String_trim
        assert forAll: [["foo", "foo"],
                        [" foo", "foo"],
                        [" foo ", "foo"],
                        ["foo   ", "foo"],
                        ["    ", ""],
                        ["foo\n", "foo"]]
               that: { |test|
                       test first trim == test second }
               testing: "String#trim"!

    method test_String_join
        assert true: { "a to b to c" == (" to " join: ["a", "b", "c"]) }!

    method test_String_less_than
        assert forAll: [["aQWE", "bQWE"],
                        ["aqwe", "b"],
                        ["a", "bqwe"],
                        ["asd", "asda"]]
               that: { |test|
                       test first < test second }
               testing: "String#< --> True".
        assert forAll: [["asd", "asd"],
                        ["b", "aqwe"],
                        ["bqwe", "a"],
                        ["asda", "asd"]]
               that: { |test|
                       (test first < test second) not }
               testing: "String#< --> False"!
end
