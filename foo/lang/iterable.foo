import .any.Any
import .object.Object

interface Iterator
    is Object

    required method nextIfNone: block
    required method hasNext

    method next
        self nextIfNone: { -- IteratorExhausted raise: self
                           -- FIXME!
                           panic "IteratorExhausted!" }!

    method skip
        self next.
        self!

    method skip: count
        1 to: count do: { self next }.
        self!

    method do: block
        { block value: (self nextIfNone: { return self }) } loop!

    method with: iterator do: block
        self with: iterator
             do: block
             ifExhausted: { return self }!

    method with: iterator do: block ifExhausted: exhaustedBlock
        { let each1 = self nextIfNone: { return self }.
          let each2 = iterator nextIfNone: exhaustedBlock.
          block value: each1 value: each2 } loop!
end

---
Implementing classes want to implement the following methods in addition to
`iterator` if possible, since the default implementations will reify the
iterator every time and won't perform as well.

- isEmpty
- do:
- do:with:ifExhausted:
- reduce:
- first
- second
- sizeEstimate
- elementType

All other methods are implemented on top of these ones.
---

interface Iterable
    is Object

    required method iterator

    method allSatisfy: block
        self do: { |each|
                   (block value: each)
                       ifFalse: { return False } }.
        True!

    method anySatisfy: block
        self do: { |each|
                   (block value: each)
                       ifTrue: { return True } }.
        False!

    method allTrue
        self do: { |each|
                   each is True
                       ifFalse: { return False } }.
        True!

    method collect: block into: collection
        self do: { |each|
                   collection add: (block value: each) }.
        collection!

    method collect: block as: type
        self collect: block into: type new!

    method with: iterable collect: block into: collection
        self
            with: iterable
            do: { |each1 each2|
                  collection add: (block value: each1 value: each2) }.
        collection!

    method count: block
        let n = 0.
        self do: { |each|
                   (block value: each)
                       ifTrue: { n = n + 1 } }.
        n!

    method with: other count: block
        let n = 0.
        self with: other
             do: { |each1 each2|
                   (block value: each1 value: each2)
                       ifTrue: { n = n + 1 } }.
        n!

    method do: block
        self iterator do: block.
        self!

    method with: iterable do: block
        self
            with: iterable
            do: block
            ifExhausted: { return self }.
        self!

    method with: iterable do: block ifExhausted: exhaustedBlock
        self iterator
            with: iterable iterator
            do: block
            ifExhausted: exhaustedBlock.
        self!

    method do: block interleaving: interBlock
        let first = True.
        self do: { |elt|
                   first
                       ifTrue: { first = False }
                       ifFalse: { interBlock value }.
                   block value: elt }!

    method elementType
        Any!

    method equals: other
        (self is other)
            ifTrue: { True }
            ifFalse: { self
                           with: other
                           do: { |each1 each2|
                                 each1 == each2
                                     ifFalse: { return False } }
                           ifExhausted: { return False } }.
        True!

    method find: block
        self find: block ifNone: { False }!

    method find: block ifNone: noneBlock
        self do: { |each|
                   (block value: each)
                       ifTrue: { return each } }.
        noneBlock value!

    method first
        self do: { |elt| return elt }!

    method ifEmpty: block
        self isEmpty
            ifTrue: block!

    method ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock
        self isEmpty
            ifTrue: emptyBlock
            ifFalse: notEmptyBlock!

    method ifNotEmpty: block
        self isEmpty
            ifFalse: block!

    method includes: object
        self anySatisfy: { |each| each == object }!

    method includesAll: iterable
        iterable allSatisfy: { |each1|
                               self anySatisfy: { |each2| each1 == each2 } }!

    method inject: value into: block
        self
            do: { |each|
                  value = block
                      value: value
                      value: each }.
        value!

    method with: iterable inject: value into: block
        self
            with: iterable
            do: { |each1 each2|
                  value = block
                      value: value
                      value: each1
                      value: each2 }.
        value!

    method with: iterable inject: value into: block ifExhausted: exhaustedBlock
        self
            with: iterable
            do: { |each1 each2|
                  value = block value: value value: each1 value: each2 }
            ifExhausted: exhaustedBlock.
        value!

    method isEmpty
        self iterator hasNext not!

    method isEquivalent: other
        self equals: other!

    method max
        self max: { |x| x }!

    method max: block
        self reduce: { |a b|
                       (block value: a) > (block value: b)
                           ifTrue: { a }
                           ifFalse: { b } }!

    method min
        self min: { |x| x }!

    method min: block
        self reduce: { |a b|
                       (block value: a) < (block value: b)
                           ifTrue: { a }
                           ifFalse: { b } }!

    method reduce: block
        let iter = self iterator.
        let value = iter next.
        { value = block
              value: value
              value: (iter nextIfNone: { return value }) } loop!

    method second
        self iterator skip next!

    method select: block as: species
        self select: block into: species new!

    method select: block into: collection
        self do: { |each|
                   (block value: each)
                       ifTrue: { collection add: each } }.
        collection!

    method contains: object
        self do: { |each|
                   each == object
                       ifTrue: { return True } }.
        False!

    method sizeEstimate
        self isEmpty
            ifTrue: { 0 }
            ifFalse: { 4 }!

    method sum
        self sum: { |x| x }!

    method sum: block
        self inject: 0
             into: { |sum each|
                     sum + (block value: each) }!

end
