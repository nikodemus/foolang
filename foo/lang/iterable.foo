interface Iterator

    required method nextIfNone: block
    required method hasNext

    method next
        self nextIfNone: { IteratorExhausted raise: self }!

    method skip
        self next.
        self!

    method skip: count
        1 to: count do: { self next }.
        self!

    method do: block
        { block value: (self nextIfNone: { return self }) } loop!

    method do: block with: iterator
        self with: iterator ifExhausted: { return self } do: block!

    method do: block with: iterator ifExhausted: exhaustedBlock
        { let each1 = self nextIfNone: { return self }.
          let each2 = iterator nextIfNone: exhaustedBlock.
          block value: each1 value: each2 } loop!
end

---
Implementing classes want to implement the following methods in addition to
`iterator` if possible, since the default implementations will reify the
iterator every time and won't perform as well.

- isEmpty
- do:
- do:with:ifExhausted:
- reduce:
- first
- second
- sizeEstimate
- elementType

All other methods are implemented on top of these ones.
---
-- required method iterator

import .object.Object

interface Iterable
    is Object

    method allSatisfy: block
        self do: { |each|
                   (block value: each)
                       ifFalse: { return False } }.
        True!

    method anySatisfy: block
        self do: { |each|
                   (block value: each)
                       ifTrue: { return True } }.
        False!

    method collect: block into: collection
        self do: { |each|
                   collection add: (block value: each) }.
        collection!

    method with: iterable collect: block into: collection
        self
            with: iterable
            do: { |each1 each2|
                  collection add: (block value: each1 value: each2) }.
        collection!

    method count: block
        let n = 0.
        self do: { |each|
                   (block value: each)
                       ifTrue: { n = n + 1 } }.
        n!

    method with: other count: block
        let n = 0.
        self do: { |each1 each2|
                   (block value: each1 value: each2)
                       ifTrue: { n = n + 1 } }.
        n!

    method do: block
        self iterator do: block.
        self!

    method with: iterable do: block
        self do: block with: iterable iterator ifExhausted: { return self }!

    method with: iterable do: block ifExhausted: exhaustedBlock
        self iterator do: block with: iterable iterator ifExhausted: exhaustedBlock.
        self!

    method do: block interleaving: interBlock
        let first = True.
        self do: { |elt|
                   first
                       ifTrue: { first = False }
                       ifFalse: { interBlock value }.
                   block value: elt }!

    method elementType
        Object!

    method equals: other
        (self is other)
            ifTrue: { True }
            ifFalse: { self
                           do: { |each1 each2|
                                 each1 == each2
                                     ifFalse: { return False } }
                           with: other
                           ifExhausted: { return False } }.
        True!

    method find: block
        self find: block ifNone: { False }!

    method find: block ifNone: noneBlock
        self do: { |each|
                   (block value: each)
                       ifTrue: { return each } }.
        noneBlock value!

    method first
        self do: { |elt| return elt }!

    method ifEmpty: block
        self isEmpty
            ifTrue: block!

    method ifEmpty: emptyBlock ifNotEmpty: notEmptyBlock
        self isEmpty
            ifTrue: emptyBlock
            ifFalse: notEmptyBlock!

    method ifNotEmpty: block
        self isEmpty
            ifFalse: block!

    method includes: object
        self anySatisfy: { |each| each == object }!

    method includesAll: iterable
        iterable allSatisfy: { |each1|
                               self anySatisfy: { |each2| each1 == each2 } }!

    method inject: value into: block
        self do: { |each| value = block value: value value: each }.
        value!

    method inject: value into: block with: iterable
        self
            do: { |each1 each2|
                  value = block value: value value: each1 value: each2 }
            with: iterable.
        value!

    method inject: value into: block with: iterable ifExhausted: exhaustedBlock
        self
            do: { |each1 each2|
                  value = block value: value value: each1 value: each2 }
            with: iterable
            ifExhausted: exhaustedBlock.
        value!

    method isEmpty
        self iterator hasNext not!

    method isEquivalent: other
        self equals: other!

    method max
        self max: { |x| x }!

    method max: block
        self reduce: { |a b|
                       (block value: a) > (block value: b)
                           ifTrue: { a }
                           ifFalse: { b } }!

    method min
        self min: { |x| x }!

    method min: block
        self reduce: { |a b|
                       (block value: a) < (block value: b)
                           ifTrue: { a }
                           ifFalse: { b } }!

    method reduce: block
        let iter = self iterator.
        let value = iter next.
        { value = block
              value: value
              value: (iter nextIfNone: { return value }) } loop!

    method second
        self iterator skip next!

    method select: block as: species
        self select: block into: species new!

    method select: block into: collection
        self do: { |each|
                   (block value: each)
                       ifTrue: { collection add: each } }.
        collection!

    method sizeEstimate
        4!

    method sum
        self sum: { |x| x }!

    method sum: block
        self inject: 0
             into: { |sum each|
                     sum + (block value: each) }!

end

---
This test class takes a `make` block which should construct an instance
of iterable to be tested containing the speficied elements.

FIXME: Some tests assume that the class being tested preserves order,
which it might not. Should probably split these into two parts, ones
depending on order and one not.
---
class TestIterable { make assert }
    method test
        self testAllSatisfy.
        self testAnySatisfy.
        self testCollectAs.
        self testCollectInto.
        self testCollectWithAs.
        self testCollectWithInto.
        self testCount.
        self testCountWith.
        self testDo.
        self testDoWith.
        self testDoWithIfExhausted.
        self testEquals.
        self testFind.
        self testFindIfNone.
        self testFirst.
        self testIfEmpty.
        self testIfEmptyNotEmpty.
        self testIfNotEmpty.
        self testIncludes.
        self testIncludesAll.
        self testInject.
        self testIsEmpty.
        self testIsEquivalent.
        self testMaxArg.
        self testMax.
        self testMinArg.
        self testMin.
        self testReduce.
        self testSecond.
        self testSelectAs.
        self testSelectInto.
        self testSizeEstimate.
        self testSumArg.
        self testSum!

    method testAllSatisfy
        assert true: { (make value: []) allSatisfy: { |each| False } }
               testing: "allSatisfy: -> True (empty)".

        assert true: { (make value: [42]) allSatisfy: { |each| each is 42 } }
               testing: "allSatisfy: -> True (size 1)".
        assert true: { (make value: [42, 42, 42]) allSatisfy: { |each| each is 42 } }
               testing: "allSatisfy: -> True (size 3)".

        assert false: { (make value: [0]) allSatisfy: { |each| each is 42 } }
               testing: "allSatisfy: -> False (size 1)".
        assert false: { (make value: [42, 42, 0]) allSatisfy: { |each| each is 42 } }
               testing: "allSatisfy: -> False (size 3)".
        assert false: { (make value: [42, 0, 42, 42]) allSatisfy: { |each| each is 42 } }
               testing: "allSatisfy: -> False (size 4)"!

    method testAnySatisfy
        assert false: { (make value: []) anySatisfy: { |each| True } }
               testing: "anySatisfy: -> False (empty)".

        assert true: { (make value: [42]) anySatisfy: { |each| each is 42 }}
               testing: "anySatisfy: -> True (size 1)".
        assert false: { (make value: [0]) anySatisfy: { |each| each is 42 }}
               testing: "anySatisfy: -> False (size 1)".

        assert true: { (make value: [0, 0, 42]) anySatisfy: { |each| each is 42 }}
               testing: "anySatisfy: -> True (size 3)".
        assert true: { (make value: [0, 0, 42, 0, 0]) anySatisfy: { |each| each is 42 }}
               testing: "anySatisfy: -> True (size 5)".

        assert false: { (make value: [0, 0, 0]) anySatisfy: { |each| each is 42 }}
               testing: "anySatisfy: -> False (size 3)"!

    method testCollectAs
        assert that: { (make value: []) collect: { |each| 42 } as: List }
               equals: []
               testing: "collect:as: (empty)".
               assert that: { ((make value: [1, 2, 3, 4]) collect: { |each| each + 1 } as: List)
                                  sort }
               equals: [41, 42, 43, 44]
               testing: "collect:as: (size 4)"!

    method testCollectInto
        assert that: { (make value: []) collect: { |each| 42 } into: [123] }
               equals: [123]
               testing: "collect:into: (empty)".
        assert that: { ((make value: [1,2,3]) collect: { |each| -each } into: [213])
                           sort }
               equals: [-1, -2, -3, 213]
               testing: "collect:into: (size 3)"!

    method testCollectWithAs
        assert that: { (make value: [])
                           collect: { |each1 each2| each1 / each2 }
                           with: [1,2]
                           as: List }
               equals: []
               testing: "collect:with:as: (empty)".
        assert that: { ((make value: [100, 200, 300])
                           collect: { |each1 each2| (each1 / each2) truncate }
                           with: [10, 2, 300, 1000]
                           as: List)
                       sort }
               equals: [1, 10, 100]
               testing: "collect:with:as: (size 3)"!

    method testCollectWithInto
        assert that: { (make value: [])
                           collect: { |each1 each2| each1 / each2 }
                           with: [1,2]
                           into: [123] }
               equals: [123]
               testing: "collect:with:into: (empty)".
        assert that: { ((make value: [100, 200, 300])
                           collect: { |each1 each2| (each1 / each2) truncate }
                           with: [10, 2, 300, 1000]
                           into: [123])
                       sort }
               equals: [1, 10, 100, 123]
               testing: "collect:with:into: (size 3)"!

    method testCount
        assert that: { (make value: []) count: { |each| True }}
               equals: 0
               testing: "count: (empty)".
        assert that: { (make value: [1,10,1,10,1,1,10]) count: { |each| each == 10 }}
               equals: 3
               testing: "count: (size 7)"!

    method testCountWith
        assert that: { (make value: [])
                           count: { |each1 each2| True }
                           with: [1, 2] }
               equals: 0
               testing: "count:with: (empty, non-empty)".
        assert that: { (make value: [1,10,1,10,1,1,10,10,10])
                           count: { |each1 each2| each1 == each2 }
                           with: [1,0,1,0,0,1,0] }
               equals: 3
               testing: "count:with: (size 7)"!

    method testDo
        assert that: { (make value: []) do: { |each| panic "never" }}
               equals: (make value: [])
               testing: "do: (empty)".
        assert that: { let elts = [].
                       let iter = make value: [1, 2, 3].
                       let res = iter do: { |each| elts add: each }.
                       res is iter
                           ifFalse: { panic "oops" }.
                       elts }
               equals: [1,2,3]
               testing: "do: (size 3)"!

    method testDoWith
        assert that: { (make value: [1,2])
                           do: { |each1 each2| panic "never" }
                           with: [] }
               equals: (make value: [1,2])
               testing: "do:with: (empty)".
        assert that: { let elts = [].
                       let iter = make value: [100, 20, 3000].
                       let res = iter do: { |each1 each2| elts add: (each1 / each2) }
                                      with: [1, 2].
                       res is iter
                           ifFalse: { panic "oops" }.
                       elts }
               equals: [100, 10]
               testing: "do:with: (size 2)"!

    method testDoWithIfExhausted
        assert that: { (make value: [])
                           do: { |each1 each2| panic "never" }
                           with: [1, 2]
                           ifExhausted: { panic "never" } }
               equals: (make value: [])
               testing: "do:with:ifExhausted: (empty)".
        assert that: { let elts = [].
                       let iter = make value: [10,200,3000,40000].
                       let res = iter do: { |each1 each2| elts add: (each1 / each2) }
                                      with: [10, 20]
                                      ifExhausted: { 10 }.
                       res is iter
                           ifFalse: { panic "oops" }.
                       elts }
               equals: [1, 10, 300, 4000 ]
               testing: "do:with:ifExhausted: (size 4)"!

    method testEquals
        assert that: { make value: [1,2,3] }
               equals: make value: [1,2,3]
               testing: "equals: (true)".
        assert that: { make value: [1,2,3,4] }
               equals: make value: [1,2,3]
               testing: "equals: (false)"!

    method testFind
        assert that: { (make value: [1,2,100,1]) find: { |each| each > 10 } }
               equals: 100
               testing: "find: (yes)".
        assert that: { (make value: [1,2,10,1]) find: { |each| each > 10 } }
               equals: False
               testing: "find: (no)"!

    method testFindIfNone
        assert that: { (make value: [1,2,100,1])
                           find: { |each| each > 10 }
                           ifNone: { 42 }}
               equals: 100
               testing: "find:ifNone: (yes)".
        assert that: { (make value: [1,2,10,1])
                           find: { |each| each > 10 }
                           ifNone: { 42 }}
               equals: 42
               testing: "find:ifNone: (no)"!

    method testFirst
        assert that: { (make value: [1,2]) first }
               equals: 1
               testing: "first (ok)".
        assert that: { { (make value: []) first }
                           on: Error do: { 123 } }
               equals: 123
               testing: "first (empty)"!

    method testIfEmpty
        assert that: { (make value: []) ifEmpty: { 123 } }
               equals: 123
               testing: "ifEmpty: (empty)".
        assert that: { (make value: [1] ifEmpty: { 123 }) }
               equals: False
               testing: "ifEmpty: (not)"!

    method testIfEmptyNotEmpty
        assert that: { (make value: []) ifEmpty: { 123 } ifNotEmpty: { "foo" }}
               equals: 123
               testing: "ifEmpty:IifNotEmpty: (empty)".
        assert that: { (make value: [1] ifEmpty: { "foo" } ifNotEmpty: { 123 }) }
               equals: 123
               testing: "ifEmpty:ifNotEmpty: (not)"!

    method testIfNotEmpty
        assert that: { (make value: []) ifNotEmpty: { "foo" } }
               equals: False
               testing: "ifNotEmpty: (empty)".
        assert that: { (make value: [1] ifEmpty: { 123 }) }
               equals: 123
               testing: "ifNotEmpty: (not)"!

    method testIncludes
        assert that: { (make value: []) includes: 42 }
               equals: False
               testing: "includes: (empty)".
        assert that: { (make value: [1,2,3]) includes: 42 }
               equals: False
               testing: "includes: (non-empty, false)".
        assert that: { (make value: [1,42,3]) includes: 42 }
               equals: True
               testing: "includes: (non-empty, true)"!

    method testIncludesAll
        assert that: { (make value: []) includesAll: [] }
               equals: True
               testing: "includesAll: (empties)".
        assert that: { (make value: [1,2,3]) includesAll: [2,3] }
               equals: True
               testing: "includesAll: (true)".
        assert that: { (make value: [1,2]) includesAll: [1,2,3] }
               equals: False
               testing: "includesAll: (false)"!

    method testInject
        assert that: { (make value: [])
                           inject: "foo"
                           into: { |acc each| panic "never" } }
               equals: "foo"
               testing: "inject:into: (empty)".
        assert that: { (make value: [1,2,3])
                           inject: 100
                           into: { |acc each| acc + each } }
               equals: 106
               testing: "inject:into: (size 3)"!

    method testIsEmpty
        assert true: { (make value: []) isEmpty }
               testing: "isEmpty (true)".
        assert true: { (make value: [1]) isEmpty }
               testing: "isEmpty (false)"!

    method testIsEquivalent
        assert that: { make value: [1,2,3] }
               equals: make value: [1,2,3]
               testing: "equals: (true)".
        assert that: { make value: [1,2,3,4] }
               equals: make value: [1,2,3]
               testing: "equals: (false)"!

    method testMaxArg
        assert that: { (make value: ["a", "bb", "ccc", "d"]) max: { |each| each size } }
               equals: "ccc"
               testing: "max:"!

    method testMax
        assert that: { (make value: [1, 100, 1, 1]) max }
               equals: 100
               testing: "max"!

    method testMinArg
        assert that: { (make value: ["aa", "bb", "ccc", "x", "dd", "fff"]) min: { |each| each size } }
               equals: "x"
               testing: "min:"!

    method testMin
        assert that: { (make value: [1, -100, 1, 1]) min }
               equals: -100
               testing: "min"!

    method testReduce
        assert that: { (make value: [1]) reduce: { |sum each| panic "never" } }
               equals: 1
               testing: "reduce: (one)"
        assert that: { (make value: [1, 2, 3]) reduce: { |sum each| sum + each } }
               equals: 6
               testing: "reduce: (three)"!

    method testSecond
        assert that: { (make value: [1,2]) second }
               equals: 2
               testing: "second (not empty)"!

    method testSelectAs
        assert that: { (make value: [1,10,1,100]) select: { |each| each > 1 } as: List }
               equals: [10, 100]
               testing: "select:as:"!

    method testSelectInto
        assert that: { (make value: [1,10,1,100]) select: { |each| each > 1 } into: [123] }
               equals: [123,10,100]
               testing: "select:into:"!

    method testSizeEstimate
        assert that: { (make value: []) sizeEstimate }
               equals: 0
               testing: "sizeEstimate (zero)".
        assert that: { (make value: [1,2,3]) sizeEstimate > 0 }
               equals: True
               testing: "sizeEstimate (> 0)"!

    method testSumArg
        assert that: { (make value: []) sum: { |each| panic "never" }}
               equals: 0
               testing: "sum: (empty)".
        assert that: { (make value: [1,2] sum: { |each| each * 100 }) }
               equals: 300
               testing: "sum: (not empty)"!

    method testSum
        assert that: { (make value: []) sum }
               equals: 0
               testing: "sum (empty)".
        assert that: { (make value: [1,2]) sum }
               equals: 3
               testing: "sum (not empty)"!

end
