import .character_ext
import .closure.Block

-- for #find:ifNone
import .string

define ColonCharacter
    ":" character!

define UnderscoreCharacter
    "_" character!

extend Selector
    is Block

    direct method isKeywordName: name
        name find: { |c| c == ":" }
             ifNone: { return False }.
        True!

    direct method isSymbolName: name
        (name at: 1)
            isSymbol!

    direct method isPrefixName: name
        ((name size > 6)
             and: (name startsWith: "prefix")) -- Good enough until https://github.com/nikodemus/foolang/issues/331
                                               -- is implemented.
            ifTrue: { (name at: 7)
                          isSymbol }!

    direct method isUnaryName: name
        (self isSymbolName: name)
            ifTrue: { return False }.
        (self isKeywordName: name)
            ifTrue: { return False }.
        True!

    method toSelector
        self!

    method apply: arguments
        self sendTo: arguments first
             with: arguments rest!

    method sendTo: receiver
        self sendTo: receiver
             with: []!

    method toSelector
        -- FIXME: Doesn't belong at all.
        self!

    method arity
        self isKeyword
            ifTrue: { return 1 + (self name
                                      count: { |c| c == ":" }) }.
        self isSymbol
            ifTrue: { return 2 }.
        1!

    method loop
        panic "Cannot use #loop on a selector."!

    method finally: cleanup
        panic "Cannot use #finally on a selector."!

    method < other
        self name < other name!

    method isKeyword
        Self isKeywordName: self name!

    method isPrefix
        Self isPrefixName: self name!

    method isSymbol
        Self isSymbolName: self name!

    method isUnary
        Self isUnaryName: self name!

    method isPrivate
        self name startsWith: "_"!

    method startsWith: part
        self name startsWith: part!

    method displayOn: stream
        stream writeString: "#".
        stream writeString: self name!

    method toString
        "#" append: self name!
end
