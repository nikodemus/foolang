-- For testing Closure#with:
class _Closable { closed }
    method close
        closed = True!
end

class TestTargetClosure { assert }
    is TestSuite

    method test_optional
        assert that: { { 53 } optional: 123 } is: 53.
        assert that: { { |x| x } optional: 675 } is: 675!

    method aux_onPanic
        { panic "Foo". False }
            onPanic: { |p| return True }

    method test_onPanic
        assert true: { self aux_onPanic }
               testing: "Closure#onPanic"!

    method aux_with_return: obj
        { |arg| return 104 }
            with: obj!

    method aux_with_panic: obj
        { { |arg| panic "oops" }
              with: obj }
        onPanic: { return 678 }!

    method test_with
        assert false: { (_Closable closed: False) closed }
               testing: "Closure#with: (sanity check)".
        assert that: { let obj = _Closable closed: False.
                       let res = { |arg| 42 } with: obj.
                       [obj closed, res] }
               equals: [True, 42]
               testing: "Closure#with: (normal)".
        assert that: { let obj = _Closable closed: False.
                       let res = self aux_with_return: obj.
                       [obj closed, res] }
               equals: [True, 104]
               testing: "Closure#with: (unwind)".
        assert that: { let obj = _Closable closed: False.
                       let res = self aux_with_panic: obj.
                       [obj closed, res] }
               equals: [True, 678]
               testing: "Closure#with: (unwind)"!

    method test_finally_block_executes_after_fallthrough
        let log = StringOutput new.
        { log print: 1 }
            finally: { log print: 2 }.
        assert that: { log content } equals: "12"!

    method test_finally_block_executes_on_unwind
        let log = StringOutput new.
        self finally_block_executes_on_unwind_aux: log.
        assert that: { log content } equals: "AB"!

    method finally_block_executes_on_unwind_aux: log
        { log print: "A".
          return False.
          log print: "X" }
            finally: { log print: "B" }!

    method test_finally_returns_value_of_main_block_after_fallthrough
        let res = { 192 } finally: { 666 }.
        assert that: { res } equals: 192!

    method test_whileTrue
        let a = 0.
        assert that: { { a < 10 } whileTrue: { a = a + 1 }. a }
               is: 10
               testing: "Closure#whileTrue:".
        let b = 0.
        assert that: { { b = b + 1. b < 10 } whileTrue. b }
               is: 10
               testing: "Closure#whileTrue"!

    method test_whileFalse
        let a = 0.
        assert that: { { a == 10 } whileFalse: { a = a + 1 }. a }
               is: 10
               testing: "Closure#whileFalse:".
        let b = 0.
        assert that: { { b = b + 1. b == 10 } whileFalse. b }
               is: 10
               testing: "Closure#whileFalse"!

    method test_loop
        let a = 0.
        assert that: { self _test_loop_aux }
               is: 10
               testing: "Closure#loop"!

    method _test_loop_aux
        let a = 0.
        { a = a + 1. a == 10 ifTrue: { return a } } loop!

    method test_value
        assert true: { 1 == { 1 } value }
               testing: "Closure#value"!

    method test_value_arg
        assert that: { { |arg| arg + 1 } value: 1 }
               is: 2!

    method test_closure
        let block = (let x = 21. { x = x * 2 }).
        let x = 0.
        block value.
        assert that: { block value }
               is: 84!

    method test_ascending
        assert that: { ["a", "aaaa", "aa", "", "aaa"]
                           sort: { |array| array size } ascending }
               equals: ["", "a", "aa", "aaa", "aaaa"]
               testing: "Closure#ascending"!

    method test_descending
        assert that: { ["a", "aaaa", "aa", "", "aaa"]
                           sort: { |array| array size } descending }
               equals: ["aaaa", "aaa", "aa", "a", ""]
               testing: "Closure#descending"!

end
