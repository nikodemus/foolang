import .number.Number

define $IntegerPrintBase 10!

extend Integer
    is Number

    direct method toString
        -- FIXME: Should inherit from Object!
        "Integer"!

    direct method default
        0!

    direct method zero
        0!

    direct method one
        1!

    direct method printBase: base do: block
        let $IntegerPrintBase = base.
        block value!

    method truncate
        self!

    method writeOn: stream in: base radix: printRadix
        self < 0
            ifTrue: { stream print: "-".
                      return -self
                          writeOn: stream
                          in: base
                          radix: printRadix }.
        printRadix
            ifTrue: { stream print: base radixString }.
        self < base
            ifTrue: { let index = self + 1.
                      stream
                          print: ("0123456789ABCDEF"
                                      from: index
                                      to: index) }
            ifFalse: { let q = self / base.
                       q writeOn: stream
                         in: base
                         radix: False.
                       let r = self - (q * base).
                       r writeOn: stream
                         in: base
                         radix: False }!

    method writeOn: stream in: base
        self writeOn: stream
             in: base
             radix: True!

    method displayOn: stream
        self writeOn: stream
             in: $IntegerPrintBase!

    method radixString
        self is 2
            ifTrue: { return "0b" }.
        self is 10
            ifTrue: { return "" }.
        self is 16
            ifTrue: { return "0x" }.
        panic "No radixString for { self }"!

    method times: block
        let i = 0.
        { i < self }
            whileTrue: { block value.
                         i = i + 1 }.
        self!

    method addNumber: left
        left integerAdd: self!

    method subNumber: left
        left integerSub: self!

    method mulNumber: left
        left integerMul: self!

    method divNumber: left
        left integerDiv: self!

    method eqNumber: left
        left integerEq: self!

    method ltNumber: left
        left integerLt: self!

    method gtNumber: left
        left integerGt: self!

    method lteNumber: left
        left integerLte: self!

    method gteNumber: left
        left integerGte: self!

    method floatAdd: right
        self asFloat floatAdd: right!

    method floatSub: right
        self asFloat floatSub: right!

    method floatMul: right
        self asFloat floatMul: right!

    method floatDiv: right
        self asFloat floatDiv: right!

    method floatEq: right
        self asFloat floatEq: right!

    method floatGt: right
        self asFloat floatGt: right!

    method floatLt: right
        self asFloat floatLt: right!

    method floatGte: right
        self asFloat floatGte: right!

    method floatLte: right
        self asFloat floatLte: right!

    method atLeast: min atMost: max
        (self integerLt: min)
            ifTrue: { return min }.
        (self integerGt: max)
            ifTrue: { return max }.
        self!
end
