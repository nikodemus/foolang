
class TestSelfRefInClosure { cookie }
    direct method test
        (self cookie: 132132132) test!
    method test
        { self cookie is cookie } value!
end

class TestClosure { assert }
    is TestSuite

    direct method runTests: assert
        (self assert: assert) runTests!

    method testSignature
        assert forAll: [
            [{ 42 }, []],
            [{ || 42 }, []],
            [{ |x| x }, [Any]],
            [{ |x::Integer z y::Object| x + y }, [Integer, Any, Object]]
        ]
            that: { |case|
                    case first signature == case second }
            testing: "Closure#signature"!

    method testArity
        -- Cannot move to test_target_closure.foo yet, because
        -- type representation in AST is bad, causing the signature
        -- to contain globals. (maybe other problems as well?)
        assert forAll: [
            [{ 42 }, 0],
            [{ || 42 }, 0],
            [{ |x| x }, 1],
            [{ |x y| x + y }, 2]
        ]
            that: { |case|
                    case first arity is case second }
            testing: "Closure#arity"!

    method testSelfRefInClosure
        assert true: { TestSelfRefInClosure test }
               testing: "reference to self inside closure"!

    method testApply
        assert that: { { |x y| x + y } apply: [1, 2] }
               equals: 3
               testing: "Closure#apply:"!

    method testComposition
        assert that: { ({ |a| a + 1 } then: { |b| b + 10 }) value: 0 }
               equals: 11
               testing: "Closure#then:"!
end
