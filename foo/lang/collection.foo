import .any.Any
import .iterable.Iterable

---
Implementing classes probably want to implement the following in
addition to the required methods:
- do:
- do:with:
- do:with:default:
- reduce:
- reserveCapacity
- first
- second
---

--    required direct method of: type withCapacity: capacity
--    required method removeIf: block
--    required method remove: object
--    required method size

interface Collection
    is Iterable

    required method add: object
    required method clear

    direct method default
        List new!

    direct method defaultCapacity
        8!

    direct method defaultElementType
        Any!

    direct method from: iterable
        let new = self of: iterable elementType withCapacity: iterable sizeEstimate.
        iterable do: { |each| new add: each }.
        new!

    direct method newOf: type
        self of: type
             withCapacity: self defaultCapacity!

    direct method new
        self newOf: self defaultElementType!

    direct method new: size
        self new _initSize: size!

    direct method of: type new: size
        (self newOf: type) _initSize: size!

    direct method of: type new: size value: value
        (self newOf: type) _initSize: size value: value!

    direct method of: type from: iterable
        let new = self of: type withCapacity: iterable sizeEstimate.
        iterable do: { |each| new add: each }.
        new!

    direct method withCapacity: capacity
        self of: self defaultElementType withCapacity: capacity!

    method _initSize: size
        self _initSize: size value: self elementType default!

    method _initSize: size value: value
        let new = self withCapacity: size.
        size times: { new add: value }.
        self!

    method isEmpty
        self size is 0!

    method addAll: iterable
        self reserveCapacity: (self size + iterable sizeEstimate).
        iterable do: { |each| self add: each }.
        self!

    method reserveCapacity: size
        self!

    method as: type
        type fromCollection: self!

    method collect: block
        self collect: block into: (Self withCapacity: self size)!

    method copy
        let new = Self withCapacity: self size.
        self do: { |each| new add: each }.
        new!

    method reject: block
        self select: { |each| (block value: each) not }!

    method removeAll: iterable
        self removeIf: { |each| iterable includes: each }.
        self!

    method removeIfNot: block
        self removeIf: { |each| (block value: each) not }.
        self!

    method reserveCapacity
        self!

    method select: block
        self select: block as: Self!

    method sizeEstimate
        self size!

    method with: iterable collect: block
        self with: iterable collect: block as: Self!

    method second
       self at: 2!

    method last
        self at: self size!

    method isEmpty
        self size is 0!

    method ifEmpty: block
        self size is 0
            ifTrue: block!

    method ifEmpty: block ifNotEmpty: notBlock
        self size is 0
            ifTrue: block
            ifFalse: notBlock!

    method find: block
        self find: block ifNone: { False }!

    method find: block ifNone: noneBlock
        self do: { |elt|
                   (block value: elt) is True
                       ifTrue: { return elt } }.
        noneBlock value!

    method do: block
        1 to: self size
          do: { |i| block value: (self at: i) }.
        self!

    method inject: value into: block
        let result = value.
        self do: { |elt| result = (block value: result value: elt) }.
        result!

    method reject: block
        let selection = Self withCapacity: (self size / 2 + 1) truncate.
        self do: { |elt|
                   (block value: elt) is True
                       ifFalse: { selection push: elt } }.
        selection!

    method select: block
        let selection = Self withCapacity: (self size / 2 + 1) truncate.
        self do: { |elt|
                   (block value: elt) is True
                       ifTrue: { selection push: elt } }.
        selection!

    method with: other collect: block
        let size = self checkSize: other.
        let new = Self new: size.
        1 to: size
          do: { |i|
                new put: (block value: (self at: i)  value: (other at: i)) }.
        new!

    method with: array default: default collect: block
        let size1 = self size.
        let size2 = array size.
        let size = size1 max: size2.
        let result = Self new: size.
        let common = size1 min: size2.
        1 to: common
          do: { |i|
                let elt = block value: (self at: i) value: (array at: i).
                result put: elt at: i }.
        common == size
            ifTrue: { return result }.
        let tailHandler = size1 < size2
                              ifTrue: { { |i|
                                          block value: default value: (array at: i) } }
                              ifFalse: { { |i|
                                           block value: (self at: i) value: default } }.
        common + 1 to: size
                   do: { |i| result put: (tailHandler value: i) at: i }.
        result!

    method with: sequence inject: value into: block
        let result = value.
        self with: sequence
             do: { |a b|
                   result = (block value: result value: a value: b) }.
        result!

    method sum
        self inject: 0 into: { |res elt| res + elt }!

    method sum: block
        self inject: 0 into: { |res elt| res + (block value: elt) }!

    method with: array sum: block
        self
            with: array
            inject: 0
            into: { |res a b|
                    res + (block value: a value: b) }!

end
