import .object.Object
import .array        -- for Array#sorted
import .selector_ext -- for Selector#==

extend Record
    is Object

    direct method sizeOf: record
        (Record keysIn: record) size!

    method isEquivalent: other
        let keys = (Record keysIn: self) sorted.
        keys == (Record keysIn: other) sorted
            ifFalse: { -- Output debug println: "my: {keys} other: {(Record keysIn: other) sorted}".
                       return False }.
        keys
            allSatisfy: { |each|
                          (each sendTo: self) == (each sendTo: other) }!

    method do: block
        (Record keysIn: self) sorted
            do: { |each|
                  block value: (each sendTo: self) }!

    method displayOn: stream
        self writeOn: stream using: (#displayOn:)!

    method writeOn: stream using: block
        stream writeString: "\{ ".
        (Record keysIn: self) sorted
            do: { |key|
                  -- NOTE: on target keys are selectors
                  stream writeString: key name.
                  stream writeString: ": ".
                  block value: (key sendTo: self) value: stream }
            interleaving: { stream writeString: ", " }.
        stream writeString: " }"!
end
