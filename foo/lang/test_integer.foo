-- Generates signed integers small enough to add without overflowing.
class SmallIntegers {}
    direct method do: block
        -- First around zero
        block value: -1.
        block value: 0.
        block value: 1.
        -- Then random numbers
        block value: 100.
        block value: 1203987.
        block value: -987.
        block value: -876421!
end

class TestInteger { assert }
    is TestSuite

    method testAdd
        assert forAll: SmallIntegers
               that: { |x| x + x == x * 2 }
               testing: "integer self addition"!

    method testSub
        assert forAll: SmallIntegers
               that: { |x| x - x == 0 }
               testing: "integer self substraction"!

    method testAdditionCommutative
        assert forAll: SmallIntegers
               that: { |x| x + 1 == 1 + x }
               testing: "integer addition commutates"!

    method auxIntegerDivZeroError: x by: y
        { x / y }
            on: Error
            do: { |error| return "oops" }!

    method testDivByZero
        assert forAll: SmallIntegers
               that: { |x| { x / 0 }
                           onPanic: { |p|
                                      p description startsWith: "UNHANDLED ERROR: Divide by zero:" } }
               testing: "division by zero (unhandled)".

        assert forAll: SmallIntegers
               that: { |x| ({ x / 0 } on: DivideByZero do: { |ex| ex return: 42 })
                           == 42 }
               testing: "division by zero (handled)".

        assert forAll: SmallIntegers
               that: { |x|
                       x is 0
                           ifTrue: { x = 1 }.
                       [ self auxIntegerDivZeroError: x by: x,
                         self auxIntegerDivZeroError: x by: 0 ]
                       == [1, "oops"] }
               testing: "division by zero (good catch)"!

    method testPrintBase
        assert that: { Integer printBase: 10 do: { 123 toString } }
               equals: "123"
               testing: "integer printbase 10 on 123".
        assert that: { Integer printBase: 10 do: { -123 toString } }
               equals: "-123"
               testing: "integer printbase 10 on -123".
        assert that: { Integer printBase: 10 do: { 0 toString } }
               equals: "0"
               testing: "integer printbase 10 on 0".

        assert that: { Integer printBase: 2 do: { 123 toString } }
               equals: "0b1111011"
               testing: "integer printbase 2 on 123".
        assert that: { Integer printBase: 2 do: { -123 toString } }
               equals: "-0b1111011"
               testing: "integer printbase 2 on -123".
        assert that: { Integer printBase: 2 do: { 0 toString } }
               equals: "0b0"
               testing: "integer printbase 2 on 0".

        assert that: { Integer printBase: 16 do: { 123 toString } }
               equals: "0x7B"
               testing: "integer printbase 16 on 123".
        assert that: { Integer printBase: 16 do: { -123 toString } }
               equals: "-0x7B"
               testing: "integer printbase 16 on -123".
        assert that: { Integer printBase: 16 do: { 0 toString } }
               equals: "0x0"
               testing: "integer printbase 16 on 0"!
end
