-- Generates signed integers small enough to add without overflowing.
class SmallIntegers {}
    direct method do: block
        -- First around zero
        block value: -1.
        block value: 0.
        block value: 1.
        -- Then random numbers
        block value: 100.
        block value: 1203987.
        block value: -987.
        block value: -876421!
end

class TestInteger { assert }
    is TestSuite

    method test_plus
        assert that: { 10 + 100 + 1 }
               is: 111!

    method test_div
        assert that: { 20 / 2 }
               is: 10!

    method test_eq
        assert true: { 1 == 1 }.
        assert false: { 1 == 2 }!

    method test_gt
        assert false: { 1 > 2 }.
        assert true: { 2 > 1 }.
        assert false: { 1 > 1 }!

    method test_gte
        assert false: { 1 >= 2 }.
        assert true: { 2 >= 1 }.
        assert true: { 1 >= 1 }!

    method test_lt
        assert true: { 1 < 2 }.
        assert false: { 2 < 1 }.
        assert false: { 1 < 1 }!

    method test_lte
        assert true: { 1 <= 2 }.
        assert false: { 2 <= 1 }.
        assert true: { 1 <= 1 }!

    method test_mul
        assert that: { 11 * 100 }
               is: 1100!

    method test_sub
        assert that: { 20 - 2 }
               is: 18!

    method test_toString
        assert that: { 1246789 toString }
               equals: "1246789"!

    method test_to_do
        let n = 0.
        1 to: 10 do: { |i| n = n + i }.
        assert that: { n } is: 55!

    method testAdditionCommutative
        assert forAll: SmallIntegers
               that: { |x| x + 1 == 1 + x }
               testing: "integer addition commutates"!

    method auxIntegerDivZeroError: x by: y
        { x / y }
            on: Error
            do: { |error| return "oops" }!

    -- BUG: #848
    method no_test_unhandled_DivByZero
        assert forAll: SmallIntegers
               that: { |x| { x / 0 }
                           onPanic: { |p| True } }
               testing: "division by zero (unhandled panic)"!

    -- BUG: #847
    method no_test_handled_DivByZero
        assert forAll: SmallIntegers
               that: { |x| ({ x / 0 } on: DivideByZero do: { |ex| ex return: 42 })
                           == 42 }
               testing: "division by zero (handled)".

        assert forAll: SmallIntegers
               that: { |x|
                       x is 0
                           ifTrue: { x = 1 }.
                       [ self auxIntegerDivZeroError: x by: x,
                         self auxIntegerDivZeroError: x by: 0 ]
                       == [1, "oops"] }
               testing: "division by zero (good catch)"!

    -- BUG: #849
    method no_testPrintBase
        assert that: { Integer printBase: 10 do: { 123 toString } }
               equals: "123"
               testing: "integer printbase 10 on 123".
        assert that: { Integer printBase: 10 do: { -123 toString } }
               equals: "-123"
               testing: "integer printbase 10 on -123".
        assert that: { Integer printBase: 10 do: { 0 toString } }
               equals: "0"
               testing: "integer printbase 10 on 0".

        assert that: { Integer printBase: 2 do: { 123 toString } }
               equals: "0b1111011"
               testing: "integer printbase 2 on 123".
        assert that: { Integer printBase: 2 do: { -123 toString } }
               equals: "-0b1111011"
               testing: "integer printbase 2 on -123".
        assert that: { Integer printBase: 2 do: { 0 toString } }
               equals: "0b0"
               testing: "integer printbase 2 on 0".

        assert that: { Integer printBase: 16 do: { 123 toString } }
               equals: "0x7B"
               testing: "integer printbase 16 on 123".
        assert that: { Integer printBase: 16 do: { -123 toString } }
               equals: "-0x7B"
               testing: "integer printbase 16 on -123".
        assert that: { Integer printBase: 16 do: { 0 toString } }
               equals: "0x0"
               testing: "integer printbase 16 on 0"!
end
