import .test.TestSuite

define ASCII
    {space: 0x20,
     tab: 0x09,
     lineFeed: 0x0A,
     formFeed: 0x0C,
     carriageReturn: 0x0D}!

define HorizontalWhitespaceASCII
    [ASCII space,
     ASCII tab]!

define WhitespaceASCII
    [ASCII space,
     ASCII tab,
     ASCII lineFeed,
     ASCII formFeed,
     ASCII carriageReturn]!

import .object.Object

-- FIXME: support unicode range
class Character { code }
    is Object

    method isAlphanumeric
        self isAlpha or: self isDigit!

    method isAlpha
        (0x41 <= code and: code <= 0x5A)
            ifFalse: { 0x61 <= code and: code <= 0x7A }!

    method isWhitespace
        WhitespaceASCII anySatisfy: { |whitespaceCode| whitespaceCode is code }!

    method isHorizontalWhitespace
        HorizontalWhitespaceASCII anySatisfy: { |whitespaceCode| whitespaceCode is code }!

    method isDigit: base
        base <= 10
            ifTrue: { 0x30 <= code and: code < 0x30 + base }
            ifFalse: { let hexBase = base - 10.
                       (0x30 <= code and: code < 0x40)
                           or: (0x41 <= code and: code < 0x41 + hexBase)
                           or: (0x61 <= code and: code < 0x61 + hexBase) }!

    method isDigit
        self isDigit: 10!

    method digit: base
        (self isDigit: base)
            ifTrue: { code < 0x40
                          ifTrue: { return code - 0x30 }.
                      code < 0x47
                          ifTrue: { return (code - 0x41) + 10 }.
                      (code - 0x61) + 10 }!

    method digit
        self digit: 10!

    method isEquivalent: other
        code is other code!

    method toString
        "#<Character code: {code}>"!

    method isNewline
        self code is ASCII lineFeed!
end

class TestCharacter { assert }
    is TestSuite

    direct method runTests: assert
        (self assert: assert) runTests!

    method digitCases
        [["0", 0],
         ["1", 1],
         ["2", 2],
         ["3", 3],
         ["4", 4],
         ["5", 5],
         ["6", 6],
         ["7", 7],
         ["8", 8],
         ["9", 9],
         ["a", 10],
         ["b", 11],
         ["c", 12],
         ["d", 13],
         ["e", 14],
         ["f", 15],
         ["A", 10],
         ["B", 11],
         ["C", 12],
         ["D", 13],
         ["E", 14],
         ["F", 15]]!

    method nonDigitCases
        ["g", "G", ".", " ", "-"]!

    method digitTest: base
        assert forAll: self digitCases
               that: { |case|
                       let digit = case first character digit: base.
                       case second < base
                           ifTrue: { digit is case second }
                           ifFalse: { digit is False } }
               testing: "Character#digit: {base}, digitCases".
        assert forAll: self nonDigitCases
               that: { |case|
                       (case character digit: base) is False }
               testing: "Character#digit: {base}, nonDigitCases"!

    method testDigit10
        self digitTest: 10!

    method testDigit2
        self digitTest: 2!

    method testDigit16
        self digitTest: 16!
end
