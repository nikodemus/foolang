import .test.TestSuite

define ASCII
    {space: 0x20,
     tab: 0x09,
     digit0: 0x30,
     digit9: 0x39,
     upperA: 0x41,
     upperF: 0x46,
     upperZ: 0x5A,
     lowerA: 0x61,
     lowerF: 0x66,
     lowerZ: 0x7A,
     lineFeed: 0x0A,
     formFeed: 0x0C,
     carriageReturn: 0x0D}!

define HorizontalWhitespaceASCII
    [ASCII space,
     ASCII tab]!

define WhitespaceASCII
    [ASCII space,
     ASCII tab,
     ASCII lineFeed,
     ASCII formFeed,
     ASCII carriageReturn]!

import .object.Object

-- FIXME: support unicode range
class Character { code }
    is Object

    method isAlphanumeric
        self isAlpha or: self isDigit!

    method isAlpha
        (ASCII upperA <= code and: code <= ASCII upperZ)
            ifFalse: { ASCII lowerA <= code and: code <= ASCII lowerZ }!

    method isWhitespace
        WhitespaceASCII anySatisfy: { |whitespaceCode| whitespaceCode is code }!

    method isHorizontalWhitespace
        HorizontalWhitespaceASCII anySatisfy: { |whitespaceCode| whitespaceCode is code }!

    method isDigit: base
        base <= 10
            ifTrue: { ASCII digit0 <= code and: code < ASCII digit0 + base }
            ifFalse: { let hexBase = base - 10.
                       (ASCII digit0 <= code and: code <= ASCII digit9)
                           or: (ASCII upperA <= code
                                    and: code < ASCII upperA + hexBase)
                           or: (ASCII lowerA <= code
                                    and: code < ASCII lowerA + hexBase) }!

    method isDigit
        self isDigit: 10!

    method digit: base
        (self isDigit: base)
            ifTrue: { code <= ASCII digit9
                          ifTrue: { return code - ASCII digit0 }.
                      code <= ASCII upperF
                          ifTrue: { return (code - ASCII upperA) + 10 }.
                      (code - ASCII lowerA) + 10 }!

    method digit
        self digit: 10!

    method isEquivalent: other
        code is other code!

    method toString
        "#<Character code: {code}>"!

    method isNewline
        self code is ASCII lineFeed!
end

class TestCharacter { assert }
    is TestSuite

    direct method runTests: assert
        (self assert: assert) runTests!

    method digitCases
        [["0", 0],
         ["1", 1],
         ["2", 2],
         ["3", 3],
         ["4", 4],
         ["5", 5],
         ["6", 6],
         ["7", 7],
         ["8", 8],
         ["9", 9],
         ["a", 10],
         ["b", 11],
         ["c", 12],
         ["d", 13],
         ["e", 14],
         ["f", 15],
         ["A", 10],
         ["B", 11],
         ["C", 12],
         ["D", 13],
         ["E", 14],
         ["F", 15]]!

    method nonDigitCases
        "ghijlkmopqrstuxyz!@#$%^&*()?><| "!

    method digitTest: base
        assert forAll: self digitCases
               that: { |case|
                       let digit = case first character digit: base.
                       case second < base
                           ifTrue: { digit is case second }
                           ifFalse: { digit is False } }
               testing: "Character#digit: {base}, digitCases".
        assert forAll: self nonDigitCases
               that: { |case|
                       (case character digit: base) is False }
               testing: "Character#digit: {base}, nonDigitCases"!

    method testDigit10
        self digitTest: 10!

    method testDigit2
        self digitTest: 2!

    method testDigit16
        self digitTest: 16!

    method allAlphas
        "abcdefghijklmnopqrstuvxyzABCDEFGHIJKLMNOPQRSTUVXYZ"!

    method allNumeric
        "0123456789"!

    method nonAlphasAndNonNumerics
        "!@#$%^&*()_+?><| \n\r\t"!

    method allWhitespace
        -- ...except formfeed
        " \t\n\r"!

    method allHorizontalWhitespace
        " \t"!

    method allNonHorizontalWhitespace
        -- ...except formfeed
        "\n\r"!

    method nonWhitespace
        "1234567890-=`qwertyuiop[]asdfghjkl;'\\zxcvbnm,./~!@#$%^&*()_+QWERTYUIOP\{}ASDFGHJKL:\"|ZXCVBNM<>?"!

    method testIsAlphanumeric
        assert forAll: self allNumeric
               that: { |s|
                       s character isAlphanumeric }
               testing: "Character#isAlphanumeric for numeric".
        assert forAll: self allAlphas
               that: { |s|
                       s character isAlphanumeric }
               testing: "Character#isAlphanumeric for alpha".
        assert forAll: self nonAlphasAndNonNumerics
               that: { |s|
                       s character isAlphanumeric not }
               testing: "Character#isAlphanumeric for non-alpha, non-numeric"!

    method testIsAlpha
        assert forAll: self allNumeric
               that: { |s|
                       s character isAlpha not }
               testing: "Character#isAlpha for numeric".
        assert forAll: self allAlphas
               that: { |s|
                       s character isAlpha }
               testing: "Character#isAlpha for alpha".
        assert forAll: self nonAlphasAndNonNumerics
               that: { |s|
                       s character isAlpha not }
               testing: "Character#isAlpha for non-alpha, non-numeric"!

    method testIsDigit
        assert forAll: self allNumeric
               that: { |s|
                       s character isDigit }
               testing: "Character#isDigit for numeric".
        assert forAll: self allAlphas
               that: { |s|
                       s character isDigit not }
               testing: "Character#isDigit for alpha".
        assert forAll: self nonAlphasAndNonNumerics
               that: { |s|
                       s character isDigit not }
               testing: "Character#isDigit for non-alpha, non-numeric"!


    method testIsWhitespace
        assert forAll: self allWhitespace
               that: { |s|
                       s character isWhitespace }
               testing: "Character#isWhitespace for whitespace".
        assert forAll: self nonWhitespace
               that: { |s|
                       s character isWhitespace not }
               testing: "Character#isWhitespace for non-whitespace"!

    method testIsHorizintalWhitespace
        assert forAll: self allNonHorizontalWhitespace
               that: { |s|
                       s character isHorizontalWhitespace not }
               testing: "Character#isHorizontalWhitespace for non-horizontal whitespace".
        assert forAll: self allHorizontalWhitespace
               that: { |s|
                       s character isHorizontalWhitespace }
               testing: "Character#isHorizontalWhitespace for horizontal whitespace".
        assert forAll: self nonWhitespace
               that: { |s|
                       s character isHorizontalWhitespace not }
               testing: "Character#isHorizontalWhitespace for non-whitespace"!

end
