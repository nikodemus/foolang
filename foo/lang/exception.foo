import .object.Object

class Panic { description context }
    is Object
    method displayOn: stream
        stream println: "PANIC: {self description}".
        stream println: self context!
end

define $error
    { |ex| panic (ex description) }!

class Error { description }
    is Object
    direct method withHandler: handler do: block
        let $error = { |error| self handle: error with: handler }.
        block value!
    direct method raise: description
        $error value: (self description: description)!
    direct method handle: error with: handler
        handler value: error.
        panic "UNHANDLED ERROR: {error description}"!
    direct method handler
        { |ex| $error value: ex }!
    method displayOn: stream
        stream print: "#<Error {self description}>"!
end

define $typeError
    Error handler!

class TypeError { value expected }
    is Object
    direct method withHandler: handler do: block
        let $typeError = { |error| self handle: error with: handler }.
        block value!
    direct method raise: value expected: type
        $typeError value: (self value: value expected: type)!
    method description
        "Type error: {expected} expected, got: {value}"!
    method displayOn: stream
        stream print: "#<TypeError {expected}, got: {value}>"!
end

define $divideByZero
    Error handler!

class DivideByZero { value }
    is Object
    direct method withHandler: handler do: block
        let $divideByZero = handler.
        block value!
    direct method raise: value
        $divideByZero value: (self value: value)!
    method description
        "Divide by zero: {value} cannot be divided by zero"!
    method displayOn: stream
        stream print: "#<DivideByZero {value}>"!
end

define $iteratorExhausted
    Error handler!

class IteratorExhausted { value }
    is Object
    direct method withHandler: handler do: block
        let $iteratorExhausted = handler.
        block value!
    direct method raise: value
        $iteratorExhausted value: ( self value: value )!
    method description
        "Iterator exhausted: {value}"!
    method displayOn: stream
        stream print: "#<IteratorExhausted {value}>"!
end
