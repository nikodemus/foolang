extend Record
    is Object

    method isEquivalent: other
        let keys = (Record keysIn: self) sorted.
        keys == (Record keysIn: other) sorted
            ifFalse: { -- Output debug println: "my: {keys} other: {(Record keysIn: other) sorted}".
                       return False }.
        keys
            allSatisfy: { |each|
                          (Record at: each in: self)
                              == (Record at: each in: other) }!

    method printOn: stream
        stream print: "\{".
        (Record keysIn: self) sorted
            do: { |key|
                  stream print: key.
                  stream print: ": ".
                  stream print: (Record at: key in: self) }
            interleaving: { stream print: ", " }.
        stream print: "}"!
end

class TestRecord { assert }

    direct method runTests: assert
        (self assert: assert)
            ; testBasic
            ; testCompare
                !

    method testBasic
        assert that: { let r = {x: -10, y: 52}.
                       r x + r y }
               is: 42
               testing: "Record syntax and accessors"!

    method testCompare
        assert forAll: [[True, {foo: 123, bar: 42}, {bar: 42, foo: 123}],
                        [False, {foo: 123, bar: 123}, {bar: 42, foo: 123}]]
               that: { |test|
                       test first is (test second == test third) }
               testing: "Record#=="!

end
