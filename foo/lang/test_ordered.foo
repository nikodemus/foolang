import lib.assert.Assert

class TestOrdered { assert }
    is TestSuite
    direct method runTests: assert
        (self assert: assert) runTests!

    method binarySearchCaseFor: index in: size
        (1 <= index and: index <= size)
            ifTrue: { return { search: index * 100,
                               in: (1 to: size) asArray * 100,
                               finds: index } }
            ifFalse: { return { search: index * 100,
                                in: (1 to: size) asArray * 100,
                                finds: False } }!

    method binarySearchCases
        let cases = List new.
        cases add: { search: 42, in: [], finds: False }.
        1 to: 5
          do: { |size|
                0 to: size+1
                  do: { |index|
                        cases add: (self binarySearchCaseFor: index
                                         in: size) } }.
        cases!

    method test_binarySearch
        assert forAll: self binarySearchCases
               that: { |case|
                       Output debug println: "test: {case}".
                       case finds is (case in
                                          binarySearch: case search) }
               testing: "Ordered#binarySearch:"!

    method test_position_vs_positionFromRight
        let cases = [[ "123123", 2, 5 ]].
        assert forAll: cases
               that: { |case|
                       let haystack = case first.
                       let predicate = { |each| each == "2" character }.
                       let fromLeft = haystack position: predicate.
                       let fromRight = haystack positionFromRight: predicate.
                       (fromLeft == case second) and: (fromRight == case third) }
               testing: "Ordered#position: and #positionFromRight:"!


    method splitCases
        [ ["", [""]],
          [":", ["", ""]],
          ["foo", ["foo"]],
          ["foo:bar", ["foo", "bar"]],
          ["foo:bar:", ["foo", "bar", ""]],
          [":foo:bar:", ["", "foo", "bar", ""]] ]!

    method testSplitBy
        assert forAll: self splitCases
               that: { |case|
                       let split = (case first splitBy: ":" character) asArray.
                       split == case second }
               testing: "Ordered#splitBy:"!

    method selectCases
        [ [[1,2,3,4], { |x| x > 2 }, [3,4]],
          [[10,1,10,1,1,10], { |x| x is 10 }, [10,10,10]] ]!

    method testSelect
        assert forAll: self selectCases
               that: { |case|
                       let selected = case first select: case second.
                       selected == case third }
               testing: "Ordered#select:"!

    method rejectCases
        [ [[1,2,3,4], { |x| x > 2 }, [1,2]],
          [[10,1,10,1,1,10], { |x| x is 10 }, [1,1,1]] ]!

    method testReject
        assert forAll: self rejectCases
               that: { |case|
                       let notRejected = case first reject: case second.
                       notRejected == case third }
               testing: "Ordered#selectBy:"!
end

class Main { assert system }
    direct method run: command in: system
        let assert = Assert reportingTo: system output.
        TestOrdered runTests: assert in: system.
        system exit: assert exitCode!
end
