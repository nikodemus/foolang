import .string.String
import .closure.Block

define ColonCharacter
    ":" character!

define UnderscoreCharacter
    "_" character!

class Selector { name }
    is Block

    direct method intern: name
        -- Very fake...
        self name: name!

    direct method isKeywordName: name
        name find: { |c| c == ":" }
             ifNone: { return False }.
        True!

    direct method isSymbolName: name
        (name at: 1)
            isSymbol!

    direct method isPrefixName: name
        ((name size > 6)
             and: (name startsWith: "prefix")) -- Good enough until https://github.com/nikodemus/foolang/issues/331
                                               -- is implemented.
            ifTrue: { (name at: 7)
                          isSymbol }!

    direct method isUnaryName: name
        (self isSymbolName: name)
            ifTrue: { return False }.
        (self isKeywordName: name)
            ifTrue: { return False }.
        True!

    method toSelector
        self!

    method apply: arguments
        self sendTo: arguments first
             with: arguments rest!

    method arity
        self isKeyword
            ifTrue: { return 1 + (name count: { |c| c == ":" }) }.
        self isSymbol
            ifTrue: { return 2 }.
        1!

    method loop
        Error raise: "Cannot use #loop on { self }."!

    method finally: cleanup
        Error raise: "Cannot use #finally: on { self }."!

    method < other
        self name < other name!

    method isKeyword
        Self isKeywordName: self name!

    method isPrefix
        Self isPrefixName: self name!

    method isSymbol
        Self isSymbolName: self name!

    method isUnary
        Self isUnaryName: self name!

    method sendTo: receiver
        name sendTo: receiver
             with: []!

    method sendTo: receiver with: arguments
        -- Output debug println: "{receiver} <= {name} {arguments}".
        name sendTo: receiver
             with: arguments asArray!

    method startsWith: part
        self name startsWith: part!

    -- FIXME: Should really intern selectors on host...
    method isEquivalent: other
        name == other name!

    method displayOn: stream
        stream writeString: "#".
        stream writeString: name!

   method toString
        "#" append: self name!
end
