import .string.String
import .closure.Block

define ColonCharacter
    ":" character!

define UnderscoreCharacter
    "_" character!

class Selector { name }
    is Object
    is Block

    direct method new: name
        self name: name!

    method toSelector
        self!

    method apply: arguments
        self sendTo: arguments first with: arguments rest!

    method arity
        self isKeyword
            ifTrue: { return 1 + (name count: { |c| c == ":" }) }.
        self isSymbol
            ifTrue: { return 2 }.
        1!

    method loop
        Error raise: "Cannot use #loop on {self}."!

    method finally: cleanup
        Error raise: "Cannot use #finally: on {self}."!

    method < other
        self name < other name!

    method isKeyword
        name find: { |c| c == ":" }
             ifNone: { return False }.
        True!

    method isSymbol
        (name at: 1) isSymbol!

    method isPrefix
        ((name size > 6) and: (name startsWith: "prefix"))
            -- Good enough until https://github.com/nikodemus/foolang/issues/331
            -- is implemented.
            ifTrue: { (name at: 7) isSymbol }!

    method isUnary
        self isSymbol
            ifTrue: { return False }.
        self isKeyword
            ifTrue: { return False }.
        True!

    method sendTo: receiver
        name sendTo: receiver with: []!

    method sendTo: receiver with: arguments
        -- Output debug println: "{receiver} <= {name} {arguments}".
        name sendTo: receiver with: arguments asArray!

    method startsWith: part
        self name startsWith: part!

    method parts
        let parts = List new.
        name split: { |c| c == ColonCharacter }
             do:  { |part| parts add: part }.
        parts ifEmpty: { parts add: name }.
        parts!

    -- FIXME: Should really intern selectors!
    method isEquivalent: other
        name == other name!

    method printOn: stream
        stream print: "#".
        stream print: name!

    method toString
        StringOutput with: { |out| self printOn: out }!
end
