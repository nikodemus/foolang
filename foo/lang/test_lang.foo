interface _TestLangInterface
    direct method aDirectMethod
        2345789!
end

class _TestLangClass { value :: Integer }
    is _TestLangInterface
    direct method new
        self value: 9!
    direct method perform: selector with: args
        "GOT: {selector} with: {args}"!
    method value: new
        value = new!
end

define $_LangTestVar 999!

class TestLang { assert }
    is TestSuite

    method test_assign
        let x = 20.
        x = x + 22.
        assert that: { x } is: 42!

    method test_direct_method_of_interface
        assert that: { _TestLangInterface aDirectMethod }
               is: 2345789!

    method test_interface_includes_negative
        assert false: { _TestLangInterface includes: 42 }!

    method test_interface_includes_positive
        assert true: { _TestLangInterface
                           includes: (_TestLangClass new) }!

    method _arg_typecheck: arg :: Integer
        arg!

    method _return_typecheck: arg -> Integer
        arg value!

    method _nonlocal_return_typecheck: arg -> Integer
        self _noreturn_apply: { return arg value }!

    method _noreturn_apply: block
        block value.
        panic "never"!

    method test_block_with_empty_parameter_list
        let b = { || 12349678 }.
        assert that: { b value }
               is: 12349678!

    method test_finally_block_executes_after_fallthrough
        let log = StringOutput new.
        { log print: 1 }
            finally: { log print: 2 }.
        assert that: { log content } equals: "12"!

    method test_finally_block_executes_on_unwind
        let log = StringOutput new.
        self finally_block_executes_on_unwind_aux: log.
        assert that: { log content } equals: "AB"!

    method finally_block_executes_on_unwind_aux: log
        { log print: "A".
          return False.
          log print: "X" }
            finally: { log print: "B" }!

    method test_finally_returns_value_of_main_block_after_fallthrough
        let res = { 192 } finally: { 666 }.
        assert that: { res } equals: 192!

    method test_dynamic_define
        assert that: { $_LangTestVar }
               is: 999!

    method test_dynamic_let
        assert that: { let $_LangTestVar = 6789.
                       self _test_dynamic_let_aux1 }
               is: 6789.
        assert that: { self _test_dynamic_let_aux1 }
               is: 999.
        assert that: { self _test_dynamic_let_aux2 }
               is: 237.
        assert that: { self _test_dynamic_let_aux1 }
               is: 999!

    method _test_dynamic_let_aux1
        $_LangTestVar!

    method _test_dynamic_let_aux2
        { let $_LangTestVar = 237.
          return self _test_dynamic_let_aux1 } value!

    method test_typecheck_value_ok
        assert true: { 11 == (11 :: Integer) }!

    method test_typecheck_method_arg_ok
        assert true: { 21378 == (self _arg_typecheck: 21378) }!

    method test_typecheck_method_return_ok
        assert true: { 933 == (self _return_typecheck: { 933.1 round }) }!

    method test_typecheck_method_nonlocal_return_ok
        assert true: { 371 == (self _nonlocal_return_typecheck: { 371.1 round }) }!

    method test_typecheck_block_arg_ok
        assert true: { 98013 == ({ |x::Integer| x } value: 98013) }!

    method test_typecheck_block_return_ok
        assert that: { { |a| -> Integer a round } value: 42.42 }
               is: 42!

    method test_typecheck_interface_in_ok
        assert true: { 9 == (_TestLangClass new :: _TestLangInterface)
                           value }!

    method test_typecheck_let_ok
        let x :: Integer = 42.
        x = x + 100.
        assert true: { 142 == x }!

    method test_typecheck_slot_init_ok
        assert true: { 283 ==  (_TestLangClass value: 283) value }!

    method test_typecheck_slot_assign_ok
        let obj = _TestLangClass new.
        obj value: 78.
        assert true: { 78 == obj value }!

    method test_return_nonlocal
        assert true: { 420 == (self _test_return_nonlocal_aux) }!

    method _test_return_nonlocal_aux
        1000 + (self _noreturn_apply: { return 420 })!

    method test_is
        let b1 = { 123 }.
        let b2 = { 42 }.
        assert true: { b1 is b1 }.
        assert true: { b2 is b2 }.
        assert false: { b1 is b2 }.
        assert false: { 1 is b1 }.
        assert false: { b1 is 1 }.
        assert true: { 1 is 1 }.
        assert false: { 1 is 2 }!

    method test_cascade
        let res = StringOutput new
                      ; print: 1
                      ; print: 2
                      ; print: 3
                      ; content.
        assert that: { res }
               equals: "123"!

    method test_perform_with
        assert that: { _TestLangClass foo: 1 bar: 2 }
               equals: "GOT: #foo:bar: with: [1, 2]"!
end
