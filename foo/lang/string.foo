import .object.Object

extend String
    is Object
    is Ordered

    class method default
        ""!
    method append: other
       other appendToString: self!
    method newline
        "\n" appendToString: self!
    method printOn: stream
        stream writeString: self!
    method _escapeOn: stream
        [["\"", "\\\""],
         ["\n", "\\n"],
         ["\t", "\\t"],
         ["\r", "\\r"],
         ["\{", "\\\{"]]
           do: { |esc|
                 (self isEquivalent: esc first)
                    ifTrue: { stream writeString: esc second. return stream } }.
        stream writeString: self!
    method displayOn: stream
        stream writeString: "\"".
        self do: { |c| c _escapeOn: stream }.
        stream writeString: "\""!
    method startsWith: other
        1 to: other size
          do: { |i|
                (self at: i) == (other at: i)
                    ifFalse: { return False } }.
        True!
    method character
        self size == 1
            ifTrue: { self at: 1 }
            ifFalse: { Error raise: "Not a character designator string: {self}" }!
end
