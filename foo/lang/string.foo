import .object.Object
import .ordered.Ordered
import .list.List
import .stringOutput.StringOutput

extend String
    is Object
    is Ordered

    direct method default
        ""!

    method < other
        1 to: (self size min: other size)
          do: { |index|
                let a = (self at: index) code.
                let b = (other at: index) code.
                a < b
                    ifTrue: { return True }.
                a > b
                    ifTrue: { return False } }.
        self size < other size!

    method append: other
       other appendToString: self!

    method trimRight
        self trimRight: #isWhitespace!

    method trimRight: block
        let size = self size.
        size downTo: 1
             do: { |index|
                   (block value: (self at: index))
                       ifFalse: { index is size
                                      ifTrue: { return self }
                                      ifFalse: { return self from: 1 to: index } } }.
        ""!

    method newline
        "\n" appendToString: self!

    method printOn: stream
        stream writeString: self!

    method _escapeOn: stream
        [["\"", "\\\""],
         ["\n", "\\n"],
         ["\t", "\\t"],
         ["\r", "\\r"],
         ["\{", "\\\{"]]
           do: { |esc|
                 (self isEquivalent: esc first)
                    ifTrue: { stream writeString: esc second. return stream } }.
        stream writeString: self!

    method displayOn: stream
        stream writeString: "\"".
        self do: { |c| c _escapeOn: stream }.
        stream writeString: "\""!

    method startsWith: other
        1 to: other size
          do: { |i|
                (self at: i) == (other at: i)
                    ifFalse: { return False } }.
        True!

    method join: iterable
        StringOutput with: { |out|
                             iterable do: { |each| out print: each }
                                      interleaving: { out print: self } }!

    method character
        self size == 1
            ifTrue: { self at: 1 }
            ifFalse: { panic "Not a character designator string: {self}" }!

    method replace: s1 with: s2
        let out = StringOutput new.
        self do: { |sX|
                   sX == s1
                       ifTrue: { out print: s2 }
                       ifFalse: { out print: sX } }.
        out content!

    method lines
        let lines = List new.
        self doLines: { |line| lines add: line }.
        lines!

    method doLines: block
        self isEmpty
            ifTrue: { block value: self.
                      return self }.
        let from = 1.
        let i = 1.
        { i <= self size }
            whileTrue: { let c = self at: i.
                         c isNewline
                             ifTrue: { block value: (self from: from to: i - 1).
                                       i = i + 1.
                                       from = i }
                             ifFalse: { i = i + 1 } }.
        (self at: self size) isNewline
            ifTrue: { block value: "" }.
        from <= self size
            ifTrue: { block value: (self from: from to: self size) }.
        self!

    method repeat: n
        let out = StringOutput new.
        n times: { out print: self }.
        out content!
end
