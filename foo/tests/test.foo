import lib.assert.Assert
import lib.si.SI_Tests

import lang.test_dictionary.TestDictionary
import lang.test_byteArray.TestByteArray
import lang.test_byteArray.TestByteArrayAsIterable
import lang.test_character.TestCharacter
import lang.test_closure.TestClosure
import lang.test_file.TestFile
import lang.test_filepath.TestFilePath
import lang.test_filestream.TestFileStream
import lang.test_float.TestFloat
import lang.test_integer.TestInteger
import lang.test_list.TestList
import lang.test_list.TestListAsIterable
import lang.test_object.TestObject
import lang.test_ordered.TestOrdered
import lang.test_record.TestRecord
import lang.test_string.TestString

-- In self_test.foo
import lang.test_array.TestArray
import lang.test_selector.TestSelector

-- Cannot go to self_test.foo yet
import lang.test_array.TestArrayAsIterable

class ShortStringSeqs {}
   direct method do: block
      -- FIXME: actual random generation, please
      block value: [].
      block value: [""].
      block value: ["", ""].
      block value: ["", "", ""].
      block value: ["123", "", ""].
      block value: ["", "123", ""].
      block value: ["", "", "123"]!
end

class Box { value }
    method *** other
        self value * other!
    method * other
        self value * other!
    method + other
        self value + other!
    method prefix-
        - (self value)!
end

define $testVar
    123!

class TestVar {}
    direct method read
        $testVar!
end

class Main { assert system }
    direct method run: cmd in: system
        let instance = self assert: (Assert reportingTo: system output)
                            system: system.
        instance test.
        system exit: instance assert exitCode!

    method test
        [
            TestArray,
            TestArrayAsIterable,
            TestByteArray,
            TestByteArrayAsIterable,
            TestCharacter,
            TestClosure,
            TestDictionary,
            TestFile,
            TestFilePath,
            TestFileStream,
            TestFloat,
            TestInteger,
            TestList,
            TestListAsIterable,
            TestObject,
            TestOrdered,
            TestRecord,
            TestSelector,
            TestString,
            SI_Tests
        ] do: { |each| each runTests: assert in: system }.
        self testIs.
        self testStringOutput.
        self testPrecedence.
        self testPrefix.
        self testPanic.
        self testDynamicVars!

    method testIs
        assert true: { 1 is 1 } testing: "integer 'is' integer (match)".
        assert false: { 1 is 2 } testing: "integer 'is' integet (mismatch)".
        assert true: { "foo" is "foo" } testing: "string 'is' string (match)".
        assert false: { "foo" is "bar" } testing: "string 'is' string (mismatch)".
        assert false: { "foo" is 42 } testing: "string 'is' integer (mismatch)".
        assert true: { { (panic "Oops") is 42. False } onPanic: { |_| True } }
               testing: "'is' propagates errors from left".
        assert true: { { 42 is (panic "Oops"). False } onPanic: { |_| True } }
               testing: "'is' propagates errors from right"!

    method testPanic
        assert true: { ({ panic "BOOM" } onPanic: { |p| p description })
                           == "BOOM" }
               testing: "panic with string argument"!

    method testPrefix
        assert forAll: (1 to: 10)
               that: { |n|
                       let b = Box value: n.
                       -n == -b }
               testing: "custom prefix method"!

    method testPrecedence
       assert forAll: (2 to: 10)
              that: { |n|
                      let a1 = n * n + n.
                      let a2 = (n * n) + n.
                      let b1 = (Box value: n) *** n + n.
                      let b2 = n * (n + n).
                      (a1 == a2)
                        and: (b1 == b2)
                        and: (a1 == b1) not }
              testing: "operator precedence"!

    method testStringOutput
       assert forAll: ShortStringSeqs
              that: { |seq|
                      let out = StringOutput new.
                      let cmp = "".
                      seq do: { |s|
                                 cmp = cmp append: s.
                                 out print: s }.
                      cmp == out content }
             testing: "string output"!

    method testDynamicVars
        assert that: { [ TestVar read,
                         { let $testVar = 42. TestVar read } value,
                         TestVar read ] }
               equals: [ 123, 42, 123 ]
               testing: "dynamic binding of dynamic variable"!
end
