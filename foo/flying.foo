class PointMass { forces, mass, position, velocity }
  method sumForces
     forces inject: [0.0, 0.0, 0.0] into: { |sum force|
         sum + force value
     }

  method _applyForces: time
     velocity = velocity + (self sumForces / mass) * time

  method tick: time
     position = position + velocity * time
     self _applyForces: time
end


class Plane { model noseDirection upDirection maxLift maxSpeed maxThrottle throttle }

   class method mass: mass
                maxLift: maxLift
                maxSpeed: maxSpeed
                maxThrust: maxThrust

     let model = PointMass forces: [ { [0.0, 0.0, -9.81] } -- gravity
                                     { self drag }
                                     { self lift }
                                     { self thrust } ]
                           mass: mass
                           position: [0.0, 0.0, 0.0]
                           velocity: [0.0, 0.0, 0.0]

      self model: model
           noseDirection: [0.0, 1.0, 0.0]
           upDirection: [0.0, 0.0, 1.0]
           maxLift: maxLift
           maxSpeed: maxSpeed
           maxThrottle: maxThrust
           throttle: 0.0 

   method position
      model position

   method throttle: new
      throttle = new atLeast: 0.0 atMost: maxThrottle

   method tick: time
      model tick: time

   method crossSection: v
      1.0 -- FIXME: a box model should not be too hard to calculate

   method dragCoefficient: v
      -- https://en.wikipedia.org/wiki/Drag_coefficient
      -- FIXME: current value is for sphere, should at least interpolate between
      -- different ones for shape

      0.47

   method drag
      -- https://en.wikipedia.org/wiki/Drag_equation
      let velocity = model velocity
      let direction = velocity normalized
      let v = velocity magnitude
      let a = self crossSection: v
      let c = self dragCoefficient: v
      let p = 1.269 -- mass density of air at 5C
      direction * 0.5 * p * v * v * a * c

   method lift
      -- FIXME: https://www.grc.nasa.gov/WWW/K-12/WindTunnel/Activities/lift_formula.html
      let airSpeed = (Vector project: model velocity onto: noseDirection) magnitude
      upDirection * (airSpeed / maxSpeed) * maxLift

   method thrust
      noseDirection * (throttle / MaxThrottle) * maxThrust
      
end

class Main { system }
   method run
      let plane = Plane mass: 1000.0
                        maxLift: 10.0
                        maxSpeed: 50.0
                        maxThrust: 100.0
      plane throttle: 1.0
      100 times: {
          let p = plane position
          system output println: "{p at: 1} {p at: 2} {p at: 3}"
          plane tick: 1.0
      }
end