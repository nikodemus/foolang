import .impl.environment.Environment
import .impl.utils.FileModuleDictionary
import .impl.cTranspiler.CTranspiler

class Main {}
    direct method run: command in: system
        let sourceFile = command first.
        let targetFile = command size > 1
                             ifTrue: { command second }
                             ifFalse: { "a.exe" }.
        let path = system files / sourceFile.
        let mods = FileModuleDictionary
                       new: { "lang" -> system files / "foo/lang",
                              "impl" -> system files / "foo/impl",
                              "lib" -> system files / "foo/lib" }.
        let c = CTranspiler
                    transpile: path readString
                    in: (Environment modules: mods)
                    with: ["lang", "prelude"] asList.
        let files = system files / "c".
        (files / "generated_selectors.h")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c selectors }.
        (files / "generated_declarations.h")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c declarations }.
        (files / "generated_constants.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c constants }.
        (files / "generated_closures.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c closures }.
        (files / "generated_main.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c main }.
        (files / "generated_builtins.c")
            forWrite truncateExisting
                createOrOpen: { |f| f print: c builtins }.

        let exe = system currentDirectory / targetFile.
        exe ifExists: #deleteFile.

        let stackSize = 0x400000. -- 4MiB
        let linkerOptions
            = system isUnix
                ifTrue: { " -Wl,-z,stack-size={stackSize}" }
                ifFalse: { " -Wl,/STACK:{stackSize}" }.
        let sanitizerOptions = " -fsanitize=address -fsanitize=undefined".
        let buildOptions
            = " -fno-omit-frame-pointer -g -Wall -Werror --std=c11".
        let system_c
            = system isUnix
                ifTrue: { " c/system_unix.c" }
                ifFalse: { " c/system_windows.c" }.
        let buildCmd = StringOutput
                           with: { |out|
                                   out print: "clang -o {exe}".
                                   out print: linkerOptions.
                                   out print: sanitizerOptions.
                                   out print: buildOptions.
                                   out print: " c/main.c".
                                   out print: " ext/dtoa.c".
                                   out print: system_c }.
        let build = system command: buildCmd.
        build stderr
            ifNotEmpty: { system output println: "---stderr---".
                          system output println: build stderr.
                          system output println: "---" }.
        build ok
	  ifFalse: { system exit: 1 }!
end
