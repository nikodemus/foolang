import .impl.repl.REPL
import .impl.interpreter.Interpreter
import .impl.formatter.Formatter

-- KLUDGE: prefix import to avoid colliding with bootstrap evaluator class
-- called compiler.
import .impl.compiler

define CommandLineOptions
    { "-h"     -> #help,
      "--help" -> #help,
      "-v"        -> #version,
      "--version" -> #version,
      "-c"        -> #compile,
      "--compile" -> #compile,
      "-f"                 -> #formatToOutput,
      "--format-to-output" -> #formatToOutput,
      "-F"                 -> #formatInPlace,
      "--format-in-place"  -> #formatInPlace }!

class Main { command system }
    direct method run: command in: system
        (self command: command
              system: system)
        run!

    method run
        command isEmpty
            => { return REPL runIn: system }.
        (command first startsWith: "-")
            ifTrue: { return self parseOptions }.
        self interpret!

    method parseOptions
        let opt = command first.
        let selector = CommandLineOptions
                           at: opt
                           ifNone: { self abort: "Unknown command-line option: {opt}" }.
        selector sendTo: self!

    method usage
        system output
            println: "usage: foo [option] [filename] [argument*]"!

    method help
        self usage.
        system output
            ; newline
            ; println: "  When run without any arguments, start a REPL."
            ; newline
            ; println: "  When run with non-option arguments runs the specified"
            ; println: "  file as a script, passing the remaining command-line"
            ; println: "  arguments to it."
            ; newline
            ; println: "  Options:"
            ; newline
            ; println: "  -v, --version  Print the Foolang version."
            ; println: "  -h, --help     Print this message."
            ; println: "  -c, --compile  Compile the specified file."
            ; println: "  -f, --format-to-output"
            ; println: "                 Format the specified file to standard output."
            ; println: "  -F, --format-in-place"
            ; println: "                 Format the specified file in place."
            ; newline
            ; println: "  Compiler and formatter both require the filename to have"
            ; println: "  a .foo extension, but files with arbitrary extensions"
            ; println: "  can be run as scripts."
            ; newline
            ; println: "  Compiler produces the executable in the same directory"
            ; println: "  as the original file, naming it following the plaform"
            ; println: "  convention."
        !

    method version
        system output println: "Foolang {Foolang version}"!

    method interpret
        -- Interpreter doesn't check for .foo extension, so that shebang
        -- scripts don't have to carry it.
        Interpreter
            run: command first
            in: system
            with: command rest!

    method compile
        compiler.Compiler
            compile: self justOneFooFileArg
            in: system!

    method formatInPlace
        let file = system files / self justOneFooFileArg.
        Formatter formatInPlace: file reportingTo: system output!

    method formatToOutput
        let file = system files / self justOneFooFileArg.
        Formatter format: file to: system output!

    method justOneFooFileArg
        command size > 2
            ifTrue: { self abort: "Too many arguments to {command first}!" }.
        let filename = command second.
        (filename endsWith: ".foo")
            ifFalse: { self abort: "Not a Foolang source file: {filename}" }.
        filename!

    method abort: message
        system output print: "Invalid command-line. "
        system output println: message.
        self shortHelp.
        system exit: 1!

end
