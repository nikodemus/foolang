class Process {}
    is Object
end

class InterpreterContext {}
    is Object
end

class Environment {}
    is Object
end

class AstConstantRef { value }
    is Object
    method evalWith: context in: process
        value
end

class SyntaxLiteral { value }
    is Object
    method translateIn: environment
        AstConstantRef value: value
end

define InvalidSuffixPrecedence
    0
end

class TokenDecimal { first last }
    is Object
    class method from: first to: last
        self first: first last: last

    method precedence
        InvalidSuffixPrecedence

    method parseAsPrefixWith: parser
        let n = 0.
        first to: last
              do: { |pos|
                    n = n * 10 + (parser source at: pos) digit }.
        SyntaxLiteral value: n
end

class TokenEof { position }
    is Object
    class method at: position
        self position: position

    method precedence
        InvalidSuffixPrecedence
end

-- FIXME: Broken for unicode input!
class Parser { source position first last lookahead }
    is Object
    class method parse: source
        (self
             source: source
             position: 1
             first: 1
             last: (source size)
             lookahead: List new)
        parseWithPrecedence: 0

    method parseWithPrecedence: precedence
        self parseSuffixOf: self parsePrefix with: precedence

    method parsePrefix
        self nextToken parseAsPrefixWith: self

    method parseSuffixOf: prefix with: precedence
        let expr = prefix.
        { precedence < self nextPrecedence }
            whileTrue: { expr = self parseSuffixOf: expr }.
        expr

    method parseSuffixOf: prefix
        (self tokenParser: self nextToken)
            parseSuffixOf: prefix
            with: self

    method nextPrecedence
        self lookahead precedence

    method lookahead
        lookahead
            ifEmpty: { lookahead push: self scanNext }.
        lookahead first

    method nextToken
        lookahead isEmpty
            ifTrue: { self scanNext }
            ifFalse: { lookahead pop }.

    method scanNext
        self atDigit
            ifTrue: { return self scanDecimal }.
        self atEof
            ifTrue: { return TokenEof at: position }.
        Error raise: "Don't know how to scan pos: {position} in: {source}"

    method scanDecimal
        self atDigit assert: "scanDecimal starts on digit".
        let start = position.
        { self atDigit }
            whileTrue: { self advance }.
        TokenDecimal first: start last: position - 1.

    method advance
        position = position + 1.

    method atEof
        position > last

    method atDigit
        self at: #isDigit

    method atWhitespace
        self at: #isWhitespace

    method at: selector
        self atEof
            ifTrue: { False }
            ifFalse: { (selector sendTo: (source at: position)) }

    method skipWhitespace
        { self atWhitespace }
            whileTrue: { self advance }.

end

class Tests {}
    class method run
        self new run
    method run
        self test42.
    method test42
        let ast = (Parser parse: "42") translateIn: Environment new.
        let res = ast
                      evalWith: InterpreterContext new
                      in: Process new.
        res is 42 assert: "Constant evaluation"
end
