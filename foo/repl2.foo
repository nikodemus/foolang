class REPL

  {
      _input
      _output
      _compiler
      _atEof
      _value
  }

  class method run: system
     (self new: system) run

  class method new: system
     self _input: system input
          _output: system output
          _compiler: Compiler new
          _atEof: False
          _value: False

  method run
     _output println: "Foolang 0.2.0",
     { _atEof } whileFalse: { self readEvalPrint }
     _output println: _atEof toString

  method readEvalPrint
     { self prompt, self read, self eval, self print } onError:
     { |error context| _output println: error, _output println: context }

  method prompt
     _output print: "> "
     _output flush

  method read
     let source = ""
     {
         let line = _input readline
         _atEof = line is False
         _atEof ifFalse: {
           source = source append: line
           self _tryParse: source
         }
     } whileFalse

  method eval
     _atEof ifFalse: { _value = _compiler evaluate }

  method print
     _atEof ifFalse: { _output println: _value toString }

  method _tryParse: source
     _compiler parse: source onEof: { return False },
    True

end

class Main { system }
  method run
     REPL run: system
end
