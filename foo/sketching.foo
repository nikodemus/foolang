@class Parser []

@class-method Parser parse: string
   Parser new parseString: string

@class-method Parser new
   self createInstance

@method Parser parseString: string
   self parse: (self tokenize: string)

@method Parser parse: tokens
   self parse: tokens first then: tokens rest

@method Parser parse: token then: tokens
   token isOpenDelimiter
      ifTrue: {
          self pushDelimiter: token,
          ^parse: tokens first then: tokens rest
      },
   token isCloseDelimiter
      ifTrue: {
          token closedBy: (self popDelimiter),
          ^
      }

@class Context [
  "Current self."
  receiver
  "Current block closure being executed or none."
  block
  "Method being executed for method context, method
   holding the block for a block context."
  method
  "Temporary variable values including arguments."
  variables*
]

@class Playground [name steps]

@class PlaygroundStep [code display]

@method Playground replayFrom: index
   steps from: index do: [ :step |
      step code eval renderOn: step display
   ]

@method Object renderOn: display
   display renderObject: self

@method TextDisplay renderObject: object
   object printOn: self

@method HtmlDisplay renderObject: object
   object printHtmlOn: self

@method HtmlObject printHtmlOn: stream
   stream write: '<a id="{self anchor}">{self}</a>'
