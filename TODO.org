#+TITLE: Foolang Worklog
#+AUTHOR: Nikodemus Siivola
#+DRAWERS: more example
#+TODO: TODO WIP | LATER DONE

* Public release
** DONE one pass over contents of docs/ to collect TODOs here
** DONE allow comments inside classes (between methods)
** DONE rewrite main README.md pointing to docs/ mainly.
** DONE cleanup stale branches
** DONE LICENSE file
** DONE rename --ide to --webrepl
** DONE LATER change all Expr internals to be structs
*** DONE Bind
*** DONE Block
*** DONE Cascade
*** DONE Chain
*** DONE Const
*** DONE Eq
*** DONE Seq
*** DONE Typecheck
** DONE allow arbitrary binary messages
** DONE emacs syntax highlighting & indentation
** DONE allow prefix message definitions
** DONE Records
*** DONE define syntax
*** DONE Record class
Record x: 42 y: 10
*** DONE Handle syntax in parser
** WIP Dictionaries
*** DONE define syntax
*** DONE Dictionary class: new, at:, put:at:, remove:, do:
*** TODO Handle syntax in parser
** TODO class library documentation
*** TODO method docstrings: parse, add to methods
method foo
    -- Useful for getting an answer.
    42
method bar
    ---
    Sufficiently complex method to require a longer
    docstring.
    ---
    1
?
class Foo {}
    ---
    General explanation on how to class and the following methods
    work.
    ---
end
*** TODO Class#help
** TODO interfaces -> default displayOn: and printOn: methods, etc
** TODO fix links in bibliography
** TODO organize foo/ -> foo/lang, foo/tests, foo/examples
** TODO reserved word for raising an error
** LATER cleanups
*** LATER rename string_as_str to as_str
** LATER change Expr into a trait, and Expr objects into Box<dyn Expr>
** LATER expose Expr as Object
** LATER indentation at the beginning of an empty line
** LATER method bodies end with a dot
** LATER Character class
** LATER record syntax
** LATER printing block source code (non-pretty), for error-reporting
** LATER devmode flag to parser to catch private sends
** LATER change string interpolation to use StringOutput
** LATER error source locations
** LATER backtraces
** LATER implicit '_' argument in blocks
** LATER Block#apply: for test running
** LATER prism syntax highlighting
** LATER vscode syntax highlighting & indentation
** LATER sketch out dynamic variable design
** LATER string and array generators in for ptesting
** LATER array[x] accessors
** LATER array slicing methods
** LATER document `is`
